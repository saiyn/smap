!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	nbase/nbase.h	252;"	d
ADLER32_BASE	nbase/nbase_misc.c	666;"	d	file:
ADLER32_BASE	nbase/nbase_misc.c	693;"	d	file:
AF_INET6	nbase/nbase_ipv6.h	156;"	d
AI_CANONNAME	nbase/nbase_ipv6.h	267;"	d
AI_NUMERICHOST	nbase/nbase_ipv6.h	268;"	d
AI_PASSIVE	nbase/nbase_ipv6.h	266;"	d
ALL	liblua/Makefile	/^ALL= all$/;"	m
ALLONES	liblua/lbitlib.c	37;"	d	file:
ALL_A	liblua/Makefile	/^ALL_A= $(LUA_A)$/;"	m
ALL_O	liblua/Makefile	/^ALL_O= $(BASE_O) $(LUA_O) $(LUAC_O)$/;"	m
ALL_T	liblua/Makefile	/^ALL_T= $(LUA_A) $(LUA_T) $(LUAC_T)$/;"	m
ALPHABIT	liblua/lctype.h	39;"	d
AR	liblua/Makefile	/^AR= ar rcu$/;"	m
AR	nbase/Makefile	/^AR = ar$/;"	m
AR	nsock/src/Makefile	/^AR = ar$/;"	m
ASC_START	nbase/nbase_misc.c	735;"	d	file:
AUXMARK	liblua/loadlib.c	272;"	d	file:
AssertEqual	nsock/tests/test-common.h	34;"	d
AssertNonNull	nsock/tests/test-common.h	33;"	d
AssertStrEqual	nsock/tests/test-common.h	35;"	d
AuxsetnodeT	liblua/ltable.c	/^} AuxsetnodeT;$/;"	t	typeref:struct:__anon9	file:
BASE_O	liblua/Makefile	/^BASE_O= $(CORE_O) $(LIB_O) $(MYOBJS)$/;"	m
BASIC_STACK_SIZE	liblua/lstate.h	68;"	d
BITRK	liblua/lopcodes.h	134;"	d
BITVECTOR_BITS	nbase/nbase_addrset.c	655;"	d	file:
BIT_ISCOLLECTABLE	liblua/lobject.h	63;"	d
BIT_IS_SET	nbase/nbase_addrset.c	657;"	d	file:
BIT_SET	nbase/nbase_addrset.c	656;"	d	file:
BLACKBIT	liblua/lgc.h	80;"	d
BOLDGREEN	nsock/tests/tests_main.c	14;"	d	file:
BOLDRED	nsock/tests/tests_main.c	13;"	d	file:
BUFFER_I	nse_nsock.cc	44;"	d	file:
BUFFER_I	nse_nsock_tmp.cc	14;"	d	file:
BinOpr	liblua/lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	liblua/lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
BlockCnt	liblua/lparser.c	/^typedef struct BlockCnt {$/;"	s	file:
BlockCnt	liblua/lparser.c	/^} BlockCnt;$/;"	t	typeref:struct:BlockCnt	file:
CAP_POSITION	liblua/lstrlib.c	211;"	d	file:
CAP_UNFINISHED	liblua/lstrlib.c	210;"	d	file:
CC	Makefile	/^CC= g++$/;"	m
CC	liblua/Makefile	/^CC= gcc -std=gnu99$/;"	m
CC	nbase/Makefile	/^CC = gcc$/;"	m
CC	nsock/examples/Makefile	/^CC = gcc$/;"	m
CC	nsock/src/Makefile	/^CC = gcc$/;"	m
CC	nsock/tests/Makefile	/^CC 	= gcc$/;"	m
CCOPT	nbase/Makefile	/^CCOPT = $/;"	m
CCOPT	nsock/examples/Makefile	/^CCOPT =$/;"	m
CCOPT	nsock/src/Makefile	/^CCOPT =$/;"	m
CClosure	liblua/lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	liblua/lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CFLAGS	liblua/Makefile	/^CFLAGS= -O2 -Wall -Wextra -DLUA_COMPAT_5_2 $(SYSCFLAGS) $(MYCFLAGS)$/;"	m
CFLAGS	nbase/Makefile	/^CFLAGS = -g -O2 -Wall  $(CCOPT) $(GLIB_CFLAGS) $(DEFS) $(INCLS)$/;"	m
CFLAGS	nsock/examples/Makefile	/^CFLAGS =  -I\/usr\/local\/include -Wall -g $(CCOPT) $(DEFS) $(INCLS)$/;"	m
CFLAGS	nsock/src/Makefile	/^CFLAGS = -g -O2 -Wall  $(CCOPT)$/;"	m
CFLAGS	nsock/tests/Makefile	/^CFLAGS	= -g -O2 -Wall $/;"	m
CIPHERS_FAST	nsock/src/nsock_ssl.c	79;"	d	file:
CIPHERS_SECURE	nsock/src/nsock_ssl.c	74;"	d	file:
CIST_FIN	liblua/lstate.h	125;"	d
CIST_FRESH	liblua/lstate.h	119;"	d
CIST_HOOKED	liblua/lstate.h	118;"	d
CIST_HOOKYIELD	liblua/lstate.h	123;"	d
CIST_LEQ	liblua/lstate.h	124;"	d
CIST_LUA	liblua/lstate.h	117;"	d
CIST_OAH	liblua/lstate.h	116;"	d
CIST_TAIL	liblua/lstate.h	122;"	d
CIST_YPCALL	liblua/lstate.h	121;"	d
CLIBS	liblua/loadlib.c	/^static const int CLIBS = 0;$/;"	v	file:
CONNECT_WAITING	nse_nsock.cc	/^  CONNECT_WAITING = lua_upvalueindex(5), \/* Threads waiting to lock *\/$/;"	e	enum:__anon30	file:
CORE_O	liblua/Makefile	/^CORE_O=	lapi.o lcode.o lctype.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o \\$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = -I$(LIBLUA_PATH) -I$(LIBNBASE_PATH) -I$(LIBNSOCK_PATH)\/include -O0 -g$/;"	m
CPPFLAGS	nbase/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	nsock/src/Makefile	/^CPPFLAGS = -I..\/..\/libpcap  -I..\/..\/nbase $(DEFS) $(INCLS)$/;"	m
CPPFLAGS	nsock/tests/Makefile	/^CPPFLAGS = -I..\/..\/libpcap  -I..\/..\/nbase -I..\/include$/;"	m
CRC32C	nbase/nbase_crc32ct.h	136;"	d
CRC32C_POLY	nbase/nbase_crc32ct.h	135;"	d
CREATE_ABC	liblua/lopcodes.h	116;"	d
CREATE_ABx	liblua/lopcodes.h	121;"	d
CREATE_Ax	liblua/lopcodes.h	125;"	d
CallInfo	liblua/lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	liblua/lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallS	liblua/lapi.c	/^struct CallS {  \/* data to 'f_call' *\/$/;"	s	file:
Closure	liblua/lobject.h	/^typedef union Closure {$/;"	u
Closure	liblua/lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
ClosureHeader	liblua/lobject.h	/^  ClosureHeader;$/;"	m	struct:CClosure
ClosureHeader	liblua/lobject.h	/^  ClosureHeader;$/;"	m	struct:LClosure
ClosureHeader	liblua/lobject.h	443;"	d
CommonHeader	liblua/lobject.h	/^  CommonHeader;$/;"	m	struct:GCObject
CommonHeader	liblua/lobject.h	/^  CommonHeader;$/;"	m	struct:Proto
CommonHeader	liblua/lobject.h	/^  CommonHeader;$/;"	m	struct:TString
CommonHeader	liblua/lobject.h	/^  CommonHeader;$/;"	m	struct:Table
CommonHeader	liblua/lobject.h	/^  CommonHeader;$/;"	m	struct:Udata
CommonHeader	liblua/lobject.h	79;"	d
CommonHeader	liblua/lstate.h	/^  CommonHeader;$/;"	m	struct:lua_State
ConsControl	liblua/lparser.c	/^struct ConsControl {$/;"	s	file:
DEFAULT_PROXY_PORT_HTTP	nsock/src/proxy_http.c	65;"	d	file:
DEFAULT_PROXY_PORT_SOCKS4	nsock/src/proxy_socks4.c	66;"	d	file:
DEFAULT_TIMEOUT	nse_nsock.cc	30;"	d	file:
DEFS	nbase/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	nsock/examples/Makefile	/^DEFS =$/;"	m
DEFS	nsock/src/Makefile	/^DEFS = -DHAVE_CONFIG_H -DNSOCK_VERSION=\\"$(NSOCK_VERSION)\\"$/;"	m
DEPS	nbase/Makefile	/^DEPS = getopt.h nbase.h nbase_winconfig.h nbase_config.h nbase_ipv6.h nbase_winunix.h nbase_crc32ct.h$/;"	m
DEPS	nsock/src/Makefile	/^DEPS =	error.h filespace.h gh_list.h nsock_internal.h netutils.h nsock_pcap.h \\$/;"	m
DEVNULL	nbase/nbase.h	373;"	d
DEVNULL	nbase/nbase.h	375;"	d
DIGITBIT	liblua/lctype.h	40;"	d
DLMSG	liblua/loadlib.c	228;"	d	file:
DTLS_client_method	nsock/src/configure	/^DTLS_client_method()$/;"	f
DumpBlock	liblua/ldump.c	/^static void DumpBlock (const void *b, size_t size, DumpState *D) {$/;"	f	file:
DumpByte	liblua/ldump.c	/^static void DumpByte (int y, DumpState *D) {$/;"	f	file:
DumpCode	liblua/ldump.c	/^static void DumpCode (const Proto *f, DumpState *D) {$/;"	f	file:
DumpConstants	liblua/ldump.c	/^static void DumpConstants (const Proto *f, DumpState *D) {$/;"	f	file:
DumpDebug	liblua/ldump.c	/^static void DumpDebug (const Proto *f, DumpState *D) {$/;"	f	file:
DumpFunction	liblua/ldump.c	/^static void DumpFunction (const Proto *f, TString *psource, DumpState *D) {$/;"	f	file:
DumpHeader	liblua/ldump.c	/^static void DumpHeader (DumpState *D) {$/;"	f	file:
DumpInt	liblua/ldump.c	/^static void DumpInt (int x, DumpState *D) {$/;"	f	file:
DumpInteger	liblua/ldump.c	/^static void DumpInteger (lua_Integer x, DumpState *D) {$/;"	f	file:
DumpLiteral	liblua/ldump.c	37;"	d	file:
DumpNumber	liblua/ldump.c	/^static void DumpNumber (lua_Number x, DumpState *D) {$/;"	f	file:
DumpProtos	liblua/ldump.c	/^static void DumpProtos (const Proto *f, DumpState *D) {$/;"	f	file:
DumpState	liblua/ldump.c	/^} DumpState;$/;"	t	typeref:struct:__anon21	file:
DumpString	liblua/ldump.c	/^static void DumpString (const TString *s, DumpState *D) {$/;"	f	file:
DumpUpvalues	liblua/ldump.c	/^static void DumpUpvalues (const Proto *f, DumpState *D) {$/;"	f	file:
DumpVar	liblua/ldump.c	49;"	d	file:
DumpVector	liblua/ldump.c	35;"	d	file:
Dyndata	liblua/lparser.h	/^typedef struct Dyndata {$/;"	s
Dyndata	liblua/lparser.h	/^} Dyndata;$/;"	t	typeref:struct:Dyndata
EACCES	nbase/nbase_winunix.h	235;"	d
EACCES	nbase/nbase_winunix.h	236;"	d
EAFNOSUPPORT	nbase/inet_ntop.c	54;"	d	file:
EAFNOSUPPORT	nbase/inet_pton.c	59;"	d	file:
EAGAIN	nbase/nbase_winunix.h	213;"	d
EAGAIN	nbase/nbase_winunix.h	214;"	d
EAI_ADDRFAMILY	nbase/nbase_ipv6.h	215;"	d
EAI_AGAIN	nbase/nbase_ipv6.h	216;"	d
EAI_BADFLAGS	nbase/nbase_ipv6.h	217;"	d
EAI_BADHINTS	nbase/nbase_ipv6.h	226;"	d
EAI_FAIL	nbase/nbase_ipv6.h	218;"	d
EAI_FAMILY	nbase/nbase_ipv6.h	219;"	d
EAI_MAX	nbase/nbase_ipv6.h	228;"	d
EAI_MEMORY	nbase/nbase_ipv6.h	220;"	d
EAI_NODATA	nbase/nbase_ipv6.h	221;"	d
EAI_NONAME	nbase/nbase_ipv6.h	222;"	d
EAI_PROTOCOL	nbase/nbase_ipv6.h	227;"	d
EAI_SERVICE	nbase/nbase_ipv6.h	223;"	d
EAI_SOCKTYPE	nbase/nbase_ipv6.h	224;"	d
EAI_SYSTEM	nbase/nbase_ipv6.h	225;"	d
ECONNABORTED	nbase/nbase_winunix.h	207;"	d
ECONNABORTED	nbase/nbase_winunix.h	208;"	d
ECONNREFUSED	nbase/nbase_winunix.h	211;"	d
ECONNREFUSED	nbase/nbase_winunix.h	212;"	d
ECONNRESET	nbase/nbase_winunix.h	209;"	d
ECONNRESET	nbase/nbase_winunix.h	210;"	d
EHOSTDOWN	nbase/nbase_winunix.h	227;"	d
EHOSTDOWN	nbase/nbase_winunix.h	228;"	d
EHOSTUNREACH	nbase/nbase_winunix.h	217;"	d
EHOSTUNREACH	nbase/nbase_winunix.h	218;"	d
EINPROGRESS	nbase/nbase_winunix.h	229;"	d
EINPROGRESS	nbase/nbase_winunix.h	230;"	d
EINTR	nbase/nbase_winunix.h	237;"	d
EINTR	nbase/nbase_winunix.h	238;"	d
EINVAL	nbase/nbase_winunix.h	231;"	d
EINVAL	nbase/nbase_winunix.h	232;"	d
EIO	nbase/nbase_winunix.h	249;"	d
EIO	nbase/nbase_winunix.h	250;"	d
ELT_COUNT	nsock/tests/ghlists.c	15;"	d	file:
EMSGSIZE	nbase/nbase_winunix.h	241;"	d
EMSGSIZE	nbase/nbase_winunix.h	242;"	d
ENETDOWN	nbase/nbase_winunix.h	219;"	d
ENETDOWN	nbase/nbase_winunix.h	220;"	d
ENETRESET	nbase/nbase_winunix.h	223;"	d
ENETRESET	nbase/nbase_winunix.h	224;"	d
ENETUNREACH	nbase/nbase_winunix.h	221;"	d
ENETUNREACH	nbase/nbase_winunix.h	222;"	d
ENGINE_EPOLL	nsock/src/nsock_engines.c	75;"	d	file:
ENGINE_EPOLL	nsock/src/nsock_engines.c	77;"	d	file:
ENGINE_IOCP	nsock/src/nsock_engines.c	68;"	d	file:
ENGINE_IOCP	nsock/src/nsock_engines.c	70;"	d	file:
ENGINE_KQUEUE	nsock/src/nsock_engines.c	82;"	d	file:
ENGINE_KQUEUE	nsock/src/nsock_engines.c	84;"	d	file:
ENGINE_POLL	nsock/src/nsock_engines.c	89;"	d	file:
ENGINE_POLL	nsock/src/nsock_engines.c	91;"	d	file:
ENGINE_SELECT	nsock/src/nsock_engines.c	96;"	d	file:
ENOBUFS	nbase/nbase_winunix.h	239;"	d
ENOBUFS	nbase/nbase_winunix.h	240;"	d
ENOMEM	nbase/nbase_winunix.h	243;"	d
ENOMEM	nbase/nbase_winunix.h	244;"	d
ENOTSOCK	nbase/nbase_winunix.h	245;"	d
ENOTSOCK	nbase/nbase_winunix.h	246;"	d
EOFMARK	liblua/lua.c	282;"	d	file:
EOPNOTSUPP	nbase/nbase_winunix.h	247;"	d
EOPNOTSUPP	nbase/nbase_winunix.h	248;"	d
EOZ	liblua/lzio.h	16;"	d
EPERM	nbase/nbase_winunix.h	233;"	d
EPERM	nbase/nbase_winunix.h	234;"	d
EPOLLRDHUP	nsock/src/engine_epoll.c	80;"	d	file:
EPOLL_R_FLAGS	nsock/src/engine_epoll.c	75;"	d	file:
EPOLL_W_FLAGS	nsock/src/engine_epoll.c	76;"	d	file:
EPOLL_X_FLAGS	nsock/src/engine_epoll.c	82;"	d	file:
ERRFUNC	liblua/loadlib.c	359;"	d	file:
ERRLIB	liblua/loadlib.c	358;"	d	file:
ERRORSTACKSIZE	liblua/ldo.c	174;"	d	file:
ERROR_H	nsock/src/error.h	59;"	d
ETIMEDOUT	nbase/nbase_winunix.h	225;"	d
ETIMEDOUT	nbase/nbase_winunix.h	226;"	d
EV_EXCEPT	nsock/src/nsock_internal.h	135;"	d
EV_LIST_INIT_SIZE	nsock/src/engine_poll.c	85;"	d	file:
EV_NONE	nsock/src/nsock_internal.h	132;"	d
EV_READ	nsock/src/nsock_internal.h	133;"	d
EV_SETFLAG	nsock/src/engine_kqueue.c	188;"	d	file:
EV_WRITE	nsock/src/nsock_internal.h	134;"	d
EWOULDBLOCK	nbase/nbase_winunix.h	215;"	d
EWOULDBLOCK	nbase/nbase_winunix.h	216;"	d
EXE	nsock/tests/Makefile	/^EXE = tests_main$/;"	m
EXTRA_STACK	liblua/lstate.h	65;"	d
FILESPACE_H	nsock/src/filespace.h	59;"	d
FINALIZEDBIT	liblua/lgc.h	81;"	d
FIRST_RESERVED	liblua/llex.h	14;"	d
FLAGS	liblua/lstrlib.c	900;"	d	file:
FROM	nse_nsock.cc	296;"	d	file:
FROM	nse_nsock_tmp.cc	16;"	d	file:
FS_INITSIZE_DEFAULT	nsock/src/filespace.c	63;"	d	file:
FUNCTION	liblua/luac.c	120;"	d	file:
F_OK	nbase/nbase.h	339;"	d
Ftypes	liblua/lstrlib.c	/^typedef union Ftypes {$/;"	u	file:
Ftypes	liblua/lstrlib.c	/^} Ftypes;$/;"	t	typeref:union:Ftypes	file:
FuncState	liblua/lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	liblua/lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
G	liblua/lstate.h	205;"	d
GCFINALIZECOST	liblua/lgc.c	45;"	d	file:
GCObject	liblua/lobject.h	/^struct GCObject {$/;"	s
GCObject	liblua/lobject.h	/^typedef struct GCObject GCObject;$/;"	t	typeref:struct:GCObject
GCSTEPSIZE	liblua/lgc.h	32;"	d
GCSWEEPCOST	liblua/lgc.c	39;"	d	file:
GCSWEEPMAX	liblua/lgc.c	42;"	d	file:
GCSatomic	liblua/lgc.h	40;"	d
GCScallfin	liblua/lgc.h	45;"	d
GCSinsideatomic	liblua/lgc.c	33;"	d	file:
GCSpause	liblua/lgc.h	46;"	d
GCSpropagate	liblua/lgc.h	39;"	d
GCSswpallgc	liblua/lgc.h	41;"	d
GCSswpend	liblua/lgc.h	44;"	d
GCSswpfinobj	liblua/lgc.h	42;"	d
GCSswptobefnz	liblua/lgc.h	43;"	d
GCTM	liblua/lgc.c	/^static void GCTM (lua_State *L, int propagateerrors) {$/;"	f	file:
GCUnion	liblua/lstate.h	/^union GCUnion {$/;"	u
GCdebt	liblua/lstate.h	/^  l_mem GCdebt;  \/* bytes allocated not yet compensated by the collector *\/$/;"	m	struct:global_State
GCestimate	liblua/lstate.h	/^  lu_mem GCestimate;  \/* an estimate of the non-garbage memory in use *\/$/;"	m	struct:global_State
GCmemtrav	liblua/lstate.h	/^  lu_mem GCmemtrav;  \/* memory traversed by the GC *\/$/;"	m	struct:global_State
GETARG_A	liblua/lopcodes.h	97;"	d
GETARG_Ax	liblua/lopcodes.h	109;"	d
GETARG_B	liblua/lopcodes.h	100;"	d
GETARG_Bx	liblua/lopcodes.h	106;"	d
GETARG_C	liblua/lopcodes.h	103;"	d
GETARG_sBx	liblua/lopcodes.h	112;"	d
GET_OPCODE	liblua/lopcodes.h	89;"	d
GH_HEAP_GUARD	nsock/src/gh_heap.h	87;"	d
GH_HEAP_H	nsock/src/gh_heap.h	58;"	d
GH_LIST_H	nsock/src/gh_list.h	58;"	d
GH_LIST_MAGIC	nsock/src/gh_list.h	72;"	d
GH_LIST_PARANOID	nsock/src/gh_list.h	73;"	d
GH_SLOTS	nsock/src/gh_heap.c	69;"	d	file:
GLOBALS	nbase/nbase_winunix.h	200;"	d
GMatchState	liblua/lstrlib.c	/^typedef struct GMatchState {$/;"	s	file:
GMatchState	liblua/lstrlib.c	/^} GMatchState;$/;"	t	typeref:struct:GMatchState	file:
GenerateTargetIPString	Target.cc	/^void Target::GenerateTargetIPString(void)$/;"	f	class:Target
GlobalLTD	nsock/tests/logs.c	/^static struct log_test_data *GlobalLTD;$/;"	v	typeref:struct:log_test_data	file:
HAVE_AF_INET6	nbase/nbase_config.h	233;"	d
HAVE_AF_INET6	nbase/nbase_winconfig.h	203;"	d
HAVE_ARPA_INET_H	nbase/nbase_config.h	217;"	d
HAVE_ASPRINTF	nbase/nbase_config.h	253;"	d
HAVE_EPOLL	nsock/include/nsock_config.h	89;"	d
HAVE_ERRNO_H	nbase/nbase_config.h	170;"	d
HAVE_ERRNO_H	nbase/nbase_winconfig.h	159;"	d
HAVE_ERRNO_H	nbase/nbase_winconfig.h	165;"	d
HAVE_FCNTL_H	nbase/nbase_config.h	168;"	d
HAVE_FCNTL_H	nbase/nbase_winconfig.h	158;"	d
HAVE_GAI_STRERROR	nbase/nbase_config.h	237;"	d
HAVE_GAI_STRERROR	nbase/nbase_winconfig.h	166;"	d
HAVE_GETADDRINFO	nbase/nbase_config.h	236;"	d
HAVE_GETADDRINFO	nbase/nbase_winconfig.h	186;"	d
HAVE_GETNAMEINFO	nbase/nbase_config.h	238;"	d
HAVE_GETNAMEINFO	nbase/nbase_winconfig.h	187;"	d
HAVE_GETOPT	nbase/nbase_config.h	203;"	d
HAVE_GETOPT_H	nbase/nbase_config.h	154;"	d
HAVE_GETOPT_LONG_ONLY	nbase/nbase_config.h	205;"	d
HAVE_GETTIMEOFDAY	nbase/nbase_config.h	197;"	d
HAVE_INET_NTOP	nbase/nbase_config.h	239;"	d
HAVE_INET_NTOP	nbase/nbase_winconfig.h	176;"	d
HAVE_INET_PTON	nbase/nbase_config.h	240;"	d
HAVE_INET_PTON	nbase/nbase_winconfig.h	175;"	d
HAVE_INTTYPES_H	nbase/nbase_config.h	221;"	d
HAVE_IOCP	nsock/include/nsock_winconfig.h	71;"	d
HAVE_IPV6	nbase/nbase_config.h	232;"	d
HAVE_IPV6	nbase/nbase_winconfig.h	202;"	d
HAVE_IP_IP_SUM	nbase/nbase_winconfig.h	154;"	d
HAVE_MEMCPY	nbase/nbase_winconfig.h	161;"	d
HAVE_MEMORY_H	nbase/nbase_config.h	164;"	d
HAVE_MEMORY_H	nbase/nbase_winconfig.h	157;"	d
HAVE_NANOSLEEP	nbase/nbase_config.h	140;"	d
HAVE_NETDB_H	nbase/nbase_config.h	152;"	d
HAVE_NETDB_H	nsock/include/nsock_config.h	82;"	d
HAVE_NETINET_IF_ETHER_H	nbase/nbase_winconfig.h	169;"	d
HAVE_NETINET_IN_H	nbase/nbase_config.h	211;"	d
HAVE_NET_IF_H	nbase/nbase_config.h	187;"	d
HAVE_OPENSSL	nbase/nbase_winconfig.h	220;"	d
HAVE_PCAP	nsock/include/nsock_config.h	61;"	d
HAVE_PCAP	nsock/include/nsock_winconfig.h	63;"	d
HAVE_PCAP_SET_IMMEDIATE_MODE	nsock/include/nsock_config.h	93;"	d
HAVE_POLL	nsock/include/nsock_config.h	90;"	d
HAVE_POLL	nsock/include/nsock_winconfig.h	70;"	d
HAVE_PROC_SELF_EXE	nbase/nbase_config.h	265;"	d
HAVE_SIGNAL	nbase/nbase_config.h	201;"	d
HAVE_SLEEP	nbase/nbase_config.h	199;"	d
HAVE_SNPRINTF	nbase/nbase_config.h	251;"	d
HAVE_SNPRINTF	nbase/nbase_winconfig.h	189;"	d
HAVE_SOCKADDR_IN6	nbase/nbase_config.h	234;"	d
HAVE_SOCKADDR_STORAGE	nbase/nbase_config.h	235;"	d
HAVE_SOCKADDR_STORAGE	nbase/nbase_winconfig.h	204;"	d
HAVE_SSL_SET_TLSEXT_HOST_NAME	nbase/nbase_winconfig.h	221;"	d
HAVE_STRCASECMP	nbase/nbase_config.h	193;"	d
HAVE_STRCASECMP	nbase/nbase_winconfig.h	168;"	d
HAVE_STRCASESTR	nbase/nbase_config.h	191;"	d
HAVE_STRERROR	nbase/nbase_config.h	175;"	d
HAVE_STRERROR	nbase/nbase_winconfig.h	162;"	d
HAVE_STRINGS_H	nbase/nbase_config.h	158;"	d
HAVE_STRING_H	nbase/nbase_config.h	150;"	d
HAVE_STRING_H	nbase/nbase_winconfig.h	156;"	d
HAVE_STRNCASECMP	nbase/nbase_config.h	195;"	d
HAVE_STRNCASECMP	nbase/nbase_winconfig.h	153;"	d
HAVE_STRUCT_IP	nbase/nbase_winconfig.h	151;"	d
HAVE_SYS_IOCTL_H	nsock/include/nsock_config.h	77;"	d
HAVE_SYS_PARAM_H	nbase/nbase_config.h	177;"	d
HAVE_SYS_RESOURCE_H	nbase/nbase_config.h	219;"	d
HAVE_SYS_SELECT_H	nbase/nbase_config.h	179;"	d
HAVE_SYS_SOCKET_H	nbase/nbase_config.h	183;"	d
HAVE_SYS_STAT_H	nbase/nbase_config.h	225;"	d
HAVE_SYS_STAT_H	nbase/nbase_winconfig.h	160;"	d
HAVE_SYS_STAT_H	nbase/nbase_winconfig.h	170;"	d
HAVE_SYS_TIME_H	nbase/nbase_config.h	213;"	d
HAVE_SYS_UN_H	nsock/include/nsock_config.h	80;"	d
HAVE_SYS_WAIT_H	nbase/nbase_config.h	185;"	d
HAVE_UNISTD_H	nbase/nbase_config.h	156;"	d
HAVE_USLEEP	nbase/nbase_config.h	138;"	d
HAVE_VASPRINTF	nbase/nbase_config.h	254;"	d
HAVE_VSNPRINTF	nbase/nbase_config.h	256;"	d
HAVE_VSNPRINTF	nbase/nbase_winconfig.h	191;"	d
HAVE_WSPIAPI_H	nbase/nbase_winconfig.h	181;"	d
HAVE_WSPIAPI_H	nbase/nbase_winconfig.h	183;"	d
HAVE___ATTRIBUTE__	nbase/nbase_config.h	261;"	d
HEAP_COUNT	nsock/tests/ghheaps.c	12;"	d	file:
HEX_START	nbase/nbase_misc.c	734;"	d	file:
HOOKKEY	liblua/ldblib.c	/^static const int HOOKKEY = 0;$/;"	v	file:
Header	liblua/lstrlib.c	/^typedef struct Header {$/;"	s	file:
Header	liblua/lstrlib.c	/^} Header;$/;"	t	typeref:struct:Header	file:
IN6ADDRSZ	nbase/inet_ntop.c	46;"	d	file:
IN6ADDRSZ	nbase/inet_pton.c	47;"	d	file:
INADDRSZ	nbase/inet_pton.c	55;"	d	file:
INCLS	nsock/examples/Makefile	/^INCLS = -I..\/include -I$(NBASEDIR)$/;"	m
INCLS	nsock/src/Makefile	/^INCLS = -I..\/include$/;"	m
INDEXK	liblua/lopcodes.h	140;"	d
INET6_ADDRSTRLEN	nbase/nbase_misc.c	157;"	d	file:
INITIAL_EV_COUNT	nsock/src/engine_epoll.c	73;"	d	file:
INITIAL_EV_COUNT	nsock/src/engine_kqueue.c	75;"	d	file:
INSTALL	nbase/Makefile	/^INSTALL = $(SHTOOL) install $/;"	m
INSTALL	nsock/src/Makefile	/^INSTALL = $(SHTOOL) install$/;"	m
INT16SZ	nbase/inet_ntop.c	50;"	d	file:
INT16SZ	nbase/inet_pton.c	51;"	d	file:
IN_RANGE	nsock/src/nsock_proxy.c	62;"	d	file:
IOD_PROCESSED	nsock/src/nsock_internal.h	265;"	d
IOD_PROPCLR	nsock/src/nsock_internal.h	268;"	d
IOD_PROPGET	nsock/src/nsock_internal.h	269;"	d
IOD_PROPSET	nsock/src/nsock_internal.h	267;"	d
IOD_REGISTERED	nsock/src/nsock_internal.h	264;"	d
IOPREF_LEN	liblua/liolib.c	137;"	d	file:
IO_INPUT	liblua/liolib.c	138;"	d	file:
IO_OUTPUT	liblua/liolib.c	139;"	d	file:
IO_PREFIX	liblua/liolib.c	136;"	d	file:
IPPROTO_SCTP	nsock/src/nsock_internal.h	107;"	d
IS	liblua/luac.c	70;"	d	file:
ISK	liblua/lopcodes.h	137;"	d
IdxT	liblua/ltablib.c	/^typedef unsigned int IdxT;$/;"	t	file:
Instruction	liblua/llimits.h	/^typedef unsigned int Instruction;$/;"	t
Instruction	liblua/llimits.h	/^typedef unsigned long Instruction;$/;"	t
KEY_PCAP	nse_nsock.cc	/^  KEY_PCAP = lua_upvalueindex(6) \/* Keys to pcap sockets *\/$/;"	e	enum:__anon30	file:
KGC_EMERGENCY	liblua/lstate.h	73;"	d
KGC_NORMAL	liblua/lstate.h	72;"	d
KOption	liblua/lstrlib.c	/^typedef enum KOption {$/;"	g	file:
KOption	liblua/lstrlib.c	/^} KOption;$/;"	t	typeref:enum:KOption	file:
Kchar	liblua/lstrlib.c	/^  Kchar,	\/* fixed-length strings *\/$/;"	e	enum:KOption	file:
Kfloat	liblua/lstrlib.c	/^  Kfloat,	\/* floating-point numbers *\/$/;"	e	enum:KOption	file:
Kint	liblua/lstrlib.c	/^  Kint,		\/* signed integers *\/$/;"	e	enum:KOption	file:
Knop	liblua/lstrlib.c	/^  Knop		\/* no-op (configuration or spaces) *\/$/;"	e	enum:KOption	file:
Kpaddalign	liblua/lstrlib.c	/^  Kpaddalign,	\/* padding for alignment *\/$/;"	e	enum:KOption	file:
Kpadding	liblua/lstrlib.c	/^  Kpadding,	\/* padding *\/$/;"	e	enum:KOption	file:
Kstring	liblua/lstrlib.c	/^  Kstring,	\/* strings with prefixed length *\/$/;"	e	enum:KOption	file:
Kuint	liblua/lstrlib.c	/^  Kuint,	\/* unsigned integers *\/$/;"	e	enum:KOption	file:
Kzstr	liblua/lstrlib.c	/^  Kzstr,	\/* zero-terminated strings *\/$/;"	e	enum:KOption	file:
L	liblua/lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer
L	liblua/ldump.c	/^  lua_State *L;$/;"	m	struct:__anon21	file:
L	liblua/llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:LexState::lua_State
L	liblua/lstrlib.c	/^  lua_State *L;$/;"	m	struct:Header	file:
L	liblua/lstrlib.c	/^  lua_State *L;$/;"	m	struct:MatchState	file:
L	liblua/lundump.c	/^  lua_State *L;$/;"	m	struct:__anon24	file:
L	liblua/lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio
LClosure	liblua/lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	liblua/lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LDFLAGS	Makefile	/^LDFLAGS = -lm -lpcap$/;"	m
LDFLAGS	liblua/Makefile	/^LDFLAGS= $(SYSLDFLAGS) $(MYLDFLAGS)$/;"	m
LDFLAGS	nbase/Makefile	/^LDFLAGS =  $(STATIC)$/;"	m
LDFLAGS	nsock/examples/Makefile	/^LDFLAGS =$/;"	m
LDFLAGS	nsock/tests/Makefile	/^LDFLAGS	= -L..\/..\/libpcap  -L..\/..\/nbase$/;"	m
LEVELS1	liblua/lauxlib.c	37;"	d	file:
LEVELS2	liblua/lauxlib.c	38;"	d	file:
LEintfloat	liblua/lvm.c	/^static int LEintfloat (lua_Integer i, lua_Number f) {$/;"	f	file:
LEnum	liblua/lvm.c	/^static int LEnum (const TValue *l, const TValue *r) {$/;"	f	file:
LFIELDS_PER_FLUSH	liblua/lopcodes.h	294;"	d
LG	liblua/lstate.c	/^typedef struct LG {$/;"	s	file:
LG	liblua/lstate.c	/^} LG;$/;"	t	typeref:struct:LG	file:
LHS_assign	liblua/lparser.c	/^struct LHS_assign {$/;"	s	file:
LIBLUA_PATH	Makefile	/^LIBLUA_PATH= .\/liblua$/;"	m
LIBNBASE_PATH	Makefile	/^LIBNBASE_PATH = .\/nbase$/;"	m
LIBNSOCK_PATH	Makefile	/^LIBNSOCK_PATH = .\/nsock$/;"	m
LIBS	Makefile	/^LIBS= $(LUA) $(LIBNSOCK_PATH)\/src\/libnsock.a $(LIBNBASE_PATH)\/libnbase.a$/;"	m
LIBS	liblua/Makefile	/^LIBS= -lm $(SYSLIBS) $(MYLIBS)$/;"	m
LIBS	nbase/Makefile	/^LIBS =   $/;"	m
LIBS	nsock/tests/Makefile	/^LIBS	=  ..\/..\/libpcap\/libpcap.a -ldl $/;"	m
LIB_FAIL	liblua/loadlib.c	224;"	d	file:
LIB_FAIL	liblua/loadlib.c	225;"	d	file:
LIB_FAIL	liblua/loadlib.c	64;"	d	file:
LIB_O	liblua/Makefile	/^LIB_O=	lauxlib.o lbaselib.o lbitlib.o lcorolib.o ldblib.o liolib.o \\$/;"	m
LINE_LEN	nbase/nbase_misc.c	715;"	d	file:
LINUX	nsock/include/nsock_config.h	63;"	d
LIST_COUNT	nsock/tests/ghlists.c	14;"	d	file:
LL	liblua/lobject.c	479;"	d	file:
LStream	liblua/liolib.c	/^typedef luaL_Stream LStream;$/;"	t	file:
LT	nbase/nbase_addrset.c	260;"	d	file:
LTintfloat	liblua/lvm.c	/^static int LTintfloat (lua_Integer i, lua_Number f) {$/;"	f	file:
LTnum	liblua/lvm.c	/^static int LTnum (const TValue *l, const TValue *r) {$/;"	f	file:
LUA	Makefile	/^LUA= $(LIBLUA_PATH)\/liblua.a$/;"	m
LUAC_DATA	liblua/lundump.h	16;"	d
LUAC_FORMAT	liblua/lundump.h	23;"	d
LUAC_INT	liblua/lundump.h	18;"	d
LUAC_NUM	liblua/lundump.h	19;"	d
LUAC_O	liblua/Makefile	/^LUAC_O=	luac.o$/;"	m
LUAC_T	liblua/Makefile	/^LUAC_T=	luac$/;"	m
LUAC_VERSION	liblua/lundump.h	22;"	d
LUAI_BITSINT	liblua/luaconf.h	91;"	d
LUAI_BITSINT	liblua/luaconf.h	94;"	d
LUAI_DDEC	liblua/luaconf.h	285;"	d
LUAI_DDEF	liblua/luaconf.h	286;"	d
LUAI_FUNC	liblua/luaconf.h	280;"	d
LUAI_FUNC	liblua/luaconf.h	282;"	d
LUAI_GCMUL	liblua/lstate.c	36;"	d	file:
LUAI_GCPAUSE	liblua/lstate.c	32;"	d	file:
LUAI_HASHLIMIT	liblua/lstring.c	33;"	d	file:
LUAI_MAXCCALLS	liblua/llimits.h	153;"	d
LUAI_MAXSHORTLEN	liblua/llimits.h	177;"	d
LUAI_MAXSTACK	liblua/luaconf.h	729;"	d
LUAI_MAXSTACK	liblua/luaconf.h	731;"	d
LUAI_THROW	liblua/ldo.c	58;"	d	file:
LUAI_THROW	liblua/ldo.c	66;"	d	file:
LUAI_THROW	liblua/ldo.c	73;"	d	file:
LUAI_TRY	liblua/ldo.c	59;"	d	file:
LUAI_TRY	liblua/ldo.c	67;"	d	file:
LUAI_TRY	liblua/ldo.c	74;"	d	file:
LUAI_UACINT	liblua/luaconf.h	528;"	d
LUAI_UACNUMBER	liblua/luaconf.h	461;"	d
LUAI_UACNUMBER	liblua/luaconf.h	477;"	d
LUAI_UACNUMBER	liblua/luaconf.h	492;"	d
LUALIB_API	liblua/luaconf.h	260;"	d
LUAL_BUFFERSIZE	liblua/luaconf.h	759;"	d
LUAL_BUFFERSIZE	liblua/luaconf.h	761;"	d
LUAL_NUMSIZES	liblua/lauxlib.h	37;"	d
LUAL_PACKPADBYTE	liblua/lstrlib.c	1107;"	d	file:
LUAMOD_API	liblua/luaconf.h	261;"	d
LUA_A	liblua/Makefile	/^LUA_A=	liblua.a$/;"	m
LUA_API	liblua/luaconf.h	247;"	d
LUA_API	liblua/luaconf.h	249;"	d
LUA_API	liblua/luaconf.h	254;"	d
LUA_AUTHORS	liblua/lua.h	27;"	d
LUA_BITLIBNAME	liblua/lualib.h	38;"	d
LUA_C89_NUMBERS	liblua/luaconf.h	81;"	d
LUA_CDIR	liblua/luaconf.h	189;"	d
LUA_CDIR	liblua/luaconf.h	205;"	d
LUA_COLIBNAME	liblua/lualib.h	20;"	d
LUA_COMPAT_APIINTCASTS	liblua/luaconf.h	326;"	d
LUA_COMPAT_APIINTCASTS	liblua/luaconf.h	335;"	d
LUA_COMPAT_BITLIB	liblua/luaconf.h	314;"	d
LUA_COMPAT_IPAIRS	liblua/luaconf.h	319;"	d
LUA_COMPAT_LOADERS	liblua/luaconf.h	347;"	d
LUA_COMPAT_LOADSTRING	liblua/luaconf.h	369;"	d
LUA_COMPAT_LOG10	liblua/luaconf.h	363;"	d
LUA_COMPAT_MATHLIB	liblua/luaconf.h	309;"	d
LUA_COMPAT_MATHLIB	liblua/luaconf.h	334;"	d
LUA_COMPAT_MAXN	liblua/luaconf.h	374;"	d
LUA_COMPAT_MODULE	liblua/luaconf.h	392;"	d
LUA_COMPAT_UNPACK	liblua/luaconf.h	341;"	d
LUA_COPYRIGHT	liblua/lua.h	26;"	d
LUA_CORE	liblua/lapi.c	8;"	d	file:
LUA_CORE	liblua/lcode.c	8;"	d	file:
LUA_CORE	liblua/lctype.c	8;"	d	file:
LUA_CORE	liblua/ldebug.c	8;"	d	file:
LUA_CORE	liblua/ldo.c	8;"	d	file:
LUA_CORE	liblua/ldump.c	8;"	d	file:
LUA_CORE	liblua/lfunc.c	8;"	d	file:
LUA_CORE	liblua/lgc.c	8;"	d	file:
LUA_CORE	liblua/llex.c	8;"	d	file:
LUA_CORE	liblua/lmem.c	8;"	d	file:
LUA_CORE	liblua/lobject.c	8;"	d	file:
LUA_CORE	liblua/lopcodes.c	8;"	d	file:
LUA_CORE	liblua/lparser.c	8;"	d	file:
LUA_CORE	liblua/lstate.c	8;"	d	file:
LUA_CORE	liblua/lstring.c	8;"	d	file:
LUA_CORE	liblua/ltable.c	8;"	d	file:
LUA_CORE	liblua/ltm.c	8;"	d	file:
LUA_CORE	liblua/luac.c	218;"	d	file:
LUA_CORE	liblua/luac.c	8;"	d	file:
LUA_CORE	liblua/lundump.c	8;"	d	file:
LUA_CORE	liblua/lvm.c	8;"	d	file:
LUA_CORE	liblua/lzio.c	8;"	d	file:
LUA_CPATH_DEFAULT	liblua/luaconf.h	196;"	d
LUA_CPATH_DEFAULT	liblua/luaconf.h	210;"	d
LUA_CPATH_VAR	liblua/loadlib.c	268;"	d	file:
LUA_CSUBSEP	liblua/loadlib.c	43;"	d	file:
LUA_DBLIBNAME	liblua/lualib.h	44;"	d
LUA_DIRSEP	liblua/luaconf.h	221;"	d
LUA_DIRSEP	liblua/luaconf.h	223;"	d
LUA_DL_DLL	liblua/luaconf.h	56;"	d
LUA_ENV	liblua/llex.h	18;"	d
LUA_ERRERR	liblua/lua.h	53;"	d
LUA_ERRFILE	liblua/lauxlib.h	20;"	d
LUA_ERRGCMM	liblua/lua.h	52;"	d
LUA_ERRMEM	liblua/lua.h	51;"	d
LUA_ERRRUN	liblua/lua.h	49;"	d
LUA_ERRSYNTAX	liblua/lua.h	50;"	d
LUA_EXEC_DIR	liblua/luaconf.h	170;"	d
LUA_EXTRASPACE	liblua/luaconf.h	740;"	d
LUA_FILEHANDLE	liblua/lauxlib.h	190;"	d
LUA_FLOAT_DOUBLE	liblua/luaconf.h	115;"	d
LUA_FLOAT_FLOAT	liblua/luaconf.h	114;"	d
LUA_FLOAT_LONGDOUBLE	liblua/luaconf.h	116;"	d
LUA_FLOAT_TYPE	liblua/luaconf.h	127;"	d
LUA_FLOAT_TYPE	liblua/luaconf.h	134;"	d
LUA_FLOAT_TYPE	liblua/luaconf.h	147;"	d
LUA_FLOORN2I	liblua/lvm.h	36;"	d
LUA_GCCOLLECT	liblua/lua.h	304;"	d
LUA_GCCOUNT	liblua/lua.h	305;"	d
LUA_GCCOUNTB	liblua/lua.h	306;"	d
LUA_GCISRUNNING	liblua/lua.h	310;"	d
LUA_GCRESTART	liblua/lua.h	303;"	d
LUA_GCSETPAUSE	liblua/lua.h	308;"	d
LUA_GCSETSTEPMUL	liblua/lua.h	309;"	d
LUA_GCSTEP	liblua/lua.h	307;"	d
LUA_GCSTOP	liblua/lua.h	302;"	d
LUA_HOOKCALL	liblua/lua.h	402;"	d
LUA_HOOKCOUNT	liblua/lua.h	405;"	d
LUA_HOOKLINE	liblua/lua.h	404;"	d
LUA_HOOKRET	liblua/lua.h	403;"	d
LUA_HOOKTAILCALL	liblua/lua.h	406;"	d
LUA_IDSIZE	liblua/luaconf.h	748;"	d
LUA_IGMARK	liblua/loadlib.c	32;"	d	file:
LUA_INITVARVERSION	liblua/lua.c	41;"	d	file:
LUA_INIT_VAR	liblua/lua.c	38;"	d	file:
LUA_INTEGER	liblua/luaconf.h	544;"	d
LUA_INTEGER	liblua/luaconf.h	552;"	d
LUA_INTEGER	liblua/luaconf.h	564;"	d
LUA_INTEGER	liblua/luaconf.h	573;"	d
LUA_INTEGER_FMT	liblua/luaconf.h	526;"	d
LUA_INTEGER_FRMLEN	liblua/luaconf.h	545;"	d
LUA_INTEGER_FRMLEN	liblua/luaconf.h	553;"	d
LUA_INTEGER_FRMLEN	liblua/luaconf.h	565;"	d
LUA_INTEGER_FRMLEN	liblua/luaconf.h	574;"	d
LUA_INT_INT	liblua/luaconf.h	109;"	d
LUA_INT_LONG	liblua/luaconf.h	110;"	d
LUA_INT_LONGLONG	liblua/luaconf.h	111;"	d
LUA_INT_TYPE	liblua/luaconf.h	123;"	d
LUA_INT_TYPE	liblua/luaconf.h	125;"	d
LUA_INT_TYPE	liblua/luaconf.h	133;"	d
LUA_INT_TYPE	liblua/luaconf.h	143;"	d
LUA_IOLIBNAME	liblua/lualib.h	26;"	d
LUA_KCONTEXT	liblua/luaconf.h	662;"	d
LUA_KCONTEXT	liblua/luaconf.h	668;"	d
LUA_KCONTEXT	liblua/luaconf.h	669;"	d
LUA_LDIR	liblua/luaconf.h	188;"	d
LUA_LDIR	liblua/luaconf.h	204;"	d
LUA_LIB	liblua/lauxlib.c	8;"	d	file:
LUA_LIB	liblua/lbaselib.c	8;"	d	file:
LUA_LIB	liblua/lbitlib.c	8;"	d	file:
LUA_LIB	liblua/lcorolib.c	8;"	d	file:
LUA_LIB	liblua/ldblib.c	8;"	d	file:
LUA_LIB	liblua/linit.c	9;"	d	file:
LUA_LIB	liblua/liolib.c	8;"	d	file:
LUA_LIB	liblua/lmathlib.c	8;"	d	file:
LUA_LIB	liblua/loadlib.c	12;"	d	file:
LUA_LIB	liblua/loslib.c	8;"	d	file:
LUA_LIB	liblua/lstrlib.c	8;"	d	file:
LUA_LIB	liblua/ltablib.c	8;"	d	file:
LUA_LIB	liblua/lutf8lib.c	8;"	d	file:
LUA_LLE_FLAGS	liblua/loadlib.c	157;"	d	file:
LUA_LOADED_TABLE	liblua/lauxlib.h	24;"	d
LUA_LOADLIBNAME	liblua/lualib.h	47;"	d
LUA_LSUBSEP	liblua/loadlib.c	47;"	d	file:
LUA_MASKCALL	liblua/lua.h	412;"	d
LUA_MASKCOUNT	liblua/lua.h	415;"	d
LUA_MASKLINE	liblua/lua.h	414;"	d
LUA_MASKRET	liblua/lua.h	413;"	d
LUA_MATHLIBNAME	liblua/lualib.h	41;"	d
LUA_MAXCAPTURES	liblua/lstrlib.c	34;"	d	file:
LUA_MAXINPUT	liblua/lua.c	34;"	d	file:
LUA_MAXINTEGER	liblua/luaconf.h	547;"	d
LUA_MAXINTEGER	liblua/luaconf.h	555;"	d
LUA_MAXINTEGER	liblua/luaconf.h	567;"	d
LUA_MAXINTEGER	liblua/luaconf.h	576;"	d
LUA_MINBUFFER	liblua/llimits.h	205;"	d
LUA_MININTEGER	liblua/luaconf.h	548;"	d
LUA_MININTEGER	liblua/luaconf.h	556;"	d
LUA_MININTEGER	liblua/luaconf.h	568;"	d
LUA_MININTEGER	liblua/luaconf.h	577;"	d
LUA_MINSTACK	liblua/lua.h	79;"	d
LUA_MULTRET	liblua/lua.h	34;"	d
LUA_NBITS	liblua/lbitlib.c	28;"	d	file:
LUA_NOREF	liblua/lauxlib.h	77;"	d
LUA_NSOCK_H_	nse_nsock.h	2;"	d
LUA_NSOCK_H_	nse_nsock_tmp.h	2;"	d
LUA_NUMBER	liblua/luaconf.h	457;"	d
LUA_NUMBER	liblua/luaconf.h	473;"	d
LUA_NUMBER	liblua/luaconf.h	488;"	d
LUA_NUMBER_FMT	liblua/luaconf.h	464;"	d
LUA_NUMBER_FMT	liblua/luaconf.h	480;"	d
LUA_NUMBER_FMT	liblua/luaconf.h	495;"	d
LUA_NUMBER_FRMLEN	liblua/luaconf.h	463;"	d
LUA_NUMBER_FRMLEN	liblua/luaconf.h	479;"	d
LUA_NUMBER_FRMLEN	liblua/luaconf.h	494;"	d
LUA_NUMTAGS	liblua/lua.h	74;"	d
LUA_O	liblua/Makefile	/^LUA_O=	lua.o$/;"	m
LUA_OFSEP	liblua/loadlib.c	55;"	d	file:
LUA_OK	liblua/lua.h	47;"	d
LUA_OPADD	liblua/lua.h	196;"	d
LUA_OPBAND	liblua/lua.h	203;"	d
LUA_OPBNOT	liblua/lua.h	209;"	d
LUA_OPBOR	liblua/lua.h	204;"	d
LUA_OPBXOR	liblua/lua.h	205;"	d
LUA_OPDIV	liblua/lua.h	201;"	d
LUA_OPEQ	liblua/lua.h	213;"	d
LUA_OPIDIV	liblua/lua.h	202;"	d
LUA_OPLE	liblua/lua.h	215;"	d
LUA_OPLT	liblua/lua.h	214;"	d
LUA_OPMOD	liblua/lua.h	199;"	d
LUA_OPMUL	liblua/lua.h	198;"	d
LUA_OPPOW	liblua/lua.h	200;"	d
LUA_OPSHL	liblua/lua.h	206;"	d
LUA_OPSHR	liblua/lua.h	207;"	d
LUA_OPSUB	liblua/lua.h	197;"	d
LUA_OPUNM	liblua/lua.h	208;"	d
LUA_OSLIBNAME	liblua/lualib.h	29;"	d
LUA_PATH_DEFAULT	liblua/luaconf.h	191;"	d
LUA_PATH_DEFAULT	liblua/luaconf.h	206;"	d
LUA_PATH_MARK	liblua/luaconf.h	169;"	d
LUA_PATH_SEP	liblua/luaconf.h	168;"	d
LUA_PATH_VAR	liblua/loadlib.c	264;"	d	file:
LUA_POF	liblua/loadlib.c	52;"	d	file:
LUA_PRELOAD_TABLE	liblua/lauxlib.h	28;"	d
LUA_PROGNAME	liblua/lua.c	30;"	d	file:
LUA_PROMPT	liblua/lua.c	25;"	d	file:
LUA_PROMPT2	liblua/lua.c	26;"	d	file:
LUA_QL	liblua/luaconf.h	772;"	d
LUA_QS	liblua/luaconf.h	773;"	d
LUA_REFNIL	liblua/lauxlib.h	78;"	d
LUA_REGISTRYINDEX	liblua/lua.h	42;"	d
LUA_RELEASE	liblua/lua.h	25;"	d
LUA_RIDX_GLOBALS	liblua/lua.h	84;"	d
LUA_RIDX_LAST	liblua/lua.h	85;"	d
LUA_RIDX_MAINTHREAD	liblua/lua.h	83;"	d
LUA_ROOT	liblua/luaconf.h	203;"	d
LUA_SHRDIR	liblua/luaconf.h	190;"	d
LUA_SIGNATURE	liblua/lua.h	31;"	d
LUA_STRFTIMEOPTIONS	liblua/loslib.c	45;"	d	file:
LUA_STRFTIMEOPTIONS	liblua/loslib.c	47;"	d	file:
LUA_STRFTIMEOPTIONS	liblua/loslib.c	49;"	d	file:
LUA_STRLIBNAME	liblua/lualib.h	32;"	d
LUA_T	liblua/Makefile	/^LUA_T=	lua$/;"	m
LUA_TABLIBNAME	liblua/lualib.h	23;"	d
LUA_TBOOLEAN	liblua/lua.h	65;"	d
LUA_TCCL	liblua/lobject.h	49;"	d
LUA_TDEADKEY	liblua/lobject.h	23;"	d
LUA_TFUNCTION	liblua/lua.h	70;"	d
LUA_TLCF	liblua/lobject.h	48;"	d
LUA_TLCL	liblua/lobject.h	47;"	d
LUA_TLIGHTUSERDATA	liblua/lua.h	66;"	d
LUA_TLNGSTR	liblua/lobject.h	54;"	d
LUA_TMPNAMBUFSIZE	liblua/loslib.c	115;"	d	file:
LUA_TMPNAMBUFSIZE	liblua/loslib.c	130;"	d	file:
LUA_TMPNAMTEMPLATE	liblua/loslib.c	118;"	d	file:
LUA_TNIL	liblua/lua.h	64;"	d
LUA_TNONE	liblua/lua.h	62;"	d
LUA_TNUMBER	liblua/lua.h	67;"	d
LUA_TNUMFLT	liblua/lobject.h	58;"	d
LUA_TNUMINT	liblua/lobject.h	59;"	d
LUA_TOTALTAGS	liblua/lobject.h	28;"	d
LUA_TPROTO	liblua/lobject.h	22;"	d
LUA_TSHRSTR	liblua/lobject.h	53;"	d
LUA_TSTRING	liblua/lua.h	68;"	d
LUA_TTABLE	liblua/lua.h	69;"	d
LUA_TTHREAD	liblua/lua.h	72;"	d
LUA_TUSERDATA	liblua/lua.h	71;"	d
LUA_UNSIGNED	liblua/luaconf.h	537;"	d
LUA_USE_C89	liblua/luaconf.h	57;"	d
LUA_USE_CTYPE	liblua/lctype.h	23;"	d
LUA_USE_CTYPE	liblua/lctype.h	26;"	d
LUA_USE_DLOPEN	liblua/luaconf.h	63;"	d
LUA_USE_DLOPEN	liblua/luaconf.h	70;"	d
LUA_USE_POSIX	liblua/luaconf.h	62;"	d
LUA_USE_POSIX	liblua/luaconf.h	69;"	d
LUA_USE_READLINE	liblua/luaconf.h	64;"	d
LUA_USE_READLINE	liblua/luaconf.h	71;"	d
LUA_USE_WINDOWS	liblua/luaconf.h	51;"	d
LUA_UTF8LIBNAME	liblua/lualib.h	35;"	d
LUA_VDIR	liblua/luaconf.h	182;"	d
LUA_VERSION	liblua/lua.h	24;"	d
LUA_VERSION_MAJOR	liblua/lua.h	19;"	d
LUA_VERSION_MINOR	liblua/lua.h	20;"	d
LUA_VERSION_NUM	liblua/lua.h	21;"	d
LUA_VERSION_RELEASE	liblua/lua.h	22;"	d
LUA_VERSUFFIX	liblua/lualib.h	15;"	d
LUA_YIELD	liblua/lua.h	48;"	d
LX	liblua/lstate.c	/^typedef struct LX {$/;"	s	file:
LX	liblua/lstate.c	/^} LX;$/;"	t	typeref:struct:LX	file:
L_ESC	liblua/lstrlib.c	238;"	d	file:
L_MAXDATEFIELD	liblua/loslib.c	236;"	d	file:
L_MAXLENNUM	liblua/liolib.c	385;"	d	file:
L_MAXLENNUM	liblua/lobject.c	248;"	d	file:
L_MODEEXT	liblua/liolib.c	36;"	d	file:
L_NBFD	liblua/lstrlib.c	827;"	d	file:
L_NSE	nse_main.cc	/^static lua_State *L_NSE = NULL;$/;"	v	file:
L_RANDMAX	liblua/lmathlib.c	30;"	d	file:
L_RANDMAX	liblua/lmathlib.c	34;"	d	file:
L_STRFTIMEC89	liblua/loslib.c	34;"	d	file:
L_STRFTIMEC99	liblua/loslib.c	37;"	d	file:
L_STRFTIMEWIN	liblua/loslib.c	41;"	d	file:
L_Umaxalign	liblua/llimits.h	/^typedef LUAI_USER_ALIGNMENT_T L_Umaxalign;$/;"	t
L_Umaxalign	liblua/llimits.h	/^} L_Umaxalign;$/;"	t	typeref:union:__anon13
Labeldesc	liblua/lparser.h	/^typedef struct Labeldesc {$/;"	s
Labeldesc	liblua/lparser.h	/^} Labeldesc;$/;"	t	typeref:struct:Labeldesc
Labellist	liblua/lparser.h	/^typedef struct Labellist {$/;"	s
Labellist	liblua/lparser.h	/^} Labellist;$/;"	t	typeref:struct:Labellist
LexState	liblua/llex.h	/^typedef struct LexState {$/;"	s
LexState	liblua/llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
LoadBlock	liblua/lundump.c	/^static void LoadBlock (LoadState *S, void *b, size_t size) {$/;"	f	file:
LoadByte	liblua/lundump.c	/^static lu_byte LoadByte (LoadState *S) {$/;"	f	file:
LoadCode	liblua/lundump.c	/^static void LoadCode (LoadState *S, Proto *f) {$/;"	f	file:
LoadConstants	liblua/lundump.c	/^static void LoadConstants (LoadState *S, Proto *f) {$/;"	f	file:
LoadDebug	liblua/lundump.c	/^static void LoadDebug (LoadState *S, Proto *f) {$/;"	f	file:
LoadF	liblua/lauxlib.c	/^typedef struct LoadF {$/;"	s	file:
LoadF	liblua/lauxlib.c	/^} LoadF;$/;"	t	typeref:struct:LoadF	file:
LoadFunction	liblua/lundump.c	/^static void LoadFunction (LoadState *S, Proto *f, TString *psource) {$/;"	f	file:
LoadInt	liblua/lundump.c	/^static int LoadInt (LoadState *S) {$/;"	f	file:
LoadInteger	liblua/lundump.c	/^static lua_Integer LoadInteger (LoadState *S) {$/;"	f	file:
LoadNumber	liblua/lundump.c	/^static lua_Number LoadNumber (LoadState *S) {$/;"	f	file:
LoadProtos	liblua/lundump.c	/^static void LoadProtos (LoadState *S, Proto *f) {$/;"	f	file:
LoadS	liblua/lauxlib.c	/^typedef struct LoadS {$/;"	s	file:
LoadS	liblua/lauxlib.c	/^} LoadS;$/;"	t	typeref:struct:LoadS	file:
LoadState	liblua/lundump.c	/^} LoadState;$/;"	t	typeref:struct:__anon24	file:
LoadString	liblua/lundump.c	/^static TString *LoadString (LoadState *S) {$/;"	f	file:
LoadUpvalues	liblua/lundump.c	/^static void LoadUpvalues (LoadState *S, Proto *f) {$/;"	f	file:
LoadVar	liblua/lundump.c	57;"	d	file:
LoadVector	liblua/lundump.c	49;"	d	file:
LocVar	liblua/lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	liblua/lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
LogTable256	nbase/nbase_addrset.c	/^static const char LogTable256[256] = {$/;"	v	file:
MAKEDEPEND	nbase/Makefile	/^MAKEDEPEND = @MAKEDEPEND@$/;"	m
MAKEDEPEND	nsock/src/Makefile	/^MAKEDEPEND = @MAKEDEPEND@$/;"	m
MASK	liblua/lctype.h	46;"	d
MASK0	liblua/lopcodes.h	83;"	d
MASK1	liblua/lopcodes.h	80;"	d
MAX	nbase/nbase.h	246;"	d
MAXABITS	liblua/ltable.c	46;"	d	file:
MAXALIGN	liblua/lstrlib.c	1136;"	d	file:
MAXARGLINE	liblua/liolib.c	337;"	d	file:
MAXARG_A	liblua/lopcodes.h	74;"	d
MAXARG_Ax	liblua/lopcodes.h	68;"	d
MAXARG_Ax	liblua/lopcodes.h	70;"	d
MAXARG_B	liblua/lopcodes.h	75;"	d
MAXARG_Bx	liblua/lopcodes.h	60;"	d
MAXARG_Bx	liblua/lopcodes.h	63;"	d
MAXARG_C	liblua/lopcodes.h	76;"	d
MAXARG_sBx	liblua/lopcodes.h	61;"	d
MAXARG_sBx	liblua/lopcodes.h	64;"	d
MAXASIZE	liblua/ltable.c	47;"	d	file:
MAXBY10	liblua/lobject.c	296;"	d	file:
MAXCCALLS	liblua/lstrlib.c	234;"	d	file:
MAXHBITS	liblua/ltable.c	55;"	d	file:
MAXHOSTNAMELEN	nbase/nbase.h	217;"	d
MAXINDEXRK	liblua/lopcodes.h	143;"	d
MAXINTSIZE	liblua/lstrlib.c	1111;"	d	file:
MAXLASTD	liblua/lobject.c	297;"	d	file:
MAXNUMBER2STR	liblua/lobject.c	365;"	d	file:
MAXPATHLEN	nbase/nbase.h	221;"	d
MAXPATHLEN	nse_main.cc	11;"	d	file:
MAXREGS	liblua/lcode.c	33;"	d	file:
MAXSIGDIG	liblua/lobject.c	187;"	d	file:
MAXSIZE	liblua/lstrlib.c	48;"	d	file:
MAXTAGLOOP	liblua/lvm.c	35;"	d	file:
MAXUNICODE	liblua/lutf8lib.c	23;"	d	file:
MAXUPVAL	liblua/lfunc.h	29;"	d
MAXVARS	liblua/lparser.c	34;"	d	file:
MAX_FORMAT	liblua/lstrlib.c	905;"	d	file:
MAX_INT	liblua/llimits.h	51;"	d
MAX_ITEM	liblua/lstrlib.c	896;"	d	file:
MAX_LMEM	liblua/llimits.h	48;"	d
MAX_LUMEM	liblua/llimits.h	46;"	d
MAX_PARALLELISM	nse_nsock.cc	168;"	d	file:
MAX_SIZE	liblua/llimits.h	42;"	d
MAX_SIZET	liblua/llimits.h	39;"	d
MAX_SIZET	liblua/lstrlib.c	46;"	d	file:
MC	liblua/lstrlib.c	1117;"	d	file:
MEMERRMSG	liblua/lstring.c	25;"	d	file:
MIN	nbase/nbase.h	249;"	d
MINSIZEARRAY	liblua/lmem.c	45;"	d	file:
MINSTRTABSIZE	liblua/llimits.h	188;"	d
MYCFLAGS	liblua/Makefile	/^MYCFLAGS=$/;"	m
MYINT	liblua/lundump.h	21;"	d
MYK	liblua/luac.c	286;"	d	file:
MYLDFLAGS	liblua/Makefile	/^MYLDFLAGS=$/;"	m
MYLIBS	liblua/Makefile	/^MYLIBS=$/;"	m
MYOBJS	liblua/Makefile	/^MYOBJS=$/;"	m
MY_GETOPT_H_INCLUDED	nbase/getopt.h	29;"	d
MatchState	liblua/lstrlib.c	/^typedef struct MatchState {$/;"	s	file:
MatchState	liblua/lstrlib.c	/^} MatchState;$/;"	t	typeref:struct:MatchState	file:
Mbuffer	liblua/lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	liblua/lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
NB	liblua/lstrlib.c	1114;"	d	file:
NBASEDIR	nsock/examples/Makefile	/^NBASEDIR=..\/..\/nbase$/;"	m
NBASEDIR	nsock/src/Makefile	/^NBASEDIR=..\/..\/nbase$/;"	m
NBASEDIR	nsock/tests/Makefile	/^NBASEDIR=..\/..\/nbase$/;"	m
NBASELIB	nsock/examples/Makefile	/^NBASELIB=$(NBASEDIR)\/libnbase.a$/;"	m
NBASELIB	nsock/tests/Makefile	/^NBASELIB=$(NBASEDIR)\/libnbase.a$/;"	m
NBASE_CONFIG_H	nbase/nbase_config.h	136;"	d
NBASE_CRC32CT_H	nbase/nbase_crc32ct.h	133;"	d
NBASE_H	nbase/nbase.h	138;"	d
NBASE_IPV6_H	nbase/nbase_ipv6.h	134;"	d
NBASE_WINCONFIG_H	nbase/nbase_winconfig.h	135;"	d
NBASE_WINUNIX_H	nbase/nbase_winunix.h	133;"	d
NBITS	liblua/lvm.c	588;"	d	file:
NBM	liblua/lvm.c	47;"	d	file:
NDEBUG	nbase/nbase.h	231;"	d
NDEBUG	nsock/include/nsock.h	62;"	d
NETUTILS_H	nsock/src/netutils.h	59;"	d
NILCONSTANT	liblua/lobject.h	120;"	d
NI_DGRAM	nbase/nbase_ipv6.h	241;"	d
NI_NAMEREQD	nbase/nbase_ipv6.h	239;"	d
NI_NOFQDN	nbase/nbase_ipv6.h	237;"	d
NI_NUMERICHOST	nbase/nbase_ipv6.h	238;"	d
NI_NUMERICSERV	nbase/nbase_ipv6.h	240;"	d
NONVALIDVALUE	liblua/lapi.c	40;"	d	file:
NORETURN	nbase/nbase.h	383;"	d
NORETURN	nbase/nbase.h	385;"	d
NORETURN	nbase/nbase.h	387;"	d
NORETURN	nsock/src/error.h	78;"	d
NORETURN	nsock/src/error.h	80;"	d
NORETURN	nsock/src/error.h	82;"	d
NO_JUMP	liblua/lcode.h	20;"	d
NO_REG	liblua/lopcodes.h	153;"	d
NSE_BASE	nse_main.cc	15;"	d	file:
NSE_CURRENT_HOSTS	nse_main.cc	7;"	d	file:
NSE_MAIN	nse_main.cc	8;"	d	file:
NSE_PARALLELISM	nse_main.cc	6;"	d	file:
NSE_STATUS_CANCELLED	nsock/include/nsock.h	/^  NSE_STATUS_CANCELLED, \/* Someone cancelled the event. (by calling nsock_event_cancel()). *\/$/;"	e	enum:nse_status
NSE_STATUS_EOF	nsock/include/nsock.h	/^  NSE_STATUS_EOF,       \/* We got EOF and NO DATA -- if we got data first,$/;"	e	enum:nse_status
NSE_STATUS_ERROR	nsock/include/nsock.h	/^  NSE_STATUS_ERROR,     \/* Uh-oh!  Problem, check the nse_errorcode() *\/$/;"	e	enum:nse_status
NSE_STATUS_KILL	nsock/include/nsock.h	/^  NSE_STATUS_KILL,      \/* The event has been killed, this generally means the$/;"	e	enum:nse_status
NSE_STATUS_NONE	nsock/include/nsock.h	/^  NSE_STATUS_NONE = 0,  \/* User should never see this *\/$/;"	e	enum:nse_status
NSE_STATUS_PROXYERROR	nsock/include/nsock.h	/^  NSE_STATUS_PROXYERROR$/;"	e	enum:nse_status
NSE_STATUS_SUCCESS	nsock/include/nsock.h	/^  NSE_STATUS_SUCCESS,   \/* Everything went A-OK! *\/$/;"	e	enum:nse_status
NSE_STATUS_TIMEOUT	nsock/include/nsock.h	/^  NSE_STATUS_TIMEOUT,   \/* The async call surpassed the timeout you specified *\/$/;"	e	enum:nse_status
NSE_TYPE_CONNECT	nsock/include/nsock.h	/^  NSE_TYPE_CONNECT = 0,$/;"	e	enum:nse_type
NSE_TYPE_CONNECT_SSL	nsock/include/nsock.h	/^  NSE_TYPE_CONNECT_SSL = 1,$/;"	e	enum:nse_type
NSE_TYPE_MAX	nsock/include/nsock.h	/^  NSE_TYPE_MAX = 6,$/;"	e	enum:nse_type
NSE_TYPE_PCAP_READ	nsock/include/nsock.h	/^  NSE_TYPE_PCAP_READ = 5,$/;"	e	enum:nse_type
NSE_TYPE_READ	nsock/include/nsock.h	/^  NSE_TYPE_READ = 2,$/;"	e	enum:nse_type
NSE_TYPE_TIMER	nsock/include/nsock.h	/^  NSE_TYPE_TIMER = 4,$/;"	e	enum:nse_type
NSE_TYPE_WRITE	nsock/include/nsock.h	/^  NSE_TYPE_WRITE = 3,$/;"	e	enum:nse_type
NSE_WAITING_TO_RUNNING	nse_main.cc	16;"	d	file:
NSE_YIELD	nse_main.cc	14;"	d	file:
NSIOD_STATE_CONNECTED_TCP	nsock/src/nsock_internal.h	/^  NSIOD_STATE_CONNECTED_TCP,$/;"	e	enum:iod_state
NSIOD_STATE_CONNECTED_UDP	nsock/src/nsock_internal.h	/^  NSIOD_STATE_CONNECTED_UDP$/;"	e	enum:iod_state
NSIOD_STATE_DELETED	nsock/src/nsock_internal.h	/^  NSIOD_STATE_DELETED,$/;"	e	enum:iod_state
NSIOD_STATE_INITIAL	nsock/src/nsock_internal.h	/^  NSIOD_STATE_INITIAL,$/;"	e	enum:iod_state
NSIOD_STATE_UNKNOWN	nsock/src/nsock_internal.h	/^  NSIOD_STATE_UNKNOWN,$/;"	e	enum:iod_state
NSOCKLIB	nsock/examples/Makefile	/^NSOCKLIB=..\/src\/libnsock.a$/;"	m
NSOCKLIB	nsock/tests/Makefile	/^NSOCKLIB=..\/src\/libnsock.a$/;"	m
NSOCKTESTDIR	nsock/src/Makefile	/^NSOCKTESTDIR=..\/tests$/;"	m
NSOCK_H	nsock/include/nsock.h	59;"	d
NSOCK_INTERNAL_H	nsock/src/nsock_internal.h	60;"	d
NSOCK_LOG_DBG	nsock/include/nsock.h	/^  NSOCK_LOG_DBG,$/;"	e	enum:__anon26
NSOCK_LOG_DBG_ALL	nsock/include/nsock.h	/^  NSOCK_LOG_DBG_ALL,$/;"	e	enum:__anon26
NSOCK_LOG_ERROR	nsock/include/nsock.h	/^  NSOCK_LOG_ERROR,$/;"	e	enum:__anon26
NSOCK_LOG_H	nsock/src/nsock_log.h	59;"	d
NSOCK_LOG_INFO	nsock/include/nsock.h	/^  NSOCK_LOG_INFO,$/;"	e	enum:__anon26
NSOCK_LOG_NONE	nsock/include/nsock.h	/^  NSOCK_LOG_NONE$/;"	e	enum:__anon26
NSOCK_LOG_WRAP	nsock/src/nsock_log.h	67;"	d
NSOCK_LOOP_ERROR	nsock/include/nsock.h	/^  NSOCK_LOOP_ERROR,$/;"	e	enum:nsock_loopstatus
NSOCK_LOOP_NOEVENTS	nsock/include/nsock.h	/^  NSOCK_LOOP_NOEVENTS = 2,$/;"	e	enum:nsock_loopstatus
NSOCK_LOOP_QUIT	nsock/include/nsock.h	/^  NSOCK_LOOP_QUIT$/;"	e	enum:nsock_loopstatus
NSOCK_LOOP_TIMEOUT	nsock/include/nsock.h	/^  NSOCK_LOOP_TIMEOUT,$/;"	e	enum:nsock_loopstatus
NSOCK_PCAP_H	nsock/src/nsock_pcap.h	59;"	d
NSOCK_PENDING_ERROR	nsock/include/nsock.h	/^  NSOCK_PENDING_ERROR,$/;"	e	enum:nsock_del_mode
NSOCK_PENDING_NOTIFY	nsock/include/nsock.h	/^  NSOCK_PENDING_NOTIFY,$/;"	e	enum:nsock_del_mode
NSOCK_PENDING_SILENT	nsock/include/nsock.h	/^  NSOCK_PENDING_SILENT,$/;"	e	enum:nsock_del_mode
NSOCK_POOL	nse_nsock.cc	/^  NSOCK_POOL = lua_upvalueindex(1),$/;"	e	enum:__anon30	file:
NSOCK_POOL	nse_nsock_tmp.cc	/^	NSOCK_POOL = lua_upvalueindex(1),$/;"	e	enum:__anon1	file:
NSOCK_PROXY_H	nsock/src/nsock_proxy.h	58;"	d
NSOCK_READ	nsock/src/nsock_internal.h	/^  NSOCK_READ$/;"	e	enum:nsock_read_types
NSOCK_READBYTES	nsock/src/nsock_internal.h	/^  NSOCK_READBYTES,$/;"	e	enum:nsock_read_types
NSOCK_READLINES	nsock/src/nsock_internal.h	/^  NSOCK_READLINES,$/;"	e	enum:nsock_read_types
NSOCK_READ_CHUNK_SIZE	nsock/include/nsock.h	99;"	d
NSOCK_SOCKET	nse_nsock.cc	/^  NSOCK_SOCKET = lua_upvalueindex(2), \/* nsock socket metatable *\/$/;"	e	enum:__anon30	file:
NSOCK_SOCKET	nse_nsock_tmp.cc	/^	NSOCK_SOCKET = lua_upvalueindex(2)$/;"	e	enum:__anon1	file:
NSOCK_SSL_H	nsock/src/nsock_ssl.h	61;"	d
NSOCK_SSL_MAX_SPEED	nsock/include/nsock.h	248;"	d
NSOCK_UDATA_ENSURE_OPEN	nse_nsock.cc	421;"	d	file:
NSOCK_UDATA_ENSURE_OPEN	nse_nsock_tmp.cc	219;"	d	file:
NSOCK_VERSION	nsock/src/Makefile	/^NSOCK_VERSION = 0.02$/;"	m
NSOCK_WINCONFIG_H	nsock/include/nsock_winconfig.h	60;"	d
NTDDI_VERSION	nbase/nbase_winconfig.h	144;"	d
NTDDI_VERSION	nbase/nbase_winconfig.h	145;"	d
NUM_EVT_TYPES	nsock/src/nsock_iod.c	174;"	d	file:
NUM_OPCODES	liblua/lopcodes.h	237;"	d
NUM_RESERVED	liblua/llex.h	40;"	d
Node	liblua/lobject.h	/^typedef struct Node {$/;"	s
Node	liblua/lobject.h	/^} Node;$/;"	t	typeref:struct:Node
NsockLogLevel	nsock/src/nsock_log.c	/^nsock_loglevel_t    NsockLogLevel = NSOCK_LOG_ERROR;$/;"	v
NsockLogger	nsock/src/nsock_log.c	/^nsock_logger_t      NsockLogger   = nsock_stderr_logger;$/;"	v
OBJ	nsock/tests/Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
OBJS	Makefile	/^OBJS= main.o		\\$/;"	m
OBJS	nbase/Makefile	/^OBJS =  ${LIBOBJDIR}snprintf$U.o ${LIBOBJDIR}nbase_str$U.o ${LIBOBJDIR}nbase_misc$U.o ${LIBOBJDIR}nbase_memalloc$U.o ${LIBOBJDIR}nbase_rnd$U.o ${LIBOBJDIR}nbase_addrset$U.o$/;"	m
OBJS	nsock/src/Makefile	/^OBJS =	error.o filespace.o gh_heap.o nsock_connect.o nsock_core.o \\$/;"	m
OPENSSLLIB	nsock/examples/Makefile	/^OPENSSLLIB=-lssl -lpcap -lcrypto$/;"	m
OPR_ADD	liblua/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_AND	liblua/lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_BAND	liblua/lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BNOT	liblua/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_BOR	liblua/lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BXOR	liblua/lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_CONCAT	liblua/lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_DIV	liblua/lcode.h	/^  OPR_DIV,$/;"	e	enum:BinOpr
OPR_EQ	liblua/lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_GE	liblua/lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	liblua/lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_IDIV	liblua/lcode.h	/^  OPR_IDIV,$/;"	e	enum:BinOpr
OPR_LE	liblua/lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_LEN	liblua/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LT	liblua/lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_MINUS	liblua/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MOD	liblua/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	liblua/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_NE	liblua/lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_NOBINOPR	liblua/lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOT	liblua/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	liblua/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_OR	liblua/lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_POW	liblua/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SHL	liblua/lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SHR	liblua/lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SUB	liblua/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OP_ADD	liblua/lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := RK(B) + RK(C)				*\/$/;"	e	enum:__anon14
OP_BAND	liblua/lopcodes.h	/^OP_BAND,\/*	A B C	R(A) := RK(B) & RK(C)				*\/$/;"	e	enum:__anon14
OP_BNOT	liblua/lopcodes.h	/^OP_BNOT,\/*	A B	R(A) := ~R(B)					*\/$/;"	e	enum:__anon14
OP_BOR	liblua/lopcodes.h	/^OP_BOR,\/*	A B C	R(A) := RK(B) | RK(C)				*\/$/;"	e	enum:__anon14
OP_BXOR	liblua/lopcodes.h	/^OP_BXOR,\/*	A B C	R(A) := RK(B) ~ RK(C)				*\/$/;"	e	enum:__anon14
OP_CALL	liblua/lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon14
OP_CLOSURE	liblua/lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx])			*\/$/;"	e	enum:__anon14
OP_CONCAT	liblua/lopcodes.h	/^OP_CONCAT,\/*	A B C	R(A) := R(B).. ... ..R(C)			*\/$/;"	e	enum:__anon14
OP_DIV	liblua/lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := RK(B) \/ RK(C)				*\/$/;"	e	enum:__anon14
OP_EQ	liblua/lopcodes.h	/^OP_EQ,\/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon14
OP_EXTRAARG	liblua/lopcodes.h	/^OP_EXTRAARG\/*	Ax	extra (larger) argument for previous opcode	*\/$/;"	e	enum:__anon14
OP_FORLOOP	liblua/lopcodes.h	/^OP_FORLOOP,\/*	A sBx	R(A)+=R(A+2);$/;"	e	enum:__anon14
OP_FORPREP	liblua/lopcodes.h	/^OP_FORPREP,\/*	A sBx	R(A)-=R(A+2); pc+=sBx				*\/$/;"	e	enum:__anon14
OP_GETTABLE	liblua/lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[RK(C)]				*\/$/;"	e	enum:__anon14
OP_GETTABUP	liblua/lopcodes.h	/^OP_GETTABUP,\/*	A B C	R(A) := UpValue[B][RK(C)]			*\/$/;"	e	enum:__anon14
OP_GETUPVAL	liblua/lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon14
OP_IDIV	liblua/lopcodes.h	/^OP_IDIV,\/*	A B C	R(A) := RK(B) \/\/ RK(C)				*\/$/;"	e	enum:__anon14
OP_JMP	liblua/lopcodes.h	/^OP_JMP,\/*	A sBx	pc+=sBx; if (A) close all upvalues >= R(A - 1)	*\/$/;"	e	enum:__anon14
OP_LE	liblua/lopcodes.h	/^OP_LE,\/*	A B C	if ((RK(B) <= RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon14
OP_LEN	liblua/lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon14
OP_LOADBOOL	liblua/lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon14
OP_LOADK	liblua/lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := Kst(Bx)					*\/$/;"	e	enum:__anon14
OP_LOADKX	liblua/lopcodes.h	/^OP_LOADKX,\/*	A 	R(A) := Kst(extra arg)				*\/$/;"	e	enum:__anon14
OP_LOADNIL	liblua/lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A), R(A+1), ..., R(A+B) := nil		*\/$/;"	e	enum:__anon14
OP_LT	liblua/lopcodes.h	/^OP_LT,\/*	A B C	if ((RK(B) <  RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon14
OP_MOD	liblua/lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := RK(B) % RK(C)				*\/$/;"	e	enum:__anon14
OP_MOVE	liblua/lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon14
OP_MUL	liblua/lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := RK(B) * RK(C)				*\/$/;"	e	enum:__anon14
OP_NEWTABLE	liblua/lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon14
OP_NOT	liblua/lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon14
OP_POW	liblua/lopcodes.h	/^OP_POW,\/*	A B C	R(A) := RK(B) ^ RK(C)				*\/$/;"	e	enum:__anon14
OP_RETURN	liblua/lopcodes.h	/^OP_RETURN,\/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon14
OP_SELF	liblua/lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*\/$/;"	e	enum:__anon14
OP_SETLIST	liblua/lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon14
OP_SETTABLE	liblua/lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[RK(B)] := RK(C)				*\/$/;"	e	enum:__anon14
OP_SETTABUP	liblua/lopcodes.h	/^OP_SETTABUP,\/*	A B C	UpValue[A][RK(B)] := RK(C)			*\/$/;"	e	enum:__anon14
OP_SETUPVAL	liblua/lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon14
OP_SHL	liblua/lopcodes.h	/^OP_SHL,\/*	A B C	R(A) := RK(B) << RK(C)				*\/$/;"	e	enum:__anon14
OP_SHR	liblua/lopcodes.h	/^OP_SHR,\/*	A B C	R(A) := RK(B) >> RK(C)				*\/$/;"	e	enum:__anon14
OP_SUB	liblua/lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := RK(B) - RK(C)				*\/$/;"	e	enum:__anon14
OP_TAILCALL	liblua/lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon14
OP_TEST	liblua/lopcodes.h	/^OP_TEST,\/*	A C	if not (R(A) <=> C) then pc++			*\/$/;"	e	enum:__anon14
OP_TESTSET	liblua/lopcodes.h	/^OP_TESTSET,\/*	A B C	if (R(B) <=> C) then R(A) := R(B) else pc++	*\/$/;"	e	enum:__anon14
OP_TFORCALL	liblua/lopcodes.h	/^OP_TFORCALL,\/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));	*\/$/;"	e	enum:__anon14
OP_TFORLOOP	liblua/lopcodes.h	/^OP_TFORLOOP,\/*	A sBx	if R(A+1) ~= nil then { R(A)=R(A+1); pc += sBx }*\/$/;"	e	enum:__anon14
OP_UNM	liblua/lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon14
OP_VARARG	liblua/lopcodes.h	/^OP_VARARG,\/*	A B	R(A), R(A+1), ..., R(A+B-2) = vararg		*\/$/;"	e	enum:__anon14
OUTPUT	liblua/luac.c	29;"	d	file:
OpArgK	liblua/lopcodes.h	/^  OpArgK   \/* argument is a constant or register\/constant *\/$/;"	e	enum:OpArgMask
OpArgMask	liblua/lopcodes.h	/^enum OpArgMask {$/;"	g
OpArgN	liblua/lopcodes.h	/^  OpArgN,  \/* argument is not used *\/$/;"	e	enum:OpArgMask
OpArgR	liblua/lopcodes.h	/^  OpArgR,  \/* argument is a register or a jump offset *\/$/;"	e	enum:OpArgMask
OpArgU	liblua/lopcodes.h	/^  OpArgU,  \/* argument is used *\/$/;"	e	enum:OpArgMask
OpCode	liblua/lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon14
OpMode	liblua/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	g
Ops	util.cc	/^Ops::Ops():scripts(0)$/;"	f	class:Ops
Ops	util.h	/^class Ops{$/;"	c
Output	liblua/luac.c	/^static char Output[]={ OUTPUT };	\/* default output file name *\/$/;"	v	file:
PARSE_INT_FORMAT	nbase/snprintf.c	294;"	d	file:
PAUSEADJ	liblua/lgc.c	59;"	d	file:
PCAPBASEDIR	nsock/examples/Makefile	/^PCAPBASEDIR=..\/..\/libpcap$/;"	m
PCAPLIB	nsock/examples/Makefile	/^PCAPLIB=$(PCAPBASEDIR)\/libpcap.a$/;"	m
PCAP_BSD_SELECT_HACK	nsock/src/nsock_pcap.h	122;"	d
PCAP_CAN_DO_SELECT	nsock/src/nsock_pcap.h	90;"	d
PCAP_FAILURE_EXPL_MESSAGE	nsock/src/nsock_pcap.c	91;"	d	file:
PCAP_NETMASK_UNKNOWN	nsock/src/nsock_pcap.c	86;"	d	file:
PCAP_OPEN_MAX_RETRIES	nsock/src/nsock_pcap.c	89;"	d	file:
PCAP_POLL_INTERVAL	nsock/src/nsock_pcap.h	101;"	d
PCAP_RECV_TIMEVAL_VALID	nsock/src/nsock_pcap.h	129;"	d
PCAP_SOCKET	nse_nsock.cc	/^  PCAP_SOCKET = lua_upvalueindex(3), \/* pcap socket metatable *\/$/;"	e	enum:__anon30	file:
PEER_STR_LEN	nsock/src/netutils.c	141;"	d	file:
PEER_STR_LEN	nsock/src/netutils.c	143;"	d	file:
PF_INET6	nbase/nbase_ipv6.h	157;"	d
PI	liblua/lmathlib.c	22;"	d	file:
PI	liblua/lmathlib.c	23;"	d	file:
PLAT	liblua/Makefile	/^PLAT= none$/;"	m
PLATS	liblua/Makefile	/^PLATS= aix bsd c89 freebsd generic linux macosx mingw posix solaris$/;"	m
POLLFD	nsock/src/engine_poll.c	89;"	d	file:
POLLFD	nsock/src/engine_poll.c	92;"	d	file:
POLL_R_FLAGS	nsock/src/engine_poll.c	96;"	d	file:
POLL_R_FLAGS	nsock/src/engine_poll.c	98;"	d	file:
POLL_W_FLAGS	nsock/src/engine_poll.c	101;"	d	file:
POLL_X_FLAGS	nsock/src/engine_poll.c	103;"	d	file:
POLL_X_FLAGS	nsock/src/engine_poll.c	106;"	d	file:
PORT_TCP	nsock/tests/test-common.h	20;"	d
PORT_TCPSSL	nsock/tests/test-common.h	21;"	d
PORT_UDP	nsock/tests/test-common.h	19;"	d
POS	liblua/lobject.c	483;"	d	file:
POS_A	liblua/lopcodes.h	47;"	d
POS_Ax	liblua/lopcodes.h	51;"	d
POS_B	liblua/lopcodes.h	49;"	d
POS_Bx	liblua/lopcodes.h	50;"	d
POS_C	liblua/lopcodes.h	48;"	d
POS_OP	liblua/lopcodes.h	46;"	d
PRE	liblua/lobject.c	482;"	d	file:
PRINTBIT	liblua/lctype.h	41;"	d
PROGNAME	liblua/luac.c	28;"	d	file:
PROXY_STATE_HTTP_TCP_CONNECTED	nsock/src/nsock_proxy.h	/^  PROXY_STATE_HTTP_TCP_CONNECTED,$/;"	e	enum:nsock_proxy_state
PROXY_STATE_HTTP_TUNNEL_ESTABLISHED	nsock/src/nsock_proxy.h	/^  PROXY_STATE_HTTP_TUNNEL_ESTABLISHED,$/;"	e	enum:nsock_proxy_state
PROXY_STATE_INITIAL	nsock/src/nsock_proxy.h	/^  PROXY_STATE_INITIAL,$/;"	e	enum:nsock_proxy_state
PROXY_STATE_SOCKS4_TCP_CONNECTED	nsock/src/nsock_proxy.h	/^  PROXY_STATE_SOCKS4_TCP_CONNECTED,$/;"	e	enum:nsock_proxy_state
PROXY_STATE_SOCKS4_TUNNEL_ESTABLISHED	nsock/src/nsock_proxy.h	/^  PROXY_STATE_SOCKS4_TUNNEL_ESTABLISHED,$/;"	e	enum:nsock_proxy_state
PROXY_TYPE_COUNT	nsock/src/nsock_proxy.h	/^  PROXY_TYPE_COUNT,$/;"	e	enum:nsock_proxy_type
PROXY_TYPE_HTTP	nsock/src/nsock_proxy.h	/^  PROXY_TYPE_HTTP = 0,$/;"	e	enum:nsock_proxy_type
PROXY_TYPE_SOCKS4	nsock/src/nsock_proxy.h	/^  PROXY_TYPE_SOCKS4,$/;"	e	enum:nsock_proxy_type
Pfunc	liblua/ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t
Poll	nsock/src/engine_poll.c	88;"	d	file:
Poll	nsock/src/engine_poll.c	91;"	d	file:
PrintCode	liblua/luac.c	/^static void PrintCode(const Proto* f)$/;"	f	file:
PrintConstant	liblua/luac.c	/^static void PrintConstant(const Proto* f, int i)$/;"	f	file:
PrintDebug	liblua/luac.c	/^static void PrintDebug(const Proto* f)$/;"	f	file:
PrintFunction	liblua/luac.c	/^static void PrintFunction(const Proto* f, int full)$/;"	f	file:
PrintHeader	liblua/luac.c	/^static void PrintHeader(const Proto* f)$/;"	f	file:
PrintString	liblua/luac.c	/^static void PrintString(const TString* ts)$/;"	f	file:
Protect	liblua/lvm.c	747;"	d	file:
Proto	liblua/lobject.h	/^typedef struct Proto {$/;"	s
Proto	liblua/lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
ProxyBackends	nsock/src/nsock_proxy.c	/^static const struct proxy_spec *ProxyBackends[] = {$/;"	v	typeref:struct:proxy_spec	file:
ProxyOpsHttp	nsock/src/proxy_http.c	/^static const struct proxy_op ProxyOpsHttp = {$/;"	v	typeref:struct:proxy_op	file:
ProxyOpsSocks4	nsock/src/proxy_socks4.c	/^static const struct proxy_op ProxyOpsSocks4 = {$/;"	v	typeref:struct:proxy_op	file:
ProxySpecHttp	nsock/src/proxy_http.c	/^const struct proxy_spec ProxySpecHttp = {$/;"	v	typeref:struct:proxy_spec
ProxySpecSocks4	nsock/src/proxy_socks4.c	/^const struct proxy_spec ProxySpecSocks4 = {$/;"	v	typeref:struct:proxy_spec
RA	liblua/lvm.c	728;"	d	file:
RANLIB	liblua/Makefile	/^RANLIB= ranlib$/;"	m
RANLIB	nbase/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	nsock/src/Makefile	/^RANLIB = ranlib$/;"	m
RANLIMIT	liblua/ltablib.c	274;"	d	file:
RB	liblua/lvm.c	729;"	d	file:
RC	liblua/lvm.c	730;"	d	file:
READ_BUFFER_SZ	nsock/src/nsock_internal.h	112;"	d
RESERVED	liblua/llex.h	/^enum RESERVED {$/;"	g
RESERVEDSLOT	liblua/lbaselib.c	308;"	d	file:
RESET	nsock/tests/tests_main.c	12;"	d	file:
RETS	liblua/lobject.c	481;"	d	file:
RKASK	liblua/lopcodes.h	147;"	d
RKB	liblua/lvm.c	731;"	d	file:
RKC	liblua/lvm.c	733;"	d	file:
RM	liblua/Makefile	/^RM= rm -f$/;"	m
RM	nsock/examples/Makefile	/^RM = rm -f$/;"	m
RN	liblua/liolib.c	/^} RN;$/;"	t	typeref:struct:__anon20	file:
RPMTDIR	nsock/src/Makefile	/^RPMTDIR=$(HOME)\/rpmdir$/;"	m
R_OK	nbase/nbase.h	345;"	d
S	liblua/luac.c	394;"	d	file:
SAIYN_DO	nsock/examples/nsock_telnet.c	85;"	d	file:
SAIYN_GA	nsock/examples/nsock_telnet.c	83;"	d	file:
SAIYN_IAC	nsock/examples/nsock_telnet.c	86;"	d	file:
SAIYN_TELOPT_SGA	nsock/examples/nsock_telnet.c	79;"	d	file:
SAIYN_TELOPT_STATUS	nsock/examples/nsock_telnet.c	80;"	d	file:
SAIYN_WILL	nsock/examples/nsock_telnet.c	84;"	d	file:
SETARG_A	liblua/lopcodes.h	98;"	d
SETARG_Ax	liblua/lopcodes.h	110;"	d
SETARG_B	liblua/lopcodes.h	101;"	d
SETARG_Bx	liblua/lopcodes.h	107;"	d
SETARG_C	liblua/lopcodes.h	104;"	d
SETARG_sBx	liblua/lopcodes.h	113;"	d
SET_OPCODE	liblua/lopcodes.h	90;"	d
SHTOOL	nbase/Makefile	/^SHTOOL = .\/shtool$/;"	m
SHTOOL	nsock/src/Makefile	/^SHTOOL = .\/shtool$/;"	m
SIOCGIFCONF	nbase/nbase_winunix.h	197;"	d
SIZELENMOD	liblua/lstrlib.c	818;"	d	file:
SIZETIMEFMT	liblua/loslib.c	280;"	d	file:
SIZE_A	liblua/lopcodes.h	41;"	d
SIZE_Ax	liblua/lopcodes.h	42;"	d
SIZE_B	liblua/lopcodes.h	39;"	d
SIZE_Bx	liblua/lopcodes.h	40;"	d
SIZE_C	liblua/lopcodes.h	38;"	d
SIZE_OP	liblua/lopcodes.h	44;"	d
SPACEBIT	liblua/lctype.h	42;"	d
SPACECHARS	liblua/lbaselib.c	46;"	d	file:
SPECIALS	liblua/lstrlib.c	239;"	d	file:
SParser	liblua/ldo.c	/^struct SParser {  \/* data to 'f_parser' *\/$/;"	s	file:
SRC	nsock/tests/Makefile	/^SRC = tests_main.c \\$/;"	m
SRCS	nsock/src/Makefile	/^SRCS = 	error.c filespace.c gh_heap.c nsock_connect.c nsock_core.c \\$/;"	m
SS	liblua/luac.c	393;"	d	file:
STATIC	nbase/Makefile	/^STATIC = $/;"	m
STATIC	nsock/src/Makefile	/^STATIC =$/;"	m
STDC_HEADERS	nbase/nbase_config.h	148;"	d
STDC_HEADERS	nbase/nbase_winconfig.h	155;"	d
STDERR_FILENO	nbase/nbase.h	583;"	d
STDIN_FILENO	nbase/nbase.h	575;"	d
STDOUT_FILENO	nbase/nbase.h	579;"	d
STEPMULADJ	liblua/lgc.c	52;"	d	file:
STRCACHE_M	liblua/llimits.h	199;"	d
STRCACHE_N	liblua/llimits.h	198;"	d
SUN_LEN	nsock/include/nsock.h	86;"	d
SYSCFLAGS	liblua/Makefile	/^SYSCFLAGS=$/;"	m
SYSLDFLAGS	liblua/Makefile	/^SYSLDFLAGS=$/;"	m
SYSLIBS	liblua/Makefile	/^SYSLIBS=$/;"	m
SZINT	liblua/lstrlib.c	1120;"	d	file:
S_ISDIR	nbase/nbase.h	334;"	d
Script.new	nselib/nse_main.lua	/^function Script.new(nse)$/;"	f
Script:new_thread	nselib/nse_main.lua	/^function Script:new_thread()$/;"	f
SemInfo	liblua/llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon19
Snprintf	nbase/nbase_str.c	/^int Snprintf(char *s, size_t n, const char *fmt, ...) {$/;"	f
StkId	liblua/lobject.h	/^typedef TValue *StkId;  \/* index to stack elements *\/$/;"	t
Strncpy	nbase/nbase_str.c	/^int Strncpy(char *dest, const char *src, size_t n) {$/;"	f
TAB_L	liblua/ltablib.c	29;"	d	file:
TAB_R	liblua/ltablib.c	27;"	d	file:
TAB_RW	liblua/ltablib.c	30;"	d	file:
TAB_W	liblua/ltablib.c	28;"	d	file:
TARGET	Makefile	/^TARGET= saiyn$/;"	m
TARGET	nbase/Makefile	/^TARGET = libnbase.a$/;"	m
TARGET	nsock/src/Makefile	/^TARGET = libnsock.a$/;"	m
TARGETS	nsock/examples/Makefile	/^TARGETS = nsock_test_timers nsock_telnet$/;"	m
TESTS	nbase/test/test-escape_windows_command_arg.c	/^const char *TESTS[][5] = {$/;"	v
TEST_FAILED	nsock/tests/tests_main.c	15;"	d	file:
TEST_FAILED	nsock/tests/tests_main.c	19;"	d	file:
TEST_OK	nsock/tests/tests_main.c	16;"	d	file:
TEST_OK	nsock/tests/tests_main.c	20;"	d	file:
THREAD_I	nse_nsock.cc	43;"	d	file:
THREAD_I	nse_nsock_tmp.cc	13;"	d	file:
THREAD_SOCKETS	nse_nsock.cc	/^  THREAD_SOCKETS = lua_upvalueindex(4), \/* <Thread, Table of Sockets (keys)> *\/$/;"	e	enum:__anon30	file:
TIMERS_BUFFLEN	nsock/tests/timer.c	9;"	d	file:
TIMEVAL_ADD	nbase/nbase.h	266;"	d
TIMEVAL_AFTER	nbase/nbase.h	272;"	d
TIMEVAL_BEFORE	nbase/nbase.h	271;"	d
TIMEVAL_FSEC_SUBTRACT	nbase/nbase.h	262;"	d
TIMEVAL_MSEC_ADD	nbase/nbase.h	265;"	d
TIMEVAL_MSEC_SUBTRACT	nbase/nbase.h	258;"	d
TIMEVAL_SECS	nbase/nbase.h	275;"	d
TIMEVAL_SEC_SUBTRACT	nbase/nbase.h	260;"	d
TIMEVAL_SUBTRACT	nbase/nbase.h	256;"	d
TK_AND	liblua/llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	liblua/llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_CONCAT	liblua/llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_DBCOLON	liblua/llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_DO	liblua/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DOTS	liblua/llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_ELSE	liblua/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	liblua/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	liblua/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_EOS	liblua/llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_EQ	liblua/llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_FALSE	liblua/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FLT	liblua/llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_FOR	liblua/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	liblua/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_GE	liblua/llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_GOTO	liblua/llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IDIV	liblua/llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_IF	liblua/llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	liblua/llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_INT	liblua/llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_LE	liblua/llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_LOCAL	liblua/llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NAME	liblua/llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_NE	liblua/llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_NIL	liblua/llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	liblua/llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_OR	liblua/llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	liblua/llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_RETURN	liblua/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_SHL	liblua/llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_SHR	liblua/llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_STRING	liblua/llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_THEN	liblua/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	liblua/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	liblua/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	liblua/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TKey	liblua/lobject.h	/^typedef union TKey {$/;"	u
TKey	liblua/lobject.h	/^} TKey;$/;"	t	typeref:union:TKey
TMS	liblua/ltm.h	/^} TMS;$/;"	t	typeref:enum:__anon25
TM_ADD	liblua/ltm.h	/^  TM_ADD,$/;"	e	enum:__anon25
TM_BAND	liblua/ltm.h	/^  TM_BAND,$/;"	e	enum:__anon25
TM_BNOT	liblua/ltm.h	/^  TM_BNOT,$/;"	e	enum:__anon25
TM_BOR	liblua/ltm.h	/^  TM_BOR,$/;"	e	enum:__anon25
TM_BXOR	liblua/ltm.h	/^  TM_BXOR,$/;"	e	enum:__anon25
TM_CALL	liblua/ltm.h	/^  TM_CALL,$/;"	e	enum:__anon25
TM_CONCAT	liblua/ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anon25
TM_DIV	liblua/ltm.h	/^  TM_DIV,$/;"	e	enum:__anon25
TM_EQ	liblua/ltm.h	/^  TM_EQ,  \/* last tag method with fast access *\/$/;"	e	enum:__anon25
TM_GC	liblua/ltm.h	/^  TM_GC,$/;"	e	enum:__anon25
TM_IDIV	liblua/ltm.h	/^  TM_IDIV,$/;"	e	enum:__anon25
TM_INDEX	liblua/ltm.h	/^  TM_INDEX,$/;"	e	enum:__anon25
TM_LE	liblua/ltm.h	/^  TM_LE,$/;"	e	enum:__anon25
TM_LEN	liblua/ltm.h	/^  TM_LEN,$/;"	e	enum:__anon25
TM_LT	liblua/ltm.h	/^  TM_LT,$/;"	e	enum:__anon25
TM_MOD	liblua/ltm.h	/^  TM_MOD,$/;"	e	enum:__anon25
TM_MODE	liblua/ltm.h	/^  TM_MODE,$/;"	e	enum:__anon25
TM_MUL	liblua/ltm.h	/^  TM_MUL,$/;"	e	enum:__anon25
TM_N	liblua/ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anon25
TM_NEWINDEX	liblua/ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anon25
TM_POW	liblua/ltm.h	/^  TM_POW,$/;"	e	enum:__anon25
TM_SHL	liblua/ltm.h	/^  TM_SHL,$/;"	e	enum:__anon25
TM_SHR	liblua/ltm.h	/^  TM_SHR,$/;"	e	enum:__anon25
TM_SUB	liblua/ltm.h	/^  TM_SUB,$/;"	e	enum:__anon25
TM_UNM	liblua/ltm.h	/^  TM_UNM,$/;"	e	enum:__anon25
TO	nse_nsock.cc	295;"	d	file:
TO	nse_nsock_tmp.cc	17;"	d	file:
TRIE_NODE_TRUE	nbase/nbase_addrset.c	/^static struct trie_node *TRIE_NODE_TRUE = NULL;$/;"	v	typeref:struct:trie_node	file:
TString	liblua/lobject.h	/^typedef struct TString {$/;"	s
TString	liblua/lobject.h	/^} TString;$/;"	t	typeref:struct:TString
TValue	liblua/lobject.h	/^} TValue;$/;"	t	typeref:struct:lua_TValue
TValuefields	liblua/lobject.h	/^    TValuefields;$/;"	m	struct:TKey::__anon23
TValuefields	liblua/lobject.h	/^  TValuefields;$/;"	m	struct:lua_TValue
TValuefields	liblua/lobject.h	110;"	d
TYPE_CODE_NUM_BITS	nsock/include/nsock.h	314;"	d
Table	liblua/lobject.h	/^typedef struct Table {$/;"	s
Table	liblua/lobject.h	/^} Table;$/;"	t	typeref:struct:Table
Target	Target.cc	/^Target::Target()$/;"	f	class:Target
Target	Target.h	/^class Target {$/;"	c
TargetName	Target.h	/^	const char *TargetName() const {return targetname;}$/;"	f	class:Target
TestCancelSSL	nsock/tests/cancel.c	/^const struct test_case TestCancelSSL = {$/;"	v	typeref:struct:test_case
TestCancelTCP	nsock/tests/cancel.c	/^const struct test_case TestCancelTCP = {$/;"	v	typeref:struct:test_case
TestCancelUDP	nsock/tests/cancel.c	/^const struct test_case TestCancelUDP = {$/;"	v	typeref:struct:test_case
TestCases	nsock/tests/tests_main.c	/^static const struct test_case *TestCases[] = {$/;"	v	typeref:struct:test_case	file:
TestConnectFailure	nsock/tests/connect.c	/^const struct test_case TestConnectFailure = {$/;"	v	typeref:struct:test_case
TestConnectTCP	nsock/tests/connect.c	/^const struct test_case TestConnectTCP = {$/;"	v	typeref:struct:test_case
TestErrLevels	nsock/tests/logs.c	/^const struct test_case TestErrLevels = {$/;"	v	typeref:struct:test_case
TestGHHeaps	nsock/tests/ghheaps.c	/^const struct test_case TestGHHeaps = {$/;"	v	typeref:struct:test_case
TestGHLists	nsock/tests/ghlists.c	/^const struct test_case TestGHLists = {$/;"	v	typeref:struct:test_case
TestHeapOrdering	nsock/tests/ghheaps.c	/^const struct test_case TestHeapOrdering = {$/;"	v	typeref:struct:test_case
TestLogLevels	nsock/tests/logs.c	/^const struct test_case TestLogLevels = {$/;"	v	typeref:struct:test_case
TestPoolUserData	nsock/tests/basic.c	/^const struct test_case TestPoolUserData = {$/;"	v	typeref:struct:test_case
TestTimer	nsock/tests/timer.c	/^const struct test_case TestTimer = {$/;"	v	typeref:struct:test_case
Thread:__index	nselib/nse_main.lua	/^function Thread:__index(key)$/;"	f
Thread:resume	nselib/nse_main.lua	/^function Thread:resume()$/;"	f
Token	liblua/llex.h	/^typedef struct Token {$/;"	s
Token	liblua/llex.h	/^} Token;$/;"	t	typeref:struct:Token
UBox	liblua/lauxlib.c	/^typedef struct UBox {$/;"	s	file:
UBox	liblua/lauxlib.c	/^} UBox;$/;"	t	typeref:struct:UBox	file:
UNARY_PRIORITY	liblua/lparser.c	1041;"	d	file:
UNUSED	liblua/llimits.h	106;"	d
UPVALNAME	liblua/luac.c	285;"	d	file:
UTF8BUFFSZ	liblua/lobject.h	531;"	d
UTF8PATT	liblua/lutf8lib.c	235;"	d	file:
UTString	liblua/lobject.h	/^typedef union UTString {$/;"	u
UTString	liblua/lobject.h	/^} UTString;$/;"	t	typeref:union:UTString
UUdata	liblua/lobject.h	/^typedef union UUdata {$/;"	u
UUdata	liblua/lobject.h	/^} UUdata;$/;"	t	typeref:union:UUdata
Udata	liblua/lobject.h	/^typedef struct Udata {$/;"	s
Udata	liblua/lobject.h	/^} Udata;$/;"	t	typeref:struct:Udata
UnOpr	liblua/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	liblua/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
UpVal	liblua/lfunc.h	/^struct UpVal {$/;"	s
UpVal	liblua/lobject.h	/^typedef struct UpVal UpVal;$/;"	t	typeref:struct:UpVal
Upvaldesc	liblua/lobject.h	/^typedef struct Upvaldesc {$/;"	s
Upvaldesc	liblua/lobject.h	/^} Upvaldesc;$/;"	t	typeref:struct:Upvaldesc
VCALL	liblua/lparser.h	/^  VCALL,  \/* expression is a function call; info = instruction pc *\/$/;"	e	enum:__anon15
VFALSE	liblua/lparser.h	/^  VFALSE,  \/* constant false *\/$/;"	e	enum:__anon15
VINDEXED	liblua/lparser.h	/^  VINDEXED,  \/* indexed variable;$/;"	e	enum:__anon15
VJMP	liblua/lparser.h	/^  VJMP,  \/* expression is a test\/comparison;$/;"	e	enum:__anon15
VK	liblua/lparser.h	/^  VK,  \/* constant in 'k'; info = index of constant in 'k' *\/$/;"	e	enum:__anon15
VKFLT	liblua/lparser.h	/^  VKFLT,  \/* floating constant; nval = numerical float value *\/$/;"	e	enum:__anon15
VKINT	liblua/lparser.h	/^  VKINT,  \/* integer constant; nval = numerical integer value *\/$/;"	e	enum:__anon15
VLOCAL	liblua/lparser.h	/^  VLOCAL,  \/* local variable; info = local register *\/$/;"	e	enum:__anon15
VNIL	liblua/lparser.h	/^  VNIL,  \/* constant nil *\/$/;"	e	enum:__anon15
VNONRELOC	liblua/lparser.h	/^  VNONRELOC,  \/* expression has its value in a fixed register;$/;"	e	enum:__anon15
VOID	liblua/luac.c	224;"	d	file:
VRELOCABLE	liblua/lparser.h	/^  VRELOCABLE,  \/* expression can put result in any register;$/;"	e	enum:__anon15
VTRUE	liblua/lparser.h	/^  VTRUE,  \/* constant true *\/$/;"	e	enum:__anon15
VUPVAL	liblua/lparser.h	/^  VUPVAL,  \/* upvalue variable; info = index of upvalue in 'upvalues' *\/$/;"	e	enum:__anon15
VVARARG	liblua/lparser.h	/^  VVARARG  \/* vararg expression; info = instruction pc *\/$/;"	e	enum:__anon15
VVOID	liblua/lparser.h	/^  VVOID,  \/* when 'expdesc' describes the last expression a list,$/;"	e	enum:__anon15
Value	liblua/lobject.h	/^typedef union Value {$/;"	u
Value	liblua/lobject.h	/^} Value;$/;"	t	typeref:union:Value
Vardesc	liblua/lparser.h	/^typedef struct Vardesc {$/;"	s
Vardesc	liblua/lparser.h	/^} Vardesc;$/;"	t	typeref:struct:Vardesc
Vsnprintf	nbase/nbase_str.c	/^int Vsnprintf(char *s, size_t n, const char *fmt, va_list ap) {$/;"	f
WHITE0BIT	liblua/lgc.h	78;"	d
WHITE1BIT	liblua/lgc.h	79;"	d
WHITEBITS	liblua/lgc.h	84;"	d
WIN32_LEAN_AND_MEAN	nbase/nbase.h	330;"	d
WIN32_LEAN_AND_MEAN	nbase/nbase_winunix.h	173;"	d
W_OK	nbase/nbase.h	342;"	d
XDIGITBIT	liblua/lctype.h	43;"	d
Z	liblua/lundump.c	/^  ZIO *Z;$/;"	m	struct:__anon24	file:
ZIO	liblua/lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
Zio	liblua/lzio.h	/^struct Zio {$/;"	s
['error'] 	nselib/wsdd.lua	/^  ['error'] = function( data )$/;"	f
['general'] 	nselib/wsdd.lua	/^  ['general'] = function( data )$/;"	f
['wcf'] 	nselib/wsdd.lua	/^  ['wcf'] = function( data )$/;"	f
_AIX	nsock/src/nsock_pcap.c	70;"	d	file:
_AIX	nsock/src/nsock_pcap.c	72;"	d	file:
_CRT_SECURE_NO_DEPRECATE	nbase/nbase_winconfig.h	208;"	d
_CRT_SECURE_NO_WARNINGS	liblua/lprefix.h	39;"	d
_CRT_SECURE_NO_WARNINGS	nbase/nbase_winconfig.h	210;"	d
_ERRNO_H_	nbase/nbase_winunix.h	160;"	d
_FILE_OFFSET_BITS	liblua/lprefix.h	27;"	d
_GNU_SOURCE	nsock/src/engine_poll.c	59;"	d	file:
_GNU_SOURCE	nsock/src/nsock_log.c	58;"	d	file:
_GNU_SOURCE	nsock/src/proxy_http.c	57;"	d	file:
_GNU_SOURCE	nsock/src/proxy_socks4.c	57;"	d	file:
_HAS_CPP0X	nbase/nbase_winunix.h	162;"	d
_HAS_CPP0X	nbase/nbase_winunix.h	163;"	d
_INC_ERRNO	nbase/nbase_winunix.h	159;"	d
_LARGEFILE_SOURCE	liblua/lprefix.h	26;"	d
_NSE_MAIN_HPP_	nse_main.h	2;"	d
_NSE_UTILITY_H_	nse_utility.h	2;"	d
_R[WAITING_TO_RUNNING] 	nselib/nse_main.lua	/^	_R[WAITING_TO_RUNNING] = function(co)$/;"	f
_R[YIELD] 	nselib/nse_main.lua	/^	_R[YIELD] = function(co)$/;"	f
_SYSTEM_ERROR_	nbase/nbase_winunix.h	161;"	d
_TARGET_HPP_	Target.h	2;"	d
_UTIL_H_	util.h	2;"	d
_WIN32_WINNT	nbase/nbase_winconfig.h	142;"	d
_WIN32_WINNT	nbase/nbase_winconfig.h	143;"	d
_WINSOCKAPI_	nbase/nbase_winunix.h	172;"	d
_WINSOCKAPI_	nse_nsock.cc	19;"	d	file:
_XOPEN_SOURCE	liblua/lprefix.h	17;"	d
_XOPEN_SOURCE	liblua/lprefix.h	19;"	d
__ASSERT_BASE	nsock/tests/test-common.h	24;"	d
__TEST_COMMON_H	nsock/tests/test-common.h	8;"	d
__align_to_64	nbase/nbase_ipv6.h	/^  u16 __align_to_64[3];$/;"	m	struct:sockaddr_storage
__attribute__	nbase/nbase.h	225;"	d
__attribute__	nbase/nbase_winconfig.h	217;"	d
__func__	nbase/nbase_winconfig.h	223;"	d
__nsock_log_internal	nsock/src/nsock_log.c	/^void __nsock_log_internal(nsock_loglevel_t loglevel, const char *file, int line,$/;"	f
__padding	nbase/nbase_ipv6.h	/^  u64 __padding[16];$/;"	m	struct:sockaddr_storage
_flags	nsock/src/nsock_internal.h	/^  char _flags;$/;"	m	struct:niod
_getmode	nbase/nbase_winunix.c	/^static int _getmode(int fd)$/;"	f	file:
_getopt	nbase/getopt.c	/^static int _getopt(int argc, char * argv[], const char *opts)$/;"	f	file:
_getopt_internal	nbase/getopt.c	/^int _getopt_internal(int argc, char * argv[], const char *shortopts,$/;"	f
_trie_insert	nbase/nbase_addrset.c	/^static void _trie_insert (struct trie_node *this, const u32 *addr, const u32 *mask)$/;"	f	file:
_trie_match	nbase/nbase_addrset.c	/^static int _trie_match (const struct trie_node *this, const u32 *addr)$/;"	f	file:
ac_fn_c_check_func	nbase/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_func	nsock/src/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	nbase/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_compile	nsock/src/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	nbase/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_header_mongrel	nsock/src/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_find_intX_t	nbase/configure	/^ac_fn_c_find_intX_t ()$/;"	f
ac_fn_c_find_uintX_t	nbase/configure	/^ac_fn_c_find_uintX_t ()$/;"	f
ac_fn_c_try_compile	nbase/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_compile	nsock/src/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	nbase/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_cpp	nsock/src/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	nbase/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_link	nsock/src/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	nbase/configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_c_try_run	nsock/src/configure	/^ac_fn_c_try_run ()$/;"	f
access	nbase/nbase.h	349;"	d
action	nse_nsock.cc	/^  const char *action;$/;"	m	struct:nse_nsock_udata	file:
action	nse_nsock_tmp.cc	/^	const char *action;$/;"	m	struct:nse_nsock_udata	file:
active_eovs	nsock/src/engine_iocp.c	/^  gh_list_t active_eovs;$/;"	m	struct:iocp_engine_info	file:
active_iods	nsock/src/nsock_internal.h	/^  gh_list_t active_iods;$/;"	m	struct:npool
actvar	liblua/lparser.h	/^  } actvar;$/;"	m	struct:Dyndata	typeref:struct:Dyndata::__anon18
addQuestion	nselib/dns.lua	/^function addQuestion(pkt, dname, dtype, class)$/;"	f
add_s	liblua/lstrlib.c	/^static void add_s (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
add_timer	nsock/tests/timer.c	/^static void add_timer(struct timer_test_data *ttd, int timeout) {$/;"	f	file:
add_value	liblua/lstrlib.c	/^static void add_value (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
addbuff	liblua/lstate.c	77;"	d	file:
adddigit	liblua/lstrlib.c	/^static lua_Number adddigit (char *buff, int n, lua_Number x) {$/;"	f	file:
addfield	liblua/ltablib.c	/^static void addfield (lua_State *L, luaL_Buffer *b, lua_Integer i) {$/;"	f	file:
addk	liblua/lcode.c	/^static int addk (FuncState *fs, TValue *key, TValue *v) {$/;"	f	file:
addlenmod	liblua/lstrlib.c	/^static void addlenmod (char *form, const char *lenmod) {$/;"	f	file:
addliteral	liblua/lstrlib.c	/^static void addliteral (lua_State *L, luaL_Buffer *b, int arg) {$/;"	f	file:
addprototype	liblua/lparser.c	/^static Proto *addprototype (LexState *ls) {$/;"	f	file:
addquoted	liblua/lstrlib.c	/^static void addquoted (luaL_Buffer *b, const char *s, size_t len) {$/;"	f	file:
addr	nbase/nbase_addrset.c	/^  u32 addr[4];$/;"	m	struct:trie_node	file:
addr_matches	nbase/nbase_addrset.c	/^static int addr_matches(const u32 *mask, const u32 *sa, const u32 *sb)$/;"	f	file:
addr_next_bit_is_one	nbase/nbase_addrset.c	/^static u32 addr_next_bit_is_one(const u32 *mask, const u32 *addr) {$/;"	f	file:
address	nsock/src/proxy_socks4.c	/^    uint32_t address;$/;"	m	struct:socks4_data	file:
address_to_string	nbase/nbase_addrset.c	/^static char *address_to_string(const struct sockaddr *sa, size_t sa_len,$/;"	f	file:
addreturn	liblua/lua.c	/^static int addreturn (lua_State *L) {$/;"	f	file:
addrinfo	nbase/nbase_ipv6.h	/^struct addrinfo {$/;"	s
addrset	nbase/nbase_addrset.c	/^struct addrset {$/;"	s	file:
addrset_add_file	nbase/nbase_addrset.c	/^int addrset_add_file(struct addrset *set, FILE *fd, int af, int dns)$/;"	f
addrset_add_spec	nbase/nbase_addrset.c	/^int addrset_add_spec(struct addrset *set, const char *spec, int af, int dns)$/;"	f
addrset_contains	nbase/nbase_addrset.c	/^int addrset_contains(const struct addrset *set, const struct sockaddr *sa)$/;"	f
addrset_elem	nbase/nbase_addrset.c	/^struct addrset_elem {$/;"	s	file:
addrset_elem_match	nbase/nbase_addrset.c	/^static int addrset_elem_match(const struct addrset_elem *elem, const struct sockaddr *sa)$/;"	f	file:
addrset_elem_print	nbase/nbase_addrset.c	/^static void addrset_elem_print(FILE *fp, const struct addrset_elem *elem)$/;"	f	file:
addrset_free	nbase/nbase_addrset.c	/^void addrset_free(struct addrset *set)$/;"	f
addrset_new	nbase/nbase_addrset.c	/^struct addrset *addrset_new()$/;"	f
addrset_print	nbase/nbase_addrset.c	/^void addrset_print(FILE *fp, const struct addrset *set)$/;"	f
addstr	liblua/lobject.c	485;"	d	file:
addtoclib	liblua/loadlib.c	/^static void addtoclib (lua_State *L, const char *path, void *plib) {$/;"	f	file:
adjust_assign	liblua/lparser.c	/^static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {$/;"	f	file:
adjust_varargs	liblua/ldo.c	/^static StkId adjust_varargs (lua_State *L, Proto *p, int actual) {$/;"	f	file:
adjustlocalvars	liblua/lparser.c	/^static void adjustlocalvars (LexState *ls, int nvars) {$/;"	f	file:
adjustresults	liblua/lapi.h	17;"	d
af	nse_nsock.cc	/^  int af;$/;"	m	struct:nse_nsock_udata	file:
af	nse_nsock_tmp.cc	/^	int af;$/;"	m	struct:nse_nsock_udata	file:
ai_addr	nbase/nbase_ipv6.h	/^  struct sockaddr  *ai_addr; \/* binary address *\/$/;"	m	struct:addrinfo	typeref:struct:addrinfo::sockaddr
ai_addrlen	nbase/nbase_ipv6.h	/^  size_t ai_addrlen;   \/* length of ai_addr *\/$/;"	m	struct:addrinfo
ai_canonname	nbase/nbase_ipv6.h	/^  char *ai_canonname; \/* canonical name for nodename *\/$/;"	m	struct:addrinfo
ai_family	nbase/nbase_ipv6.h	/^  int ai_family;    \/* PF_xxx *\/$/;"	m	struct:addrinfo
ai_flags	nbase/nbase_ipv6.h	/^  int ai_flags;      \/*  AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST *\/$/;"	m	struct:addrinfo
ai_next	nbase/nbase_ipv6.h	/^  struct  addrinfo  *ai_next; \/* next structure in linked list *\/$/;"	m	struct:addrinfo	typeref:struct:addrinfo::addrinfo
ai_protocol	nbase/nbase_ipv6.h	/^  int ai_protocol;  \/* 0 or IPPROTO_xxx for IPv4 and IPv6 *\/$/;"	m	struct:addrinfo
ai_socktype	nbase/nbase_ipv6.h	/^  int ai_socktype;  \/* SOCK_xxx *\/$/;"	m	struct:addrinfo
allgc	liblua/lstate.h	/^  GCObject *allgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State
alloc_vsprintf	nbase/nbase_str.c	/^int alloc_vsprintf(char **strp, const char *fmt, va_list va) {$/;"	f
allocsizenode	liblua/ltable.h	35;"	d
allowhook	liblua/lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State
allweak	liblua/lstate.h	/^  GCObject *allweak;  \/* list of all-weak tables *\/$/;"	m	struct:global_State
alternate_flag	nbase/snprintf.c	/^    alternate_flag =  8,$/;"	e	enum:format_flags	file:
andaux	liblua/lbitlib.c	/^static lua_Unsigned andaux (lua_State *L) {$/;"	f	file:
api_check	liblua/llimits.h	101;"	d
api_checknelems	liblua/lapi.h	20;"	d
api_checkstackindex	liblua/lapi.c	56;"	d	file:
api_checkvalidindex	liblua/lapi.c	54;"	d	file:
api_incr_top	liblua/lapi.h	14;"	d
append	nbase/test/test-escape_windows_command_arg.c	/^static char *append(char *p, const char *s)$/;"	f	file:
append_char	nbase/snprintf.c	/^  int (*append_char)(struct state *, unsigned char);$/;"	m	struct:state	file:
append_char	nbase/snprintf.c	/^append_char(struct state *state,$/;"	f	file:
append_number	nbase/snprintf.c	/^append_number(struct state *state,$/;"	f	file:
append_string	nbase/snprintf.c	/^append_string (struct state *state,$/;"	f	file:
apply_ipv4_netmask	nbase/nbase_addrset.c	/^static void apply_ipv4_netmask(struct addrset_elem *elem, uint32_t mask)$/;"	f	file:
apply_ipv4_netmask_bits	nbase/nbase_addrset.c	/^static void apply_ipv4_netmask_bits(struct addrset_elem *elem, int bits)$/;"	f	file:
apply_ipv4_netmask_octet	nbase/nbase_addrset.c	/^static void apply_ipv4_netmask_octet(octet_bitvector bits, uint8_t mask)$/;"	f	file:
arr	liblua/lparser.h	/^    Vardesc *arr;$/;"	m	struct:Dyndata::__anon18
arr	liblua/lparser.h	/^  Labeldesc *arr;  \/* array *\/$/;"	m	struct:Labellist
array	liblua/lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table
arrayindex	liblua/ltable.c	/^static unsigned int arrayindex (const TValue *key) {$/;"	f	file:
arrays_equal	nbase/test/test-escape_windows_command_arg.c	/^static int arrays_equal(const char **a, unsigned int alen, const char **b, unsigned int blen)$/;"	f	file:
as_append_char	nbase/snprintf.c	/^as_append_char (struct state *state, unsigned char c)$/;"	f	file:
as_fn_append	nbase/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	nbase/configure	/^  as_fn_append ()$/;"	f
as_fn_append	nsock/src/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	nsock/src/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	nbase/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	nbase/configure	/^  as_fn_arith ()$/;"	f
as_fn_arith	nsock/src/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	nsock/src/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	nbase/config.status	/^as_fn_error ()$/;"	f
as_fn_error	nbase/configure	/^as_fn_error ()$/;"	f
as_fn_error	nsock/src/config.status	/^as_fn_error ()$/;"	f
as_fn_error	nsock/src/configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	nbase/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	nbase/configure	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	nsock/src/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	nsock/src/configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	nbase/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	nbase/configure	/^as_fn_exit ()$/;"	f
as_fn_exit	nsock/src/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	nsock/src/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	nbase/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_failure	nsock/src/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	nbase/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	nbase/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	nsock/src/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	nsock/src/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	nbase/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_failure	nsock/src/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	nbase/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_ret_success	nsock/src/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	nbase/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	nbase/configure	/^as_fn_set_status ()$/;"	f
as_fn_set_status	nsock/src/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	nsock/src/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	nbase/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_success	nsock/src/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	nbase/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	nbase/configure	/^as_fn_unset ()$/;"	f
as_fn_unset	nsock/src/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	nsock/src/configure	/^as_fn_unset ()$/;"	f
as_reserve	nbase/snprintf.c	/^as_reserve (struct state *state, size_t n)$/;"	f	file:
asnprintf	nbase/snprintf.c	/^asnprintf (char **ret, size_t max_sz, const char *format, ...)$/;"	f
asprintf	nbase/snprintf.c	/^asprintf (char **ret, const char *format, ...)$/;"	f
assignment	liblua/lparser.c	/^static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {$/;"	f	file:
atomic	liblua/lgc.c	/^static l_mem atomic (lua_State *L) {$/;"	f	file:
aux_close	liblua/liolib.c	/^static int aux_close (lua_State *L) {$/;"	f	file:
aux_getn	liblua/ltablib.c	33;"	d	file:
aux_lines	liblua/liolib.c	/^static void aux_lines (lua_State *L, int toclose) {$/;"	f	file:
aux_upvalue	liblua/lapi.c	/^static const char *aux_upvalue (StkId fi, int n, TValue **val,$/;"	f	file:
auxgetinfo	liblua/ldebug.c	/^static int auxgetinfo (lua_State *L, const char *what, lua_Debug *ar,$/;"	f	file:
auxgetstr	liblua/lapi.c	/^static int auxgetstr (lua_State *L, const TValue *t, const char *k) {$/;"	f	file:
auxresume	liblua/lcorolib.c	/^static int auxresume (lua_State *L, lua_State *co, int narg) {$/;"	f	file:
auxsetnode	liblua/ltable.c	/^static void auxsetnode (lua_State *L, void *ud) {$/;"	f	file:
auxsetstr	liblua/lapi.c	/^static void auxsetstr (lua_State *L, const TValue *t, const char *k) {$/;"	f	file:
auxsort	liblua/ltablib.c	/^static void auxsort (lua_State *L, IdxT lo, IdxT up,$/;"	f	file:
auxupvalue	liblua/ldblib.c	/^static int auxupvalue (lua_State *L, int get) {$/;"	f	file:
available_engines	nsock/src/nsock_engines.c	/^static struct io_engine *available_engines[] = {$/;"	v	typeref:struct:io_engine	file:
b	liblua/lauxlib.h	/^  char *b;  \/* buffer address *\/$/;"	m	struct:luaL_Buffer
b	liblua/ldo.c	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp	file:
b	liblua/lobject.h	/^  int b;           \/* booleans *\/$/;"	m	union:Value
b_and	liblua/lbitlib.c	/^static int b_and (lua_State *L) {$/;"	f	file:
b_arshift	liblua/lbitlib.c	/^static int b_arshift (lua_State *L) {$/;"	f	file:
b_extract	liblua/lbitlib.c	/^static int b_extract (lua_State *L) {$/;"	f	file:
b_lrot	liblua/lbitlib.c	/^static int b_lrot (lua_State *L) {$/;"	f	file:
b_lshift	liblua/lbitlib.c	/^static int b_lshift (lua_State *L) {$/;"	f	file:
b_not	liblua/lbitlib.c	/^static int b_not (lua_State *L) {$/;"	f	file:
b_or	liblua/lbitlib.c	/^static int b_or (lua_State *L) {$/;"	f	file:
b_replace	liblua/lbitlib.c	/^static int b_replace (lua_State *L) {$/;"	f	file:
b_rot	liblua/lbitlib.c	/^static int b_rot (lua_State *L, lua_Integer d) {$/;"	f	file:
b_rrot	liblua/lbitlib.c	/^static int b_rrot (lua_State *L) {$/;"	f	file:
b_rshift	liblua/lbitlib.c	/^static int b_rshift (lua_State *L) {$/;"	f	file:
b_shift	liblua/lbitlib.c	/^static int b_shift (lua_State *L, lua_Unsigned r, lua_Integer i) {$/;"	f	file:
b_str2int	liblua/lbaselib.c	/^static const char *b_str2int (const char *s, int base, lua_Integer *pn) {$/;"	f	file:
b_test	liblua/lbitlib.c	/^static int b_test (lua_State *L) {$/;"	f	file:
b_xor	liblua/lbitlib.c	/^static int b_xor (lua_State *L) {$/;"	f	file:
base	liblua/lstate.h	/^      StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo::__anon3::__anon4
base_ci	liblua/lstate.h	/^  CallInfo base_ci;  \/* CallInfo for first level (C calling Lua) *\/$/;"	m	struct:lua_State
base_funcs	liblua/lbaselib.c	/^static const luaL_Reg base_funcs[] = {$/;"	v	file:
basehookcount	liblua/lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State
basic_setup	nsock/tests/basic.c	/^static int basic_setup(void **tdata) {$/;"	f	file:
basic_teardown	nsock/tests/basic.c	/^static int basic_teardown(void *tdata) {$/;"	f	file:
basic_test_data	nsock/tests/basic.c	/^struct basic_test_data {$/;"	s	file:
basic_test_data	nsock/tests/cancel.c	/^struct basic_test_data {$/;"	s	file:
basic_udata	nsock/tests/basic.c	/^static int basic_udata(void *tdata) {$/;"	f	file:
bindir	nbase/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	nsock/src/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bit2mask	liblua/lgc.h	71;"	d
bitlib	liblua/lbitlib.c	/^static const luaL_Reg bitlib[] = {$/;"	v	file:
bitmask	liblua/lgc.h	70;"	d
bits	nbase/nbase_addrset.c	/^    octet_bitvector bits[4];$/;"	m	struct:addrset_elem::__anon2	file:
bitvector_t	nbase/nbase_addrset.c	/^typedef unsigned long bitvector_t;$/;"	t	file:
bl	liblua/lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::BlockCnt
black2gray	liblua/lgc.c	71;"	d	file:
block	liblua/lparser.c	/^static void block (LexState *ls) {$/;"	f	file:
block_follow	liblua/lparser.c	/^static int block_follow (LexState *ls, int withuntil) {$/;"	f	file:
block_socket	nbase/nbase_misc.c	/^int block_socket(int sd) {$/;"	f
body	liblua/lparser.c	/^static void body (LexState *ls, expdesc *e, int ismethod, int line) {$/;"	f	file:
boolK	liblua/lcode.c	/^static int boolK (FuncState *fs, int b) {$/;"	f	file:
box	liblua/lauxlib.c	/^  void *box;$/;"	m	struct:UBox	file:
boxgc	liblua/lauxlib.c	/^static int boxgc (lua_State *L) {$/;"	f	file:
breaklabel	liblua/lparser.c	/^static void breaklabel (LexState *ls) {$/;"	f	file:
broadcast	nsock/src/nsock_internal.h	/^  int broadcast;$/;"	m	struct:npool
bsize	liblua/lauxlib.c	/^  size_t bsize;$/;"	m	struct:UBox	file:
buff	liblua/lauxlib.c	/^  char buff[BUFSIZ];  \/* area for reading file *\/$/;"	m	struct:LoadF	file:
buff	liblua/ldo.c	/^  Mbuffer buff;  \/* dynamic structure used by the scanner *\/$/;"	m	struct:SParser	file:
buff	liblua/liolib.c	/^  char buff[L_MAXLENNUM + 1];  \/* +1 for ending '\\0' *\/$/;"	m	struct:__anon20	file:
buff	liblua/llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState
buff	liblua/lstrlib.c	/^  char buff[5 * sizeof(lua_Number)];  \/* enough for any float type *\/$/;"	m	union:Ftypes	file:
buffer	liblua/lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer
buffonstack	liblua/lauxlib.c	499;"	d	file:
buffsize	liblua/lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer
build_commandline	nbase/test/test-escape_windows_command_arg.c	/^static LPWSTR build_commandline(const char *args[], unsigned int len)$/;"	f	file:
bvalue	liblua/lobject.h	176;"	d
byteoffset	liblua/lutf8lib.c	/^static int byteoffset (lua_State *L) {$/;"	f	file:
bzero	nbase/nbase_winconfig.h	215;"	d
c	liblua/liolib.c	/^  int c;  \/* current character (look ahead) *\/$/;"	m	struct:__anon20	file:
c	liblua/lobject.h	/^  CClosure c;$/;"	m	union:Closure
c	liblua/lstate.h	/^    } c;$/;"	m	union:CallInfo::__anon3	typeref:struct:CallInfo::__anon3::__anon5
c	liblua/lstrlib.c	/^  char c;$/;"	m	struct:cD	file:
cD	liblua/lstrlib.c	/^struct cD {$/;"	s	file:
cache	liblua/lobject.h	/^  struct LClosure *cache;  \/* last-created closure with this prototype *\/$/;"	m	struct:Proto	typeref:struct:Proto::LClosure
call_connect_overlapped	nsock/src/engine_iocp.c	/^static void call_connect_overlapped(struct npool *nsp, struct nevent *nse) {$/;"	f	file:
call_read_overlapped	nsock/src/engine_iocp.c	/^static void call_read_overlapped(struct nevent *nse) {$/;"	f	file:
call_write_overlapped	nsock/src/engine_iocp.c	/^static void call_write_overlapped(struct nevent *nse) {$/;"	f	file:
callallpendingfinalizers	liblua/lgc.c	/^static void callallpendingfinalizers (lua_State *L) {$/;"	f	file:
callback	nse_nsock.cc	/^static void callback (nsock_pool nsp, nsock_event nse, void *ud)$/;"	f	file:
callback	nse_nsock_tmp.cc	/^static void callback(nsock_pool nsp, nsock_event nse, void *ud)$/;"	f	file:
callhook	liblua/ldo.c	/^static void callhook (lua_State *L, CallInfo *ci) {$/;"	f	file:
callstatus	liblua/lstate.h	/^  unsigned short callstatus;$/;"	m	struct:CallInfo
cancel_handler	nsock/tests/cancel.c	/^static void cancel_handler(nsock_pool nsp, nsock_event nse, void *udata) {$/;"	f	file:
cancel_setup	nsock/tests/cancel.c	/^static int cancel_setup(void **tdata) {$/;"	f	file:
cancel_ssl_run	nsock/tests/cancel.c	/^static int cancel_ssl_run(void *tdata) {$/;"	f	file:
cancel_tcp_run	nsock/tests/cancel.c	/^static int cancel_tcp_run(void *tdata) {$/;"	f	file:
cancel_teardown	nsock/tests/cancel.c	/^static int cancel_teardown(void *tdata) {$/;"	f	file:
cancel_udp_run	nsock/tests/cancel.c	/^static int cancel_udp_run(void *tdata) {$/;"	f	file:
cannot	liblua/luac.c	/^static void cannot(const char* what)$/;"	f	file:
capacity	nsock/src/engine_iocp.c	/^  unsigned long capacity;$/;"	m	struct:iocp_engine_info	file:
capacity	nsock/src/engine_poll.c	/^  int capacity;$/;"	m	struct:poll_engine_info	file:
caplen	nsock/src/nsock_pcap.h	/^  int caplen;$/;"	m	struct:__anon28
capture	liblua/lstrlib.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon6	file:
capture_to_close	liblua/lstrlib.c	/^static int capture_to_close (MatchState *ms) {$/;"	f	file:
cast	liblua/llimits.h	111;"	d
cast_byte	liblua/llimits.h	114;"	d
cast_func	liblua/loadlib.c	115;"	d	file:
cast_func	liblua/loadlib.c	117;"	d	file:
cast_int	liblua/llimits.h	116;"	d
cast_num	liblua/llimits.h	115;"	d
cast_u	liblua/lstate.h	222;"	d
cast_uchar	liblua/llimits.h	117;"	d
cast_void	liblua/llimits.h	113;"	d
changewhite	liblua/lgc.h	98;"	d
check	liblua/lparser.c	/^static void check (LexState *ls, int c) {$/;"	f	file:
checkGC	liblua/lvm.c	749;"	d	file:
checkHeader	liblua/lundump.c	/^static void checkHeader (LoadState *S) {$/;"	f	file:
checkSizes	liblua/lgc.c	/^static void checkSizes (lua_State *L, global_State *g) {$/;"	f	file:
check_capture	liblua/lstrlib.c	/^static int check_capture (MatchState *ms, int l) {$/;"	f	file:
check_condition	liblua/lparser.c	118;"	d	file:
check_conflict	liblua/lparser.c	/^static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {$/;"	f	file:
check_errlevel	nsock/tests/logs.c	/^static int check_errlevel(struct log_test_data *ltd, nsock_loglevel_t level) {$/;"	f	file:
check_exp	liblua/llimits.h	85;"	d
check_exp	liblua/llimits.h	90;"	d
check_loglevel	nsock/tests/logs.c	/^static int check_loglevel(struct log_test_data *ltd, nsock_loglevel_t level) {$/;"	f	file:
check_match	liblua/lparser.c	/^static void check_match (LexState *ls, int what, int who, int where) {$/;"	f	file:
check_next1	liblua/llex.c	/^static int check_next1 (LexState *ls, int c) {$/;"	f	file:
check_next2	liblua/llex.c	/^static int check_next2 (LexState *ls, const char *set) {$/;"	f	file:
check_nsock_udata	nse_nsock.cc	/^static nse_nsock_udata *check_nsock_udata (lua_State *L, int idx, bool open)$/;"	f	file:
check_nsock_udata	nse_nsock_tmp.cc	/^static nse_nsock_udata *check_nsock_udata(lua_State *L, int idx, bool open)$/;"	f	file:
checkclib	liblua/loadlib.c	/^static void *checkclib (lua_State *L, const char *path) {$/;"	f	file:
checkconsistency	liblua/lgc.c	79;"	d	file:
checkdeadkey	liblua/lgc.c	76;"	d	file:
checkdp	liblua/lstrlib.c	/^static void checkdp (char *buff, int nb) {$/;"	f	file:
checked_fd_clr	nbase/nbase.h	/^static inline void checked_fd_clr(int fd, fd_set *fds) {$/;"	f
checked_fd_isset	nbase/nbase.h	/^static inline int checked_fd_isset(int fd, fd_set *fds) {$/;"	f
checked_fd_set	nbase/nbase.h	/^static inline void checked_fd_set(int fd, fd_set *fds) {$/;"	f
checkfield	liblua/ltablib.c	/^static int checkfield (lua_State *L, const char *key, int n) {$/;"	f	file:
checklimit	liblua/lparser.c	/^static void checklimit (FuncState *fs, int v, int l, const char *what) {$/;"	f	file:
checkliteral	liblua/lundump.c	/^static void checkliteral (LoadState *S, const char *s, const char *msg) {$/;"	f	file:
checkliveness	liblua/lobject.h	190;"	d
checkload	liblua/loadlib.c	/^static int checkload (lua_State *L, int stat, const char *filename) {$/;"	f	file:
checkmode	liblua/ldo.c	/^static void checkmode (lua_State *L, const char *mode, const char *x) {$/;"	f	file:
checkname	liblua/lparser.c	/^static void checkname (LexState *ls, expdesc *e) {$/;"	f	file:
checknext	liblua/lparser.c	/^static void checknext (LexState *ls, int c) {$/;"	f	file:
checkoption	liblua/loslib.c	/^static const char *checkoption (lua_State *L, const char *conv,$/;"	f	file:
checkrepeated	liblua/lparser.c	/^static void checkrepeated (FuncState *fs, Labellist *ll, TString *label) {$/;"	f	file:
checkresults	liblua/lapi.c	904;"	d	file:
checksize	liblua/lundump.c	234;"	d	file:
checkstack	liblua/ldblib.c	/^static void checkstack (lua_State *L, lua_State *L1, int n) {$/;"	f	file:
checkstackp	liblua/ldo.c	399;"	d	file:
checktab	liblua/ltablib.c	/^static void checktab (lua_State *L, int arg, int what) {$/;"	f	file:
checktag	liblua/lobject.h	140;"	d
checktype	liblua/lobject.h	141;"	d
checkunsigned	liblua/lbitlib.c	23;"	d	file:
checkupval	liblua/ldblib.c	/^static int checkupval (lua_State *L, int argf, int argnup) {$/;"	f	file:
chgfltvalue	liblua/lobject.h	201;"	d
chgivalue	liblua/lobject.h	207;"	d
choosePivot	liblua/ltablib.c	/^static IdxT choosePivot (IdxT lo, IdxT up, unsigned int rnd) {$/;"	f	file:
ci	liblua/lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State
ci_func	liblua/ldebug.c	38;"	d	file:
cl	liblua/lstate.h	/^  union Closure cl;$/;"	m	union:GCUnion	typeref:union:GCUnion::Closure
clCvalue	liblua/lobject.h	173;"	d
clLvalue	liblua/lobject.h	172;"	d
classend	liblua/lstrlib.c	/^static const char *classend (MatchState *ms, const char *p) {$/;"	f	file:
cleanup_all	nsock/tests/run_tests.sh	/^cleanup_all() {$/;"	f
clearkeys	liblua/lgc.c	/^static void clearkeys (global_State *g, GCObject *l, GCObject *f) {$/;"	f	file:
clearvalues	liblua/lgc.c	/^static void clearvalues (global_State *g, GCObject *l, GCObject *f) {$/;"	f	file:
close	nbase/nbase_winunix.h	259;"	d
close_func	liblua/lparser.c	/^static void close_func (LexState *ls) {$/;"	f	file:
close_internal	nse_nsock.cc	/^static void close_internal (lua_State *L, nse_nsock_udata *nu)$/;"	f	file:
close_state	liblua/lstate.c	/^static void close_state (lua_State *L) {$/;"	f	file:
closef	liblua/lauxlib.h	/^  lua_CFunction closef;  \/* to close stream (NULL for closed streams) *\/$/;"	m	struct:luaL_Stream
closegoto	liblua/lparser.c	/^static void closegoto (LexState *ls, int g, Labeldesc *label) {$/;"	f	file:
closelistfield	liblua/lparser.c	/^static void closelistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
clvalue	liblua/lobject.h	171;"	d
cmp_op	nsock/src/gh_heap.h	/^  gh_heap_cmp_t cmp_op;$/;"	m	struct:gh_heap
co_funcs	liblua/lcorolib.c	/^static const luaL_Reg co_funcs[] = {$/;"	v	file:
code	liblua/lobject.h	/^  Instruction *code;  \/* opcodes *\/$/;"	m	struct:Proto
code_loadbool	liblua/lcode.c	/^static int code_loadbool (FuncState *fs, int A, int b, int jump) {$/;"	f	file:
codebinexpval	liblua/lcode.c	/^static void codebinexpval (FuncState *fs, OpCode op,$/;"	f	file:
codeclosure	liblua/lparser.c	/^static void codeclosure (LexState *ls, expdesc *v) {$/;"	f	file:
codecomp	liblua/lcode.c	/^static void codecomp (FuncState *fs, BinOpr opr, expdesc *e1, expdesc *e2) {$/;"	f	file:
codeextraarg	liblua/lcode.c	/^static int codeextraarg (FuncState *fs, int a) {$/;"	f	file:
codenot	liblua/lcode.c	/^static void codenot (FuncState *fs, expdesc *e) {$/;"	f	file:
codepoint	liblua/lutf8lib.c	/^static int codepoint (lua_State *L) {$/;"	f	file:
codestring	liblua/lparser.c	/^static void codestring (LexState *ls, expdesc *e, TString *s) {$/;"	f	file:
codeunexpval	liblua/lcode.c	/^static void codeunexpval (FuncState *fs, OpCode op, expdesc *e, int line) {$/;"	f	file:
collectargs	liblua/lua.c	/^static int collectargs (char **argv, int *first) {$/;"	f	file:
collectvalidlines	liblua/ldebug.c	/^static void collectvalidlines (lua_State *L, Closure *f) {$/;"	f	file:
combine	liblua/luac.c	/^static const Proto* combine(lua_State* L, int n)$/;"	f	file:
common_mask	nbase/nbase_addrset.c	/^static u32 common_mask(u32 a, u32 b)$/;"	f	file:
computesizes	liblua/ltable.c	/^static unsigned int computesizes (unsigned int nums[], unsigned int *pna) {$/;"	f	file:
cond	liblua/lparser.c	/^static int cond (LexState *ls) {$/;"	f	file:
condchangemem	liblua/llimits.h	317;"	d
condchangemem	liblua/llimits.h	319;"	d
condjump	liblua/lcode.c	/^static int condjump (FuncState *fs, OpCode op, int A, int B, int C) {$/;"	f	file:
condmovestack	liblua/llimits.h	309;"	d
condmovestack	liblua/llimits.h	312;"	d
connect	nse_nsock.cc	/^static int connect (lua_State *L, int status, lua_KContext ctx)$/;"	f	file:
connect	nse_nsock_tmp.cc	/^static int connect(lua_State *L, int status, lua_KContext ctx)$/;"	f	file:
connect_events	nsock/src/nsock_internal.h	/^  gh_list_t connect_events;$/;"	m	struct:npool
connect_handler	nsock/tests/connect.c	/^static void connect_handler(nsock_pool nsp, nsock_event nse, void *udata) {$/;"	f	file:
connect_result	nsock/tests/connect.c	/^  int connect_result;$/;"	m	struct:connect_test_data	file:
connect_setup	nsock/tests/connect.c	/^static int connect_setup(void **tdata) {$/;"	f	file:
connect_tcp	nsock/tests/connect.c	/^static int connect_tcp(void *tdata) {$/;"	f	file:
connect_tcp_failure	nsock/tests/connect.c	/^static int connect_tcp_failure(void *tdata) {$/;"	f	file:
connect_teardown	nsock/tests/connect.c	/^static int connect_teardown(void *tdata) {$/;"	f	file:
connect_test_data	nsock/tests/connect.c	/^struct connect_test_data {$/;"	s	file:
constfolding	liblua/lcode.c	/^static int constfolding (FuncState *fs, int op, expdesc *e1,$/;"	f	file:
constructor	liblua/lparser.c	/^static void constructor (LexState *ls, expdesc *t) {$/;"	f	file:
container_of	nsock/src/gh_heap.h	76;"	d
convergeephemerons	liblua/lgc.c	/^static void convergeephemerons (global_State *g) {$/;"	f	file:
copy2buff	liblua/lvm.c	/^static void copy2buff (StkId top, int n, char *buff) {$/;"	f	file:
copywithendian	liblua/lstrlib.c	/^static void copywithendian (volatile char *dest, volatile const char *src,$/;"	f	file:
correctstack	liblua/ldo.c	/^static void correctstack (lua_State *L, TValue *oldstack) {$/;"	f	file:
count	nsock/src/gh_heap.h	/^  unsigned int count;$/;"	m	struct:gh_heap
count	nsock/src/gh_list.h	/^  unsigned int count;$/;"	m	struct:gh_list
countint	liblua/ltable.c	/^static int countint (const TValue *key, unsigned int *nums) {$/;"	f	file:
crc_c	nbase/nbase_crc32ct.h	/^static unsigned long crc_c[256] = {$/;"	v
crc_table	nbase/nbase_misc.c	/^static unsigned long crc_table[256];$/;"	v	file:
crc_table_computed	nbase/nbase_misc.c	/^static int crc_table_computed = 0;$/;"	v	file:
createargtable	liblua/lua.c	/^static void createargtable (lua_State *L, char **argv, int argc, int script) {$/;"	f	file:
createclibstable	liblua/loadlib.c	/^static void createclibstable (lua_State *L) {$/;"	f	file:
createmeta	liblua/liolib.c	/^static void createmeta (lua_State *L) {$/;"	f	file:
createmetatable	liblua/lstrlib.c	/^static void createmetatable (lua_State *L) {$/;"	f	file:
createsearcherstable	liblua/loadlib.c	/^static void createsearcherstable (lua_State *L) {$/;"	f	file:
createstdfile	liblua/liolib.c	/^static void createstdfile (lua_State *L, FILE *f, const char *k,$/;"	f	file:
createstrobj	liblua/lstring.c	/^static TString *createstrobj (lua_State *L, size_t l, int tag, unsigned int h) {$/;"	f	file:
ctb	liblua/lobject.h	66;"	d
ctx	liblua/lstate.h	/^      lua_KContext ctx;  \/* context info. in case of yields *\/$/;"	m	struct:CallInfo::__anon3::__anon5
currIsNewline	liblua/llex.c	36;"	d	file:
current	liblua/llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState
current_alloc	nsock/src/filespace.h	/^  int current_alloc;$/;"	m	struct:filespace
current_level	nsock/tests/logs.c	/^  nsock_loglevel_t current_level;$/;"	m	struct:log_test_data	file:
current_size	nsock/src/filespace.h	/^  int current_size;$/;"	m	struct:filespace
currentline	liblua/ldebug.c	/^static int currentline (CallInfo *ci) {$/;"	f	file:
currentline	liblua/lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug
currentpc	liblua/ldebug.c	/^static int currentpc (CallInfo *ci) {$/;"	f	file:
currentwhite	liblua/lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State
cvt2num	liblua/lvm.h	24;"	d
cvt2num	liblua/lvm.h	26;"	d
cvt2str	liblua/lvm.h	17;"	d
cvt2str	liblua/lvm.h	19;"	d
d	liblua/lstrlib.c	/^  double d;$/;"	m	union:Ftypes	file:
d	liblua/lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon8	file:
data	liblua/ldump.c	/^  void *data;$/;"	m	struct:__anon21	file:
data	liblua/lzio.h	/^  void *data;			\/* additional data *\/$/;"	m	struct:Zio
datalink	nsock/src/nsock_pcap.h	/^  int datalink;$/;"	m	struct:__anon27
datarootdir	nbase/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	nsock/src/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
db_debug	liblua/ldblib.c	/^static int db_debug (lua_State *L) {$/;"	f	file:
db_gethook	liblua/ldblib.c	/^static int db_gethook (lua_State *L) {$/;"	f	file:
db_getinfo	liblua/ldblib.c	/^static int db_getinfo (lua_State *L) {$/;"	f	file:
db_getlocal	liblua/ldblib.c	/^static int db_getlocal (lua_State *L) {$/;"	f	file:
db_getmetatable	liblua/ldblib.c	/^static int db_getmetatable (lua_State *L) {$/;"	f	file:
db_getregistry	liblua/ldblib.c	/^static int db_getregistry (lua_State *L) {$/;"	f	file:
db_getupvalue	liblua/ldblib.c	/^static int db_getupvalue (lua_State *L) {$/;"	f	file:
db_getuservalue	liblua/ldblib.c	/^static int db_getuservalue (lua_State *L) {$/;"	f	file:
db_sethook	liblua/ldblib.c	/^static int db_sethook (lua_State *L) {$/;"	f	file:
db_setlocal	liblua/ldblib.c	/^static int db_setlocal (lua_State *L) {$/;"	f	file:
db_setmetatable	liblua/ldblib.c	/^static int db_setmetatable (lua_State *L) {$/;"	f	file:
db_setupvalue	liblua/ldblib.c	/^static int db_setupvalue (lua_State *L) {$/;"	f	file:
db_setuservalue	liblua/ldblib.c	/^static int db_setuservalue (lua_State *L) {$/;"	f	file:
db_traceback	liblua/ldblib.c	/^static int db_traceback (lua_State *L) {$/;"	f	file:
db_upvalueid	liblua/ldblib.c	/^static int db_upvalueid (lua_State *L) {$/;"	f	file:
db_upvaluejoin	liblua/ldblib.c	/^static int db_upvaluejoin (lua_State *L) {$/;"	f	file:
dblib	liblua/ldblib.c	/^static const luaL_Reg dblib[] = {$/;"	v	file:
deadvalue	liblua/lobject.h	179;"	d
decode	nselib/dns.lua	/^function decode(data)$/;"	f
default_af_string	nse_nsock.cc	/^static const char *default_af_string(int af)$/;"	f	file:
default_af_string	nse_nsock_tmp.cc	/^static const char* default_af_string(int af)$/;"	f	file:
default_log_debug	nbase/nbase_addrset.c	/^static void default_log_debug(const char * a, ...){};$/;"	f	file:
default_log_user	nbase/nbase_addrset.c	/^static void default_log_user(const char * a, ...){};$/;"	f	file:
delnode	nsock/tests/ghlists.c	/^static void delnode(gh_lnode_t *lnode) {$/;"	f	file:
dest	nsock/src/nsock_internal.h	/^  struct sockaddr_storage dest;$/;"	m	struct:writeinfo	typeref:struct:writeinfo::sockaddr_storage
destlen	nsock/src/nsock_internal.h	/^  size_t destlen;$/;"	m	struct:writeinfo
destroy	nsock/src/nsock_internal.h	/^  void (*destroy)(struct npool *nsp);$/;"	m	struct:io_engine
device	nsock/src/nsock_internal.h	/^  const char *device;$/;"	m	struct:npool
device	util.h	/^		char device[64];$/;"	m	class:Ops
digit	liblua/lstrlib.c	/^static int digit (int c) { return '0' <= c && c <= '9'; }$/;"	f	file:
direction	nse_nsock.cc	/^  const char *direction;$/;"	m	struct:nse_nsock_udata	file:
direction	nse_nsock_tmp.cc	/^	const char *direction;$/;"	m	struct:nse_nsock_udata	file:
discharge2anyreg	liblua/lcode.c	/^static void discharge2anyreg (FuncState *fs, expdesc *e) {$/;"	f	file:
discharge2reg	liblua/lcode.c	/^static void discharge2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
dischargejpc	liblua/lcode.c	/^static void dischargejpc (FuncState *fs) {$/;"	f	file:
discoverDevices 	nselib/wsdd.lua	/^  discoverDevices = function( self )$/;"	f
discoverServices 	nselib/wsdd.lua	/^  discoverServices = function( self, probename )$/;"	f
discoverWCFServices 	nselib/wsdd.lua	/^  discoverWCFServices = function( self )$/;"	f
dnet_to_pcap_device_name	nse_nsock.cc	/^static void dnet_to_pcap_device_name (lua_State *L, const char *device)$/;"	f	file:
doREPL	liblua/lua.c	/^static void doREPL (lua_State *L) {$/;"	f	file:
do_actual_pcap_read	nsock/src/nsock_pcap.c	/^int do_actual_pcap_read(struct nevent *nse) {$/;"	f
do_actual_read	nsock/src/nsock_core.c	/^static int do_actual_read(struct npool *ms, struct nevent *nse) {$/;"	f	file:
doargs	liblua/luac.c	/^static int doargs(int argc, char* argv[])$/;"	f	file:
docall	liblua/lua.c	/^static int docall (lua_State *L, int narg, int nres) {$/;"	f	file:
dochunk	liblua/lua.c	/^static int dochunk (lua_State *L, int status) {$/;"	f	file:
dofile	liblua/lua.c	/^static int dofile (lua_State *L, const char *name) {$/;"	f	file:
dofilecont	liblua/lbaselib.c	/^static int dofilecont (lua_State *L, int d1, lua_KContext d2) {$/;"	f	file:
dojump	liblua/lvm.c	738;"	d	file:
dolibrary	liblua/lua.c	/^static int dolibrary (lua_State *L, const char *name) {$/;"	f	file:
done	nsock/src/nsock_proxy.c	/^  int done;$/;"	m	struct:proxy_parser	file:
donextjump	liblua/lvm.c	744;"	d	file:
dooptions	liblua/loadlib.c	/^static void dooptions (lua_State *L, int n) {$/;"	f	file:
dostring	liblua/lua.c	/^static int dostring (lua_State *L, const char *s, const char *name) {$/;"	f	file:
dothecall	liblua/lgc.c	/^static void dothecall (lua_State *L, void *ud) {$/;"	f	file:
dtls_init_common	nsock/src/nsock_ssl.c	/^static SSL_CTX *dtls_init_common() {$/;"	f	file:
dummy	liblua/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for 'local' udata *\/$/;"	m	union:UUdata
dummy	liblua/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:UTString
dummy	liblua/lstrlib.c	/^  int dummy;$/;"	m	union:__anon7	file:
dummynode	liblua/ltable.c	75;"	d	file:
dummynode_	liblua/ltable.c	/^static const Node dummynode_ = {$/;"	v	file:
dumping	liblua/luac.c	/^static int dumping=1;			\/* dump bytecodes? *\/$/;"	v	file:
dup	nbase/nbase.h	353;"	d
dup2	nbase/nbase.h	354;"	d
dup_socket	nbase/nbase_misc.c	/^int dup_socket(int sd) {$/;"	f
dyd	liblua/ldo.c	/^  Dyndata dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:SParser	file:
dyd	liblua/llex.h	/^  struct Dyndata *dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:LexState	typeref:struct:LexState::Dyndata
encode	nselib/dns.lua	/^function encode(pkt)$/;"	f
encodeAdditional	nselib/dns.lua	/^local function encodeAdditional(additional)$/;"	f
encodeFQDN	nselib/dns.lua	/^local function encodeFQDN(fqdn)$/;"	f
encodeFlags	nselib/dns.lua	/^local function encodeFlags(flags)$/;"	f
encodeQuestions	nselib/dns.lua	/^local function encodeQuestions(questions)$/;"	f
end_capture	liblua/lstrlib.c	/^static const char *end_capture (MatchState *ms, const char *s,$/;"	f	file:
endpc	liblua/lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar
engine	nsock/src/nsock_internal.h	/^  struct io_engine *engine;$/;"	m	struct:npool	typeref:struct:npool::io_engine
engine_data	nsock/src/nsock_internal.h	/^  void *engine_data;$/;"	m	struct:npool
engine_epoll	nsock/src/engine_epoll.c	/^struct io_engine engine_epoll = {$/;"	v	typeref:struct:io_engine
engine_hint	nsock/src/nsock_engines.c	/^static char *engine_hint;$/;"	v	file:
engine_iocp	nsock/src/engine_iocp.c	/^struct io_engine engine_iocp = {$/;"	v	typeref:struct:io_engine
engine_kqueue	nsock/src/engine_kqueue.c	/^struct io_engine engine_kqueue = {$/;"	v	typeref:struct:io_engine
engine_poll	nsock/src/engine_poll.c	/^struct io_engine engine_poll = {$/;"	v	typeref:struct:io_engine
engine_select	nsock/src/engine_select.c	/^struct io_engine engine_select = {$/;"	v	typeref:struct:io_engine
enterblock	liblua/lparser.c	/^static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isloop) {$/;"	f	file:
enterlevel	liblua/lparser.c	/^static void enterlevel (LexState *ls) {$/;"	f	file:
entersweep	liblua/lgc.c	/^static void entersweep (lua_State *L) {$/;"	f	file:
entries_removed	nsock/src/engine_iocp.c	/^  unsigned long entries_removed;$/;"	m	struct:iocp_engine_info	file:
envn	liblua/llex.h	/^  TString *envn;  \/* environment variable name *\/$/;"	m	struct:LexState
eof	nsock/src/nsock_internal.h	/^  unsigned int eof: 1;$/;"	m	struct:nevent
eov	nsock/src/engine_iocp.c	/^  struct extended_overlapped *eov;$/;"	m	struct:iocp_engine_info	typeref:struct:iocp_engine_info::extended_overlapped	file:
eov	nsock/src/nsock_internal.h	/^  struct extended_overlapped *eov;$/;"	m	struct:nevent	typeref:struct:nevent::extended_overlapped
eov_list	nsock/src/engine_iocp.c	/^  OVERLAPPED_ENTRY *eov_list;$/;"	m	struct:iocp_engine_info	file:
eov_received	nsock/src/engine_iocp.c	/^  int eov_received;$/;"	m	struct:extended_overlapped	file:
epfd	nsock/src/engine_epoll.c	/^  int epfd;$/;"	m	struct:epoll_engine_info	file:
ephemeron	liblua/lstate.h	/^  GCObject *ephemeron;  \/* list of ephemeron tables (weak keys) *\/$/;"	m	struct:global_State
epoll_destroy	nsock/src/engine_epoll.c	/^void epoll_destroy(struct npool *nsp) {$/;"	f
epoll_engine_info	nsock/src/engine_epoll.c	/^struct epoll_engine_info {$/;"	s	file:
epoll_init	nsock/src/engine_epoll.c	/^int epoll_init(struct npool *nsp) {$/;"	f
epoll_iod_modify	nsock/src/engine_epoll.c	/^int epoll_iod_modify(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev_set, int ev_clr) {$/;"	f
epoll_iod_register	nsock/src/engine_epoll.c	/^int epoll_iod_register(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev) {$/;"	f
epoll_iod_unregister	nsock/src/engine_epoll.c	/^int epoll_iod_unregister(struct npool *nsp, struct niod *iod) {$/;"	f
epoll_loop	nsock/src/engine_epoll.c	/^int epoll_loop(struct npool *nsp, int msec_timeout) {$/;"	f
eqshrstr	liblua/lstring.h	33;"	d
eqstr	liblua/lparser.c	42;"	d	file:
err	nsock/src/engine_iocp.c	/^  int err;$/;"	m	struct:extended_overlapped	file:
errcode	nsock/tests/logs.c	/^  int errcode;$/;"	m	struct:log_test_data	file:
errcode_is_failure	nsock/src/engine_iocp.c	/^static int errcode_is_failure(int err) {$/;"	f	file:
errcode_is_failure	nsock/src/nsock_core.c	/^static int errcode_is_failure(int err) {$/;"	f	file:
errfile	liblua/lauxlib.c	/^static int errfile (lua_State *L, const char *what, int fnameindex) {$/;"	f	file:
errfunc	liblua/lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State
errnum	nsock/src/nsock_internal.h	/^  int errnum;$/;"	m	struct:nevent
errnum	nsock/src/nsock_internal.h	/^  int errnum;$/;"	m	struct:npool
error	liblua/lundump.c	/^static l_noret error(LoadState *S, const char *why) {$/;"	f	file:
errorJmp	liblua/lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_longjmp
error_expected	liblua/lparser.c	/^static l_noret error_expected (LexState *ls, int token) {$/;"	f	file:
errorlimit	liblua/lparser.c	/^static l_noret errorlimit (FuncState *fs, int limit, const char *what) {$/;"	f	file:
errorstatus	liblua/ldo.c	38;"	d	file:
escape_windows_command_arg	nbase/nbase_str.c	/^char *escape_windows_command_arg(const char *arg)$/;"	f
esccheck	liblua/llex.c	/^static void esccheck (LexState *ls, int c, const char *msg) {$/;"	f	file:
ev_ids	nsock/examples/nsock_test_timers.c	/^nsock_event_id ev_ids[2048];$/;"	v
event	liblua/lua.h	/^  int event;$/;"	m	struct:lua_Debug
event_delete	nsock/src/nsock_event.c	/^void event_delete(struct npool *nsp, struct nevent *nse) {$/;"	f
event_dispatch_and_delete	nsock/src/nsock_event.c	/^void event_dispatch_and_delete(struct npool *nsp, struct nevent *nse, int notify) {$/;"	f
event_done	nsock/src/nsock_internal.h	/^  unsigned int event_done: 1;$/;"	m	struct:nevent
event_new	nsock/src/nsock_event.c	/^struct nevent *event_new(struct npool *nsp, enum nse_type type,$/;"	f
event_timedout	nsock/src/nsock_event.c	/^int event_timedout(struct nevent *nse) {$/;"	f
events	nsock/src/engine_epoll.c	/^  struct epoll_event *events;$/;"	m	struct:epoll_engine_info	typeref:struct:epoll_engine_info::epoll_event	file:
events	nsock/src/engine_kqueue.c	/^  struct kevent *events;$/;"	m	struct:kqueue_engine_info	typeref:struct:kqueue_engine_info::kevent	file:
events	nsock/src/engine_poll.c	/^  POLLFD *events;$/;"	m	struct:poll_engine_info	file:
events_pending	nsock/src/nsock_internal.h	/^  int events_pending;$/;"	m	struct:niod
events_pending	nsock/src/nsock_internal.h	/^  int events_pending;$/;"	m	struct:npool
evlen	nsock/src/engine_epoll.c	/^  int evlen;$/;"	m	struct:epoll_engine_info	file:
evlen	nsock/src/engine_kqueue.c	/^  size_t evlen;$/;"	m	struct:kqueue_engine_info	file:
evlist_grow	nsock/src/engine_poll.c	/^static inline int evlist_grow(struct poll_engine_info *pinfo) {$/;"	f	file:
exec_prefix	nbase/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	nsock/src/Makefile	/^exec_prefix = ${prefix}$/;"	m
executable_path	nbase/nbase_misc.c	/^char *executable_path(const char *argv0) {$/;"	f
executable_path_GetModuleFileName	nbase/nbase_misc.c	/^static char *executable_path_GetModuleFileName(void) {$/;"	f	file:
executable_path_NSGetExecutablePath	nbase/nbase_misc.c	/^static char *executable_path_NSGetExecutablePath(void) {$/;"	f	file:
executable_path_argv0	nbase/nbase_misc.c	/^static char *executable_path_argv0(const char *argv0) {$/;"	f	file:
executable_path_proc_self_exe	nbase/nbase_misc.c	/^static char *executable_path_proc_self_exe(void) {$/;"	f	file:
execv	nbase/nbase.h	367;"	d
execve	nbase/nbase.h	351;"	d
exp1	liblua/lparser.c	/^static int exp1 (LexState *ls) {$/;"	f	file:
exp2reg	liblua/lcode.c	/^static void exp2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
expdesc	liblua/lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	liblua/lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expirable_cmp	nsock/src/nsock_pool.c	/^static int expirable_cmp(gh_hnode_t *n1, gh_hnode_t *n2) {$/;"	f	file:
expirables	nsock/src/nsock_internal.h	/^  gh_heap_t expirables;$/;"	m	struct:npool
expire	nsock/src/nsock_internal.h	/^  gh_hnode_t expire;$/;"	m	struct:nevent
expkind	liblua/lparser.h	/^} expkind;$/;"	t	typeref:enum:__anon15
explist	liblua/lparser.c	/^static int explist (LexState *ls, expdesc *v) {$/;"	f	file:
expr	liblua/lparser.c	/^static void expr (LexState *ls, expdesc *v) {$/;"	f	file:
exprstat	liblua/lparser.c	/^static void exprstat (LexState *ls) {$/;"	f	file:
extended_overlapped	nsock/src/engine_iocp.c	/^struct extended_overlapped {$/;"	s	file:
extra	liblua/lobject.h	/^  lu_byte extra;  \/* reserved words for short strings; "has hash" for longs *\/$/;"	m	struct:TString
extra	liblua/lstate.h	/^  ptrdiff_t extra;$/;"	m	struct:CallInfo
extra_	liblua/lstate.c	/^  lu_byte extra_[LUA_EXTRASPACE];$/;"	m	struct:LX	file:
f	liblua/lauxlib.c	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:LoadF	file:
f	liblua/lauxlib.h	/^  FILE *f;  \/* stream (NULL for incompletely created streams) *\/$/;"	m	struct:luaL_Stream
f	liblua/liolib.c	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:__anon20	file:
f	liblua/lobject.h	/^  lua_CFunction f; \/* light C functions *\/$/;"	m	union:Value
f	liblua/lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure
f	liblua/lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState
f	liblua/lparser.h	/^  int f;  \/* patch list of 'exit when false' *\/$/;"	m	struct:expdesc
f	liblua/lstrlib.c	/^  float f;$/;"	m	union:Ftypes	file:
f_call	liblua/lapi.c	/^static void f_call (lua_State *L, void *ud) {$/;"	f	file:
f_close	liblua/liolib.c	/^static int f_close (lua_State *L) {$/;"	f	file:
f_flush	liblua/liolib.c	/^static int f_flush (lua_State *L) {$/;"	f	file:
f_gc	liblua/liolib.c	/^static int f_gc (lua_State *L) {$/;"	f	file:
f_lines	liblua/liolib.c	/^static int f_lines (lua_State *L) {$/;"	f	file:
f_luaopen	liblua/lstate.c	/^static void f_luaopen (lua_State *L, void *ud) {$/;"	f	file:
f_parser	liblua/ldo.c	/^static void f_parser (lua_State *L, void *ud) {$/;"	f	file:
f_read	liblua/liolib.c	/^static int f_read (lua_State *L) {$/;"	f	file:
f_seek	liblua/liolib.c	/^static int f_seek (lua_State *L) {$/;"	f	file:
f_setvbuf	liblua/liolib.c	/^static int f_setvbuf (lua_State *L) {$/;"	f	file:
f_tostring	liblua/liolib.c	/^static int f_tostring (lua_State *L) {$/;"	f	file:
f_write	liblua/liolib.c	/^static int f_write (lua_State *L) {$/;"	f	file:
fasttm	liblua/ltm.h	51;"	d
fatal	liblua/luac.c	/^static void fatal(const char* message)$/;"	f	file:
fatal	nbase/nbase_memalloc.c	/^static void fatal(char *fmt, ...) {$/;"	f	file:
fatal	nsock/src/error.c	/^void fatal(char *fmt, ...) {$/;"	f
fchecksize	liblua/lundump.c	/^static void fchecksize (LoadState *S, size_t size, const char *tname) {$/;"	f	file:
fds_master_r	nsock/src/engine_select.c	/^  fd_set fds_master_r;$/;"	m	struct:select_engine_info	file:
fds_master_w	nsock/src/engine_select.c	/^  fd_set fds_master_w;$/;"	m	struct:select_engine_info	file:
fds_master_x	nsock/src/engine_select.c	/^  fd_set fds_master_x;$/;"	m	struct:select_engine_info	file:
fds_results_r	nsock/src/engine_select.c	/^  fd_set fds_results_r, fds_results_w, fds_results_x;$/;"	m	struct:select_engine_info	file:
fds_results_w	nsock/src/engine_select.c	/^  fd_set fds_results_r, fds_results_w, fds_results_x;$/;"	m	struct:select_engine_info	file:
fds_results_x	nsock/src/engine_select.c	/^  fd_set fds_results_r, fds_results_w, fds_results_x;$/;"	m	struct:select_engine_info	file:
field	liblua/lparser.c	/^static void field (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
fieldargs	liblua/lbitlib.c	/^static int fieldargs (lua_State *L, int farg, int *width) {$/;"	f	file:
fieldsel	liblua/lparser.c	/^static void fieldsel (LexState *ls, expdesc *v) {$/;"	f	file:
file	nsock/include/nsock.h	/^  const char *file;$/;"	m	struct:nsock_log_rec
file_is_readable	nbase/nbase_misc.c	/^int file_is_readable(const char *pathname) {$/;"	f
filespace	nsock/src/filespace.h	/^struct filespace {$/;"	s
filespace_init	nsock/src/filespace.c	/^int filespace_init(struct filespace *fs, int initial_size) {$/;"	f
filterpc	liblua/ldebug.c	/^static int filterpc (int pc, int jmptarget) {$/;"	f	file:
find_last_path_separator	nbase/nbase_str.c	/^static int find_last_path_separator(const char *path) {$/;"	f	file:
findfield	liblua/lauxlib.c	/^static int findfield (lua_State *L, int objidx, int level) {$/;"	f	file:
findfile	liblua/loadlib.c	/^static const char *findfile (lua_State *L, const char *name,$/;"	f	file:
findgotos	liblua/lparser.c	/^static void findgotos (LexState *ls, Labeldesc *lb) {$/;"	f	file:
findindex	liblua/ltable.c	/^static unsigned int findindex (lua_State *L, Table *t, StkId key) {$/;"	f	file:
findlabel	liblua/lparser.c	/^static int findlabel (LexState *ls, int g) {$/;"	f	file:
findlast	liblua/lgc.c	/^static GCObject **findlast (GCObject **p) {$/;"	f	file:
findloader	liblua/loadlib.c	/^static void findloader (lua_State *L, const char *name) {$/;"	f	file:
findlocal	liblua/ldebug.c	/^static const char *findlocal (lua_State *L, CallInfo *ci, int n,$/;"	f	file:
findpcall	liblua/ldo.c	/^static CallInfo *findpcall (lua_State *L) {$/;"	f	file:
findsetreg	liblua/ldebug.c	/^static int findsetreg (Proto *p, int lastpc, int reg) {$/;"	f	file:
findvararg	liblua/ldebug.c	/^static const char *findvararg (CallInfo *ci, int n, StkId *pos) {$/;"	f	file:
finishCcall	liblua/ldo.c	/^static void finishCcall (lua_State *L, int status) {$/;"	f	file:
finishpcall	liblua/lbaselib.c	/^static int finishpcall (lua_State *L, int status, lua_KContext extra) {$/;"	f	file:
finobj	liblua/lstate.h	/^  GCObject *finobj;  \/* list of collectable objects with finalizers *\/$/;"	m	struct:global_State
first	nsock/src/gh_list.h	/^  gh_lnode_t *first;$/;"	m	struct:gh_list
first_connect	nsock/src/nsock_internal.h	/^  gh_lnode_t *first_connect;$/;"	m	struct:niod
first_ev_next	nsock/src/nsock_event.c	/^static void first_ev_next(struct nevent *nse, gh_lnode_t **first, int nodeq2) {$/;"	f	file:
first_pcap_read	nsock/src/nsock_internal.h	/^  gh_lnode_t *first_pcap_read;$/;"	m	struct:niod
first_read	nsock/src/nsock_internal.h	/^  gh_lnode_t *first_read;$/;"	m	struct:niod
first_write	nsock/src/nsock_internal.h	/^  gh_lnode_t *first_write;$/;"	m	struct:niod
firstgoto	liblua/lparser.c	/^  int firstgoto;  \/* index of first pending goto in this block *\/$/;"	m	struct:BlockCnt	file:
firstlabel	liblua/lparser.c	/^  int firstlabel;  \/* index of first label in this block *\/$/;"	m	struct:BlockCnt	file:
firstlocal	liblua/lparser.h	/^  int firstlocal;  \/* index of first local var (in Dyndata array) *\/$/;"	m	struct:FuncState
fixedgc	liblua/lstate.h	/^  GCObject *fixedgc;  \/* list of objects not to be collected *\/$/;"	m	struct:global_State
fixjump	liblua/lcode.c	/^static void fixjump (FuncState *fs, int pc, int dest) {$/;"	f	file:
flag	nbase/getopt.h	/^  int *flag;$/;"	m	struct:option
flags	liblua/lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/$/;"	m	struct:Table
flib	liblua/liolib.c	/^static const luaL_Reg flib[] = {$/;"	v	file:
fltvalue	liblua/lobject.h	164;"	d
foo	nbase/configure	/^	  foo();$/;"	f
forbody	liblua/lparser.c	/^static void forbody (LexState *ls, int base, int line, int nvars, int isnum) {$/;"	f	file:
force_operation	nsock/src/engine_iocp.c	/^static void force_operation(struct npool *nsp, struct nevent *nse) {$/;"	f	file:
forlimit	liblua/lvm.c	/^static int forlimit (const TValue *obj, lua_Integer *p, lua_Integer step,$/;"	f	file:
forlist	liblua/lparser.c	/^static void forlist (LexState *ls, TString *indexname) {$/;"	f	file:
format_array	nbase/test/test-escape_windows_command_arg.c	/^static char *format_array(const char **args, unsigned int len)$/;"	f	file:
format_bytecount	nbase/nbase_misc.c	/^char *format_bytecount(unsigned long long bytes, char *buf, size_t buflen) {$/;"	f
format_flags	nbase/snprintf.c	/^enum format_flags {$/;"	g	file:
fornum	liblua/lparser.c	/^static void fornum (LexState *ls, TString *varname, int line) {$/;"	f	file:
forstat	liblua/lparser.c	/^static void forstat (LexState *ls, int line) {$/;"	f	file:
forward_event	nsock/src/nsock_proxy.c	/^void forward_event(nsock_pool nspool, nsock_event nsevent, void *udata) {$/;"	f
frealloc	liblua/lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State
freeLclosure	liblua/lgc.c	/^static void freeLclosure (lua_State *L, LClosure *cl) {$/;"	f	file:
free_eov	nsock/src/engine_iocp.c	/^static void free_eov(struct npool *nsp, struct extended_overlapped *eov) {$/;"	f	file:
free_eovs	nsock/src/engine_iocp.c	/^  gh_list_t free_eovs;$/;"	m	struct:iocp_engine_info	file:
free_events	nsock/src/nsock_internal.h	/^  gh_list_t free_events;$/;"	m	struct:npool
free_iods	nsock/src/nsock_internal.h	/^  gh_list_t free_iods;$/;"	m	struct:npool
freeaddrinfo	nbase/getaddrinfo.c	/^void freeaddrinfo(struct addrinfo *res) {$/;"	f
freeexp	liblua/lcode.c	/^static void freeexp (FuncState *fs, expdesc *e) {$/;"	f	file:
freeexps	liblua/lcode.c	/^static void freeexps (FuncState *fs, expdesc *e1, expdesc *e2) {$/;"	f	file:
freelist	liblua/lauxlib.c	592;"	d	file:
freeobj	liblua/lgc.c	/^static void freeobj (lua_State *L, GCObject *o) {$/;"	f	file:
freereg	liblua/lcode.c	/^static void freereg (FuncState *fs, int reg) {$/;"	f	file:
freereg	liblua/lparser.h	/^  lu_byte freereg;  \/* first free register *\/$/;"	m	struct:FuncState
freestack	liblua/lstate.c	/^static void freestack (lua_State *L) {$/;"	f	file:
fromstate	liblua/lstate.c	70;"	d	file:
fs	liblua/llex.h	/^  struct FuncState *fs;  \/* current function (parser) *\/$/;"	m	struct:LexState	typeref:struct:LexState::FuncState
fs_cat	nsock/src/filespace.c	/^int fs_cat(struct filespace *fs, const char *str, int len) {$/;"	f
fs_free	nsock/src/filespace.c	/^int fs_free(struct filespace *fs) {$/;"	f
fs_length	nsock/src/filespace.h	/^static inline int fs_length(const struct filespace *fs) {$/;"	f
fs_str	nsock/src/filespace.h	/^static inline char *fs_str(const struct filespace *fs) {$/;"	f
fselect	nbase/nbase_misc.c	/^int fselect(int s, fd_set *rmaster, fd_set *wmaster, fd_set *emaster, struct timeval *tv)$/;"	f
func	liblua/lapi.c	/^  StkId func;$/;"	m	struct:CallS	file:
func	liblua/lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg
func	liblua/lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo
func	nsock/include/nsock.h	/^  const char *func;$/;"	m	struct:nsock_log_rec
funcargs	liblua/lparser.c	/^static void funcargs (LexState *ls, expdesc *f, int line) {$/;"	f	file:
funcinfo	liblua/ldebug.c	/^static void funcinfo (lua_Debug *ar, Closure *cl) {$/;"	f	file:
funcname	liblua/lparser.c	/^static int funcname (LexState *ls, expdesc *v) {$/;"	f	file:
funcnamefromcode	liblua/ldebug.c	/^static const char *funcnamefromcode (lua_State *L, CallInfo *ci,$/;"	f	file:
funcs	liblua/lutf8lib.c	/^static const luaL_Reg funcs[] = {$/;"	v	file:
funcstat	liblua/lparser.c	/^static void funcstat (LexState *ls, int line) {$/;"	f	file:
fvalue	liblua/lobject.h	174;"	d
g	liblua/lstate.c	/^  global_State g;$/;"	m	struct:LG	file:
g_iofile	liblua/liolib.c	/^static int g_iofile (lua_State *L, const char *f, const char *mode) {$/;"	f	file:
g_read	liblua/liolib.c	/^static int g_read (lua_State *L, FILE *f, int first) {$/;"	f	file:
g_write	liblua/liolib.c	/^static int g_write (lua_State *L, FILE *f, int arg) {$/;"	f	file:
gai_strerror	nbase/getaddrinfo.c	/^const char *gai_strerror(int errcode) {$/;"	f
gai_strerror	nbase/getaddrinfo.c	154;"	d	file:
gai_strerrorA	nbase/getaddrinfo.c	/^char* WSAAPI gai_strerrorA (int errcode)$/;"	f
gc	liblua/lobject.h	/^  GCObject *gc;    \/* collectable objects *\/$/;"	m	union:Value
gc	liblua/lstate.h	/^  GCObject gc;  \/* common header *\/$/;"	m	union:GCUnion
gc_pool	nse_nsock.cc	/^static int gc_pool (lua_State *L)$/;"	f	file:
gc_pool	nse_nsock_tmp.cc	/^static int gc_pool(lua_State *L)$/;"	f	file:
gcfinnum	liblua/lstate.h	/^  unsigned int gcfinnum;  \/* number of finalizers to call in each GC step *\/$/;"	m	struct:global_State
gckind	liblua/lstate.h	/^  lu_byte gckind;  \/* kind of GC running *\/$/;"	m	struct:global_State
gclist	liblua/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto
gclist	liblua/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table
gclist	liblua/lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State
gco2ccl	liblua/lstate.h	229;"	d
gco2cl	liblua/lstate.h	230;"	d
gco2lcl	liblua/lstate.h	228;"	d
gco2p	liblua/lstate.h	233;"	d
gco2t	liblua/lstate.h	232;"	d
gco2th	liblua/lstate.h	234;"	d
gco2ts	liblua/lstate.h	225;"	d
gco2u	liblua/lstate.h	227;"	d
gcpause	liblua/lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State
gcrunning	liblua/lstate.h	/^  lu_byte gcrunning;  \/* true if GC is running *\/$/;"	m	struct:global_State
gcstate	liblua/lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State
gcstepmul	liblua/lstate.h	/^  int gcstepmul;  \/* GC 'granularity' *\/$/;"	m	struct:global_State
gctm	liblua/loadlib.c	/^static int gctm (lua_State *L) {$/;"	f	file:
gcvalue	liblua/lobject.h	167;"	d
generateUUID 	nselib/wsdd.lua	/^  generateUUID = function()$/;"	f
generic_reader	liblua/lbaselib.c	/^static const char *generic_reader (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
getBMode	liblua/lopcodes.h	284;"	d
getCMode	liblua/lopcodes.h	285;"	d
getF	liblua/lauxlib.c	/^static const char *getF (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
getOpMode	liblua/lopcodes.h	283;"	d
getProbeByName 	nselib/wsdd.lua	/^  getProbeByName = function( name )$/;"	f
getProbes 	nselib/wsdd.lua	/^  getProbes = function() return probes end,$/;"	f
getS	liblua/lauxlib.c	/^static const char *getS (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
get_addr_string	nsock/src/netutils.c	/^static char *get_addr_string(const struct sockaddr_storage *ss, size_t sslen) {$/;"	f	file:
get_chose_scripts	nselib/nse_main.lua	/^local function get_chose_scripts(rules)$/;"	f
get_event_id_type	nsock/src/nsock_event.c	/^enum nse_type get_event_id_type(nsock_event_id event_id) {$/;"	f
get_evmask	nsock/src/engine_epoll.c	/^static inline int get_evmask(struct epoll_engine_info *einfo, int n) {$/;"	f	file:
get_evmask	nsock/src/engine_kqueue.c	/^static inline int get_evmask(struct niod *nsi, const struct kevent *kev) {$/;"	f	file:
get_evmask	nsock/src/engine_poll.c	/^static inline int get_evmask(struct npool *nsp, struct niod *nsi) {$/;"	f	file:
get_evmask	nsock/src/engine_select.c	/^static inline int get_evmask(const struct npool *nsp, const struct niod *nsi) {$/;"	f	file:
get_io_engine	nsock/src/nsock_engines.c	/^struct io_engine *get_io_engine(void) {$/;"	f
get_localaddr_string	nsock/src/netutils.c	/^char *get_localaddr_string(const struct niod *iod) {$/;"	f
get_new_event_id	nsock/src/nsock_event.c	/^nsock_event_id get_new_event_id(struct npool *ms, enum nse_type type) {$/;"	f
get_overlapped_result	nsock/src/engine_iocp.c	/^static int get_overlapped_result(struct npool *nsp, int fd, const void *buffer, size_t count) {$/;"	f	file:
get_peeraddr_string	nsock/src/netutils.c	/^char *get_peeraddr_string(const struct niod *iod) {$/;"	f
get_pool	nse_nsock.cc	/^static nsock_pool get_pool (lua_State *L)$/;"	f	file:
get_pool	nse_nsock_tmp.cc	/^static nsock_pool get_pool(lua_State *L)$/;"	f	file:
get_port	nsock/src/netutils.c	/^static int get_port(const struct sockaddr_storage *ss) {$/;"	f	file:
get_prompt	liblua/lua.c	/^static const char *get_prompt (lua_State *L, int firstline) {$/;"	f	file:
get_random_bytes	nbase/nbase_rnd.c	/^int get_random_bytes(void *buf, int numbytes) {$/;"	f
get_random_int	nbase/nbase_rnd.c	/^int get_random_int() {$/;"	f
get_random_u16	nbase/nbase_rnd.c	/^u16 get_random_u16() {$/;"	f
get_random_u32	nbase/nbase_rnd.c	/^u32 get_random_u32() {$/;"	f
get_random_u64	nbase/nbase_rnd.c	/^u64 get_random_u64() {$/;"	f
get_random_u8	nbase/nbase_rnd.c	/^u8 get_random_u8() {$/;"	f
get_random_uint	nbase/nbase_rnd.c	/^unsigned int get_random_uint() {$/;"	f
get_random_unique_u32	nbase/nbase_rnd.c	/^u32 get_random_unique_u32() {$/;"	f
get_random_ushort	nbase/nbase_rnd.c	/^unsigned short get_random_ushort() {$/;"	f
get_test_name	nsock/tests/test-common.h	/^static inline const char *get_test_name(const struct test_case *test) {$/;"	f
get_unixsock_path	nsock/src/netutils.c	/^const char *get_unixsock_path(const struct sockaddr_storage *addr) {$/;"	f
getaddrinfo	nbase/getaddrinfo.c	/^int getaddrinfo(const char *node, const char *service,$/;"	f
getarg	liblua/lopcodes.h	93;"	d
getbinopr	liblua/lparser.c	/^static BinOpr getbinopr (int op) {$/;"	f	file:
getboolfield	liblua/loslib.c	/^static int getboolfield (lua_State *L, const char *key) {$/;"	f	file:
getcached	liblua/lvm.c	/^static LClosure *getcached (Proto *p, UpVal **encup, StkId base) {$/;"	f	file:
getco	liblua/lcorolib.c	/^static lua_State *getco (lua_State *L) {$/;"	f	file:
getdebt	liblua/lgc.c	/^static l_mem getdebt (global_State *g) {$/;"	f	file:
getdetails	liblua/lstrlib.c	/^static KOption getdetails (Header *h, size_t totalsize,$/;"	f	file:
getfield	liblua/loslib.c	/^static int getfield (lua_State *L, const char *key, int d, int delta) {$/;"	f	file:
getfreepos	liblua/ltable.c	/^static Node *getfreepos (Table *t) {$/;"	f	file:
getfuncline	liblua/ldebug.h	16;"	d
getfuncname	liblua/ldebug.c	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name) {$/;"	f	file:
getgeneric	liblua/ltable.c	/^static const TValue *getgeneric (Table *t, const TValue *key) {$/;"	f	file:
gethexa	liblua/llex.c	/^static int gethexa (LexState *ls) {$/;"	f	file:
getinstruction	liblua/lcode.h	44;"	d
getiofile	liblua/liolib.c	/^static FILE *getiofile (lua_State *L, const char *findex) {$/;"	f	file:
getjump	liblua/lcode.c	/^static int getjump (FuncState *fs, int pc) {$/;"	f	file:
getjumpcontrol	liblua/lcode.c	/^static Instruction *getjumpcontrol (FuncState *fs, int pc) {$/;"	f	file:
getlocvar	liblua/lparser.c	/^static LocVar *getlocvar (FuncState *fs, int i) {$/;"	f	file:
getnameinfo	nbase/getnameinfo.c	/^int getnameinfo(const struct sockaddr *sa, size_t salen,$/;"	f
getnum	liblua/lstrlib.c	/^static int getnum (const char **fmt, int df) {$/;"	f	file:
getnumlimit	liblua/lstrlib.c	/^static int getnumlimit (Header *h, const char **fmt, int df) {$/;"	f	file:
getoah	liblua/lstate.h	131;"	d
getobjname	liblua/ldebug.c	/^static const char *getobjname (Proto *p, int lastpc, int reg,$/;"	f	file:
getopt	nbase/getopt.c	/^int getopt(int argc, char * argv[], const char *opts)$/;"	f
getopt_long	nbase/getopt.c	/^int getopt_long(int argc, char * argv[], const char *shortopts,$/;"	f
getopt_long_only	nbase/getopt.c	/^int getopt_long_only(int argc, char * argv[], const char *shortopts,$/;"	f
getopt_reset	nbase/getopt.c	/^int getopt_reset(void)$/;"	f
getoption	liblua/lstrlib.c	/^static KOption getoption (Header *h, const char **fmt, int *size) {$/;"	f	file:
getpid	nbase/nbase.h	352;"	d
getproto	liblua/lobject.h	468;"	d
getstr	liblua/lobject.h	328;"	d
gettableProtected	liblua/lvm.c	774;"	d	file:
getthread	liblua/ldblib.c	/^static lua_State *getthread (lua_State *L, int *arg) {$/;"	f	file:
gettimeofday	nbase/nbase_time.c	/^int gettimeofday(struct timeval *tv, struct timeval *tz)$/;"	f
gettotalbytes	liblua/lstate.h	243;"	d
getudatamem	liblua/lobject.h	368;"	d
getunopr	liblua/lparser.c	/^static UnOpr getunopr (int op) {$/;"	f	file:
getupvalname	liblua/ldebug.c	/^static const char *getupvalname (CallInfo *ci, const TValue *o,$/;"	f	file:
getupvalref	liblua/lapi.c	/^static UpVal **getupvalref (lua_State *L, int fidx, int n, LClosure **pf) {$/;"	f	file:
getuservalue	liblua/lobject.h	377;"	d
gfasttm	liblua/ltm.h	48;"	d
gh_heap	nsock/src/gh_heap.h	/^typedef struct gh_heap {$/;"	s
gh_heap_cmp_t	nsock/src/gh_heap.h	/^typedef int (*gh_heap_cmp_t)(gh_hnode_t *hnode1, gh_hnode_t *hnode2);$/;"	t
gh_heap_count	nsock/src/gh_heap.h	/^static inline size_t gh_heap_count(gh_heap_t *heap) {$/;"	f
gh_heap_find	nsock/src/gh_heap.c	/^gh_hnode_t *gh_heap_find(gh_heap_t *heap, unsigned int index) {$/;"	f
gh_heap_free	nsock/src/gh_heap.c	/^void gh_heap_free(gh_heap_t *heap) {$/;"	f
gh_heap_init	nsock/src/gh_heap.c	/^int gh_heap_init(gh_heap_t *heap, gh_heap_cmp_t cmp_op) {$/;"	f
gh_heap_is_empty	nsock/src/gh_heap.h	/^static inline int gh_heap_is_empty(gh_heap_t *heap) {$/;"	f
gh_heap_min	nsock/src/gh_heap.h	/^static inline gh_hnode_t *gh_heap_min(gh_heap_t *heap) {$/;"	f
gh_heap_pop	nsock/src/gh_heap.h	/^static inline gh_hnode_t *gh_heap_pop(gh_heap_t *heap) {$/;"	f
gh_heap_push	nsock/src/gh_heap.c	/^int gh_heap_push(gh_heap_t *heap, gh_hnode_t *hnode) {$/;"	f
gh_heap_remove	nsock/src/gh_heap.c	/^int gh_heap_remove(gh_heap_t *heap, gh_hnode_t *hnode)$/;"	f
gh_heap_t	nsock/src/gh_heap.h	/^} gh_heap_t;$/;"	t	typeref:struct:gh_heap
gh_hnode_invalidate	nsock/src/gh_heap.h	/^static inline void gh_hnode_invalidate(gh_hnode_t *node) {$/;"	f
gh_hnode_is_valid	nsock/src/gh_heap.h	/^static inline int gh_hnode_is_valid(const gh_hnode_t *node) {$/;"	f
gh_hnode_t	nsock/src/gh_heap.h	/^} gh_hnode_t;$/;"	t	typeref:struct:__anon29
gh_list	nsock/src/gh_list.h	/^typedef struct gh_list {$/;"	s
gh_list_append	nsock/src/gh_list.h	/^static inline int gh_list_append(gh_list_t *list, gh_lnode_t *lnode) {$/;"	f
gh_list_count	nsock/src/gh_list.h	/^static inline unsigned int gh_list_count(gh_list_t *list) {$/;"	f
gh_list_first_elem	nsock/src/gh_list.h	/^static inline gh_lnode_t *gh_list_first_elem(gh_list_t *list) {$/;"	f
gh_list_free	nsock/src/gh_list.h	/^static inline int gh_list_free(gh_list_t *list) {$/;"	f
gh_list_init	nsock/src/gh_list.h	/^static inline int gh_list_init(gh_list_t *newlist) {$/;"	f
gh_list_insert_before	nsock/src/gh_list.h	/^static inline int gh_list_insert_before(gh_list_t *list, gh_lnode_t *before,$/;"	f
gh_list_last_elem	nsock/src/gh_list.h	/^static inline gh_lnode_t *gh_list_last_elem(gh_list_t *list) {$/;"	f
gh_list_move_front	nsock/src/gh_list.h	/^static inline int gh_list_move_front(gh_list_t *list, gh_lnode_t *lnode) {$/;"	f
gh_list_node	nsock/src/gh_list.h	/^typedef struct gh_list_node {$/;"	s
gh_list_pop	nsock/src/gh_list.h	/^static inline gh_lnode_t *gh_list_pop(gh_list_t *list) {$/;"	f
gh_list_prepend	nsock/src/gh_list.h	/^static inline int gh_list_prepend(gh_list_t *list, gh_lnode_t *lnode) {$/;"	f
gh_list_remove	nsock/src/gh_list.h	/^static inline int gh_list_remove(gh_list_t *list, gh_lnode_t *lnode) {$/;"	f
gh_list_t	nsock/src/gh_list.h	/^} gh_list_t;$/;"	t	typeref:struct:gh_list
gh_lnode_next	nsock/src/gh_list.h	/^static inline gh_lnode_t *gh_lnode_next(gh_lnode_t *elem) {$/;"	f
gh_lnode_prev	nsock/src/gh_list.h	/^static inline gh_lnode_t *gh_lnode_prev(gh_lnode_t *elem) {$/;"	f
gh_lnode_t	nsock/src/gh_list.h	/^} gh_lnode_t;$/;"	t	typeref:struct:gh_list_node
ghheap_ordering	nsock/tests/ghheaps.c	/^static int ghheap_ordering(void *tdata) {$/;"	f	file:
ghheap_stress	nsock/tests/ghheaps.c	/^static int ghheap_stress(void *tdata) {$/;"	f	file:
ghlist_stress	nsock/tests/ghlists.c	/^static int ghlist_stress(void *tdata) {$/;"	f	file:
gkey	liblua/ltable.h	19;"	d
globalL	liblua/lua.c	/^static lua_State *globalL = NULL;$/;"	v	file:
global_State	liblua/lstate.h	/^typedef struct global_State {$/;"	s
global_State	liblua/lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
gmatch	liblua/lstrlib.c	/^static int gmatch (lua_State *L) {$/;"	f	file:
gmatch_aux	liblua/lstrlib.c	/^static int gmatch_aux (lua_State *L) {$/;"	f	file:
gnext	liblua/ltable.h	15;"	d
gnode	liblua/ltable.h	13;"	d
gnodelast	liblua/lgc.c	107;"	d	file:
got_dbg	nsock/tests/logs.c	/^  unsigned int got_dbg: 1;$/;"	m	struct:log_test_data	file:
got_dbgfull	nsock/tests/logs.c	/^  unsigned int got_dbgfull: 1;$/;"	m	struct:log_test_data	file:
got_error	nsock/tests/logs.c	/^  unsigned int got_error: 1;$/;"	m	struct:log_test_data	file:
got_info	nsock/tests/logs.c	/^  unsigned int got_info: 1;$/;"	m	struct:log_test_data	file:
gotostat	liblua/lparser.c	/^static void gotostat (LexState *ls, int pc) {$/;"	f	file:
gray	liblua/lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State
gray2black	liblua/lgc.h	99;"	d
grayagain	liblua/lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State
growstack	liblua/lapi.c	/^static void growstack (lua_State *L, void *ud) {$/;"	f	file:
gt	liblua/lparser.h	/^  Labellist gt;  \/* list of pending gotos *\/$/;"	m	struct:Dyndata
gval	liblua/ltable.h	14;"	d
h	liblua/llex.h	/^  Table *h;  \/* to avoid collection\/reuse strings *\/$/;"	m	struct:LexState
h	liblua/lstate.h	/^  struct Table h;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Table
handle_connect_result	nsock/src/nsock_core.c	/^void handle_connect_result(struct npool *ms, struct nevent *nse, enum nse_status status) {$/;"	f
handle_luainit	liblua/lua.c	/^static int handle_luainit (lua_State *L) {$/;"	f	file:
handle_pcap_read_result	nsock/src/nsock_core.c	/^void handle_pcap_read_result(struct npool *ms, struct nevent *nse, enum nse_status status) {$/;"	f
handle_read_result	nsock/src/nsock_core.c	/^void handle_read_result(struct npool *ms, struct nevent *nse, enum nse_status status) {$/;"	f
handle_script	liblua/lua.c	/^static int handle_script (lua_State *L, char **argv) {$/;"	f	file:
handle_state_initial	nsock/src/proxy_http.c	/^static int handle_state_initial(struct npool *nsp, struct nevent *nse, void *udata) {$/;"	f	file:
handle_state_initial	nsock/src/proxy_socks4.c	/^static int handle_state_initial(struct npool *nsp, struct nevent *nse, void *udata) {$/;"	f	file:
handle_state_tcp_connected	nsock/src/proxy_http.c	/^static int handle_state_tcp_connected(struct npool *nsp, struct nevent *nse, void *udata) {$/;"	f	file:
handle_state_tcp_connected	nsock/src/proxy_socks4.c	/^static int handle_state_tcp_connected(struct npool *nsp, struct nevent *nse, void *udata) {$/;"	f	file:
handle_timer_result	nsock/src/nsock_core.c	/^void handle_timer_result(struct npool *ms, struct nevent *nse, enum nse_status status) {$/;"	f
handle_write_result	nsock/src/nsock_core.c	/^void handle_write_result(struct npool *ms, struct nevent *nse, enum nse_status status) {$/;"	f
handler	nsock/src/nsock_internal.h	/^  nsock_ev_handler handler;$/;"	m	struct:nevent
handler	nsock/src/nsock_proxy.h	/^  void (*handler)(nsock_pool nspool, nsock_event nsevent, void *udata);$/;"	m	struct:proxy_op
has_E	liblua/lua.c	457;"	d	file:
has_arg	nbase/getopt.h	/^  int has_arg;$/;"	m	struct:option
has_e	liblua/lua.c	456;"	d	file:
has_error	liblua/lua.c	453;"	d	file:
has_i	liblua/lua.c	454;"	d	file:
has_v	liblua/lua.c	455;"	d	file:
hash	liblua/lobject.h	/^  unsigned int hash;$/;"	m	struct:TString
hash	liblua/lstate.h	/^  TString **hash;$/;"	m	struct:stringtable
hashboolean	liblua/ltable.c	61;"	d	file:
hashint	liblua/ltable.c	62;"	d	file:
hashmod	liblua/ltable.c	69;"	d	file:
hashpointer	liblua/ltable.c	72;"	d	file:
hashpow2	liblua/ltable.c	58;"	d	file:
hashstr	liblua/ltable.c	60;"	d	file:
hasjumps	liblua/lcode.c	36;"	d	file:
hasmultret	liblua/lparser.c	37;"	d	file:
head	nbase/nbase_addrset.c	/^    struct addrset_elem *head;$/;"	m	struct:addrset	typeref:struct:addrset::addrset_elem	file:
heap_grow	nsock/src/gh_heap.c	/^static int heap_grow(gh_heap_t *heap) {$/;"	f	file:
hex_digit_value	nsock/src/nsock_proxy.c	/^static int hex_digit_value(char digit) {$/;"	f	file:
hexdump	nbase/nbase_misc.c	/^char *hexdump(const u8 *cp, u32 length){$/;"	f
hexify	nse_nsock.cc	/^static std::string hexify (const unsigned char *str, size_t len)$/;"	f	file:
highwm	nsock/src/gh_heap.h	/^  unsigned int highwm;$/;"	m	struct:gh_heap
hnext	liblua/lobject.h	/^    struct TString *hnext;  \/* linked list for hash table *\/$/;"	m	union:TString::__anon22	typeref:struct:TString::__anon22::TString
hnode_down	nsock/src/gh_heap.c	/^static int hnode_down(gh_heap_t *heap, gh_hnode_t *hnode)$/;"	f	file:
hnode_int_cmp	nsock/tests/ghheaps.c	/^static int hnode_int_cmp(gh_hnode_t *n1, gh_hnode_t *n2) {$/;"	f	file:
hnode_ptr	nsock/src/gh_heap.c	/^static gh_hnode_t **hnode_ptr(gh_heap_t *heap, unsigned int index) {$/;"	f	file:
hnode_up	nsock/src/gh_heap.c	/^static int hnode_up(gh_heap_t *heap, gh_hnode_t *hnode)$/;"	f	file:
hook	liblua/lstate.h	/^  volatile lua_Hook hook;$/;"	m	struct:lua_State
hookcount	liblua/lstate.h	/^  int hookcount;$/;"	m	struct:lua_State
hookf	liblua/ldblib.c	/^static void hookf (lua_State *L, lua_Debug *ar) {$/;"	f	file:
hookmask	liblua/lstate.h	/^  l_signalT hookmask;$/;"	m	struct:lua_State
host	nsock/src/nsock_proxy.h	/^  char *host;$/;"	m	struct:uri
hostname	nsock/src/nsock_internal.h	/^  char *hostname;$/;"	m	struct:niod
hvalue	liblua/lobject.h	175;"	d
i	liblua/llex.h	/^  lua_Integer i;$/;"	m	union:__anon19
i	liblua/llimits.h	/^  lua_Integer i;$/;"	m	union:__anon13
i	liblua/lobject.h	/^  lua_Integer i;   \/* integer numbers *\/$/;"	m	union:Value
i	liblua/lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon8	file:
i	nbase/nbase_rnd.c	/^  u8    i, j, s[256], *tmp;$/;"	m	struct:nrand_handle	file:
iABC	liblua/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABx	liblua/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAsBx	liblua/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAx	liblua/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
i_ci	liblua/lua.h	/^  struct CallInfo *i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug	typeref:struct:lua_Debug::CallInfo
i_key	liblua/lobject.h	/^  TKey i_key;$/;"	m	struct:Node
i_val	liblua/lobject.h	/^  TValue i_val;$/;"	m	struct:Node
id	nsock/src/nsock_internal.h	/^  nsock_event_id id;$/;"	m	struct:nevent
id	nsock/src/nsock_internal.h	/^  unsigned long id;$/;"	m	struct:niod
idx	liblua/lobject.h	/^  lu_byte idx;  \/* index of upvalue (in stack or in outer function's list) *\/$/;"	m	struct:Upvaldesc
idx	liblua/lparser.h	/^      short idx;  \/* index (R\/K) *\/$/;"	m	struct:expdesc::__anon16::__anon17
idx	liblua/lparser.h	/^  short idx;  \/* variable index in stack *\/$/;"	m	struct:Vardesc
if type(_index) 	nselib/strict.lua	/^    if type(_index) == "function" then$/;"	f
if type(_newindex) 	nselib/strict.lua	/^    if type(_newindex) == "function" then$/;"	f
ifstat	liblua/lparser.c	/^static void ifstat (LexState *ls, int line) {$/;"	f	file:
in_addr_to_octets	nbase/nbase_addrset.c	/^static void in_addr_to_octets(const struct in_addr *ia, uint8_t octets[4])$/;"	f	file:
inclinenumber	liblua/llex.c	/^static void inclinenumber (LexState *ls) {$/;"	f	file:
incomplete	liblua/lua.c	/^static int incomplete (lua_State *L, int status) {$/;"	f	file:
ind	liblua/lparser.h	/^    } ind;$/;"	m	union:expdesc::__anon16	typeref:struct:expdesc::__anon16::__anon17
index	nsock/src/gh_heap.h	/^  unsigned int index;$/;"	m	struct:__anon29
index2addr	liblua/lapi.c	/^static TValue *index2addr (lua_State *L, int idx) {$/;"	f	file:
inet_ntop	nbase/inet_ntop.c	/^inet_ntop(int af, const void *src, char *dst, size_t size)$/;"	f
inet_ntop4	nbase/inet_ntop.c	/^inet_ntop4(const unsigned char *src, char *dst, size_t size)$/;"	f	file:
inet_ntop6	nbase/inet_ntop.c	/^inet_ntop6(const unsigned char *src, char *dst, size_t size)$/;"	f	file:
inet_ntop_both	nse_nsock.cc	/^static const char *inet_ntop_both (int af, const void *v_addr, char *ipstring)$/;"	f	file:
inet_ntop_both	nse_nsock_tmp.cc	/^static const char *inet_ntop_both(int af, const void *v_addr, char *ipstring)$/;"	f	file:
inet_ntop_ez	nbase/nbase_misc.c	/^const char *inet_ntop_ez(const struct sockaddr_storage *ss, size_t sslen) {$/;"	f
inet_port_both	nse_nsock.cc	/^static unsigned short inet_port_both (int af, const void *v_addr)$/;"	f	file:
inet_port_both	nse_nsock_tmp.cc	/^static unsigned short inet_port_both(int af, const void *v_addr)$/;"	f	file:
inet_pton	nbase/inet_pton.c	/^inet_pton(int af, const char *src, void *dst)$/;"	f
inet_pton4	nbase/inet_pton.c	/^inet_pton4(const char *src, unsigned char *dst)$/;"	f	file:
inet_pton6	nbase/inet_pton.c	/^inet_pton6(const char *src, unsigned char *dst)$/;"	f	file:
info	liblua/lparser.h	/^    int info;  \/* for generic use *\/$/;"	m	union:expdesc::__anon16
inheritable_socket	nbase/nbase_misc.c	/^int inheritable_socket(int af, int style, int protocol) {$/;"	f
init	liblua/lstrlib.c	/^    const char *init;$/;"	m	struct:MatchState::__anon6	file:
init	nsock/src/nsock_internal.h	/^  int (*init)(struct npool *nsp);$/;"	m	struct:io_engine
init_exp	liblua/lparser.c	/^static void init_exp (expdesc *e, expkind k, int i) {$/;"	f	file:
init_main	nse_main.cc	/^static int init_main(lua_State *L)$/;"	f	file:
init_registry	liblua/lstate.c	/^static void init_registry (lua_State *L, global_State *g) {$/;"	f	file:
initb	liblua/lauxlib.h	/^  char initb[LUAL_BUFFERSIZE];  \/* initial buffer *\/$/;"	m	struct:luaL_Buffer
initheader	liblua/lstrlib.c	/^static void initheader (lua_State *L, Header *h) {$/;"	f	file:
initialize	nse_nsock.cc	/^static void initialize (lua_State *L, int idx, nse_nsock_udata *nu,$/;"	f	file:
initialize	nse_nsock_tmp.cc	/^static void initialize(lua_State *L, int idx, nse_nsock_udata *nu, int proto, int af)$/;"	f	file:
initiate_connect	nsock/src/engine_iocp.c	/^static void initiate_connect(struct npool *nsp, struct nevent *nse) {$/;"	f	file:
initiate_overlapped_event	nsock/src/engine_iocp.c	/^static void initiate_overlapped_event(struct npool *nsp, struct nevent *nse) {$/;"	f	file:
initiate_pcap_read	nsock/src/engine_iocp.c	/^static void initiate_pcap_read(struct npool *nsp, struct nevent *nse) {$/;"	f	file:
initiate_read	nsock/src/engine_iocp.c	/^static void initiate_read(struct npool *nsp, struct nevent *nse) {$/;"	f	file:
initiate_write	nsock/src/engine_iocp.c	/^static void initiate_write(struct npool *nsp, struct nevent *nse) {$/;"	f	file:
inline	nbase/nbase.h	379;"	d
instack	liblua/lobject.h	/^  lu_byte instack;  \/* whether it is in stack (register) *\/$/;"	m	struct:Upvaldesc
int16_t	nbase/nbase_winconfig.h	/^typedef signed __int16 int16_t;$/;"	t
int32_t	nbase/nbase_winconfig.h	/^typedef signed __int32 int32_t;$/;"	t
int64_t	nbase/nbase_winconfig.h	/^typedef signed __int64 int64_t;$/;"	t
int8_t	nbase/nbase_winconfig.h	/^typedef signed __int8 int8_t;$/;"	t
intarith	liblua/lobject.c	/^static lua_Integer intarith (lua_State *L, int op, lua_Integer v1,$/;"	f	file:
internshrstr	liblua/lstring.c	/^static TString *internshrstr (lua_State *L, const char *str, size_t l) {$/;"	f	file:
interror	liblua/lauxlib.c	/^static void interror (lua_State *L, int arg) {$/;"	f	file:
intop	liblua/lvm.h	46;"	d
invalidateTMcache	liblua/ltable.h	27;"	d
io_close	liblua/liolib.c	/^static int io_close (lua_State *L) {$/;"	f	file:
io_engine	nsock/src/nsock_internal.h	/^struct io_engine {$/;"	s
io_fclose	liblua/liolib.c	/^static int io_fclose (lua_State *L) {$/;"	f	file:
io_flush	liblua/liolib.c	/^static int io_flush (lua_State *L) {$/;"	f	file:
io_input	liblua/liolib.c	/^static int io_input (lua_State *L) {$/;"	f	file:
io_lines	liblua/liolib.c	/^static int io_lines (lua_State *L) {$/;"	f	file:
io_noclose	liblua/liolib.c	/^static int io_noclose (lua_State *L) {$/;"	f	file:
io_open	liblua/liolib.c	/^static int io_open (lua_State *L) {$/;"	f	file:
io_operations	nsock/src/nsock_internal.h	/^  struct io_operations *io_operations;$/;"	m	struct:io_engine	typeref:struct:io_engine::io_operations
io_operations	nsock/src/nsock_internal.h	/^struct io_operations {$/;"	s
io_output	liblua/liolib.c	/^static int io_output (lua_State *L) {$/;"	f	file:
io_pclose	liblua/liolib.c	/^static int io_pclose (lua_State *L) {$/;"	f	file:
io_popen	liblua/liolib.c	/^static int io_popen (lua_State *L) {$/;"	f	file:
io_read	liblua/liolib.c	/^static int io_read (lua_State *L) {$/;"	f	file:
io_readline	liblua/liolib.c	/^static int io_readline (lua_State *L) {$/;"	f	file:
io_tmpfile	liblua/liolib.c	/^static int io_tmpfile (lua_State *L) {$/;"	f	file:
io_type	liblua/liolib.c	/^static int io_type (lua_State *L) {$/;"	f	file:
io_write	liblua/liolib.c	/^static int io_write (lua_State *L) {$/;"	f	file:
iobuf	nsock/src/nsock_internal.h	/^  struct filespace iobuf;$/;"	m	struct:nevent	typeref:struct:nevent::filespace
iocp	nsock/src/engine_iocp.c	/^  HANDLE iocp;$/;"	m	struct:iocp_engine_info	file:
iocp_destroy	nsock/src/engine_iocp.c	/^void iocp_destroy(struct npool *nsp) {$/;"	f
iocp_engine_info	nsock/src/engine_iocp.c	/^struct iocp_engine_info {$/;"	s	file:
iocp_init	nsock/src/engine_iocp.c	/^int iocp_init(struct npool *nsp) {$/;"	f
iocp_io_operations	nsock/src/engine_iocp.c	/^struct io_operations iocp_io_operations = {$/;"	v	typeref:struct:io_operations
iocp_iod_connect	nsock/src/engine_iocp.c	/^int iocp_iod_connect(struct npool *nsp, int sockfd, const struct sockaddr *addr, socklen_t addrlen) {$/;"	f
iocp_iod_modify	nsock/src/engine_iocp.c	/^int iocp_iod_modify(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev_set, int ev_clr) {$/;"	f
iocp_iod_read	nsock/src/engine_iocp.c	/^int iocp_iod_read(struct npool *nsp, int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen) {$/;"	f
iocp_iod_register	nsock/src/engine_iocp.c	/^int iocp_iod_register(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev) {$/;"	f
iocp_iod_unregister	nsock/src/engine_iocp.c	/^int iocp_iod_unregister(struct npool *nsp, struct niod *iod) {$/;"	f
iocp_iod_write	nsock/src/engine_iocp.c	/^int iocp_iod_write(struct npool *nsp, int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen) {$/;"	f
iocp_loop	nsock/src/engine_iocp.c	/^int iocp_loop(struct npool *nsp, int msec_timeout) {$/;"	f
iod	nsock/src/nsock_internal.h	/^  struct niod *iod;$/;"	m	struct:nevent	typeref:struct:nevent::niod
iod_add_event	nsock/src/nsock_core.c	/^static int iod_add_event(struct niod *iod, struct nevent *nse) {$/;"	f	file:
iod_connect	nsock/src/nsock_internal.h	/^  int(*iod_connect)(struct npool *nsp, int sockfd, const struct sockaddr *addr, socklen_t addrlen);$/;"	m	struct:io_operations
iod_modify	nsock/src/nsock_internal.h	/^  int (*iod_modify)(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev_set, int ev_clr);$/;"	m	struct:io_engine
iod_read	nsock/src/nsock_internal.h	/^  int(*iod_read)(struct npool *nsp, int sockfd, void *buf, size_t len, int flags,$/;"	m	struct:io_operations
iod_register	nsock/src/nsock_internal.h	/^  int(*iod_register)(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev);$/;"	m	struct:io_engine
iod_state	nsock/src/nsock_internal.h	/^enum iod_state {$/;"	g
iod_unregister	nsock/src/nsock_internal.h	/^  int(*iod_unregister)(struct npool *nsp, struct niod *iod);$/;"	m	struct:io_engine
iod_write	nsock/src/nsock_internal.h	/^  int(*iod_write)(struct npool *nsp, int sockfd, const void *buf, size_t len, int flags,$/;"	m	struct:io_operations
iolib	liblua/liolib.c	/^static const luaL_Reg iolib[] = {$/;"	v	file:
ipairsaux	liblua/lbaselib.c	/^static int ipairsaux (lua_State *L) {$/;"	f	file:
ipopts	nsock/src/nsock_internal.h	/^  void *ipopts;$/;"	m	struct:niod
ipoptslen	nsock/src/nsock_internal.h	/^  int ipoptslen;$/;"	m	struct:niod
ipv4	nbase/nbase_addrset.c	/^  } ipv4;$/;"	m	struct:addrset_elem	typeref:struct:addrset_elem::__anon2	file:
isLfunction	liblua/lobject.h	466;"	d
isLua	liblua/lstate.h	127;"	d
is_pcap	nse_nsock.cc	/^  int is_pcap;$/;"	m	struct:nse_nsock_udata	file:
is_vararg	liblua/lobject.h	/^  lu_byte is_vararg;$/;"	m	struct:Proto
isblack	liblua/lgc.h	88;"	d
iscleared	liblua/lgc.c	/^static int iscleared (global_State *g, const TValue *o) {$/;"	f	file:
isclosed	liblua/liolib.c	147;"	d	file:
iscollectable	liblua/lobject.h	184;"	d
iscont	liblua/lutf8lib.c	25;"	d	file:
isdead	liblua/lgc.h	96;"	d
isdeadm	liblua/lgc.h	95;"	d
isdummy	liblua/ltable.h	31;"	d
isemptystr	liblua/lvm.c	457;"	d	file:
isgray	liblua/lgc.h	89;"	d
isinstack	liblua/ldebug.c	/^static int isinstack (CallInfo *ci, const TValue *o) {$/;"	f	file:
isintwups	liblua/lfunc.h	22;"	d
islittle	liblua/lstrlib.c	/^  int islittle;$/;"	m	struct:Header	file:
isloop	liblua/lparser.c	/^  lu_byte isloop;  \/* true if 'block' is a loop *\/$/;"	m	struct:BlockCnt	file:
isneg	liblua/lobject.c	/^static int isneg (const char **s) {$/;"	f	file:
ispseudo	liblua/lapi.c	46;"	d	file:
isreserved	liblua/lstring.h	27;"	d
isstackindex	liblua/lapi.c	52;"	d	file:
issweepphase	liblua/lgc.h	49;"	d
istailcall	liblua/lua.h	/^  char istailcall;	\/* (t) *\/$/;"	m	struct:lua_Debug
isupvalue	liblua/lapi.c	49;"	d	file:
isvalid	liblua/lapi.c	43;"	d	file:
isvararg	liblua/lua.h	/^  char isvararg;        \/* (u) *\/$/;"	m	struct:lua_Debug
iswhite	liblua/lgc.h	87;"	d
iter_aux	liblua/lutf8lib.c	/^static int iter_aux (lua_State *L) {$/;"	f	file:
iter_codes	liblua/lutf8lib.c	/^static int iter_codes (lua_State *L) {$/;"	f	file:
iterate_through_event_lists	nsock/src/engine_epoll.c	/^void iterate_through_event_lists(struct npool *nsp, int evcount) {$/;"	f
iterate_through_event_lists	nsock/src/engine_iocp.c	/^void iterate_through_event_lists(struct npool *nsp) {$/;"	f
iterate_through_event_lists	nsock/src/engine_kqueue.c	/^void iterate_through_event_lists(struct npool *nsp, int evcount) {$/;"	f
iterate_through_event_lists	nsock/src/engine_poll.c	/^void iterate_through_event_lists(struct npool *nsp) {$/;"	f
iterate_through_event_lists	nsock/src/engine_select.c	/^void iterate_through_event_lists(struct npool *nsp) {$/;"	f
ival	liblua/lparser.h	/^    lua_Integer ival;    \/* for VKINT *\/$/;"	m	union:expdesc::__anon16
ivalue	liblua/lobject.h	163;"	d
j	nbase/nbase_rnd.c	/^  u8    i, j, s[256], *tmp;$/;"	m	struct:nrand_handle	file:
jpc	liblua/lparser.h	/^  int jpc;  \/* list of pending jumps to 'pc' *\/$/;"	m	struct:FuncState
jumponcond	liblua/lcode.c	/^static int jumponcond (FuncState *fs, expdesc *e, int cond) {$/;"	f	file:
k	liblua/lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto
k	liblua/lparser.h	/^  expkind k;$/;"	m	struct:expdesc
k	liblua/lstate.h	/^      lua_KFunction k;  \/* continuation in case of yields *\/$/;"	m	struct:CallInfo::__anon3::__anon5
keepinvariant	liblua/lgc.h	61;"	d
keyfromval	liblua/ltable.h	39;"	d
kname	liblua/ldebug.c	/^static void kname (Proto *p, int pc, int c, const char **name) {$/;"	f	file:
kqfd	nsock/src/engine_kqueue.c	/^  int kqfd;$/;"	m	struct:kqueue_engine_info	file:
kqueue_destroy	nsock/src/engine_kqueue.c	/^void kqueue_destroy(struct npool *nsp) {$/;"	f
kqueue_engine_info	nsock/src/engine_kqueue.c	/^struct kqueue_engine_info {$/;"	s	file:
kqueue_init	nsock/src/engine_kqueue.c	/^int kqueue_init(struct npool *nsp) {$/;"	f
kqueue_iod_modify	nsock/src/engine_kqueue.c	/^int kqueue_iod_modify(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev_set, int ev_clr) {$/;"	f
kqueue_iod_register	nsock/src/engine_kqueue.c	/^int kqueue_iod_register(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev) {$/;"	f
kqueue_iod_unregister	nsock/src/engine_kqueue.c	/^int kqueue_iod_unregister(struct npool *nsp, struct niod *iod) {$/;"	f
kqueue_loop	nsock/src/engine_kqueue.c	/^int kqueue_loop(struct npool *nsp, int msec_timeout) {$/;"	f
l	liblua/llimits.h	/^  long l;$/;"	m	union:__anon13
l	liblua/lobject.h	/^  LClosure l;$/;"	m	union:Closure
l	liblua/lstate.c	/^  LX l;$/;"	m	struct:LG	file:
l	liblua/lstate.c	/^  lua_State l;$/;"	m	struct:LX	file:
l	liblua/lstate.h	/^    } l;$/;"	m	union:CallInfo::__anon3	typeref:struct:CallInfo::__anon3::__anon4
l3_offset	nsock/src/nsock_pcap.h	/^  int l3_offset;$/;"	m	struct:__anon27
l_G	liblua/lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State
l_alloc	liblua/lauxlib.c	/^static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f	file:
l_bind	nse_nsock.cc	/^static int l_bind (lua_State *L)$/;"	f	file:
l_castS2U	liblua/llimits.h	122;"	d
l_castU2S	liblua/llimits.h	131;"	d
l_checkmode	liblua/liolib.c	/^static int l_checkmode (const char *mode) {$/;"	f	file:
l_checktime	liblua/loslib.c	/^static time_t l_checktime (lua_State *L, int arg) {$/;"	f	file:
l_close	nse_nsock.cc	/^static int l_close (lua_State *L)$/;"	f	file:
l_close	nse_nsock_tmp.cc	/^static int l_close(lua_State *L)$/;"	f	file:
l_connect	nse_nsock.cc	/^static int l_connect (lua_State *L)$/;"	f	file:
l_connect	nse_nsock_tmp.cc	/^static int l_connect(lua_State *L)$/;"	f	file:
l_floor	liblua/luaconf.h	434;"	d
l_fseek	liblua/liolib.c	110;"	d	file:
l_fseek	liblua/liolib.c	118;"	d	file:
l_fseek	liblua/liolib.c	125;"	d	file:
l_ftell	liblua/liolib.c	111;"	d	file:
l_ftell	liblua/liolib.c	119;"	d	file:
l_ftell	liblua/liolib.c	126;"	d	file:
l_get_info	nse_nsock.cc	/^static int l_get_info (lua_State *L)$/;"	f	file:
l_get_info	nse_nsock_tmp.cc	/^static int l_get_info(lua_State *L)$/;"	f	file:
l_get_ssl_certificate	nse_nsock.cc	/^int l_get_ssl_certificate (lua_State *L)$/;"	f
l_get_stats	nse_nsock.cc	/^static int l_get_stats (lua_State *L) {$/;"	f	file:
l_getc	liblua/liolib.c	86;"	d	file:
l_getc	liblua/liolib.c	90;"	d	file:
l_gmtime	liblua/loslib.c	86;"	d	file:
l_gmtime	liblua/loslib.c	92;"	d	file:
l_hashfloat	liblua/ltable.c	/^static int l_hashfloat (lua_Number n) {$/;"	f	file:
l_inspectstat	liblua/lauxlib.c	261;"	d	file:
l_inspectstat	liblua/lauxlib.c	267;"	d	file:
l_intfitsf	liblua/lvm.c	59;"	d	file:
l_isfalse	liblua/lobject.h	181;"	d
l_localtime	liblua/loslib.c	87;"	d	file:
l_localtime	liblua/loslib.c	93;"	d	file:
l_lockfile	liblua/liolib.c	87;"	d	file:
l_lockfile	liblua/liolib.c	91;"	d	file:
l_loop	nse_nsock.cc	/^static int l_loop (lua_State *L)$/;"	f	file:
l_loop	nse_nsock_tmp.cc	/^static int l_loop(lua_State *L)$/;"	f	file:
l_mathlim	liblua/luaconf.h	459;"	d
l_mathlim	liblua/luaconf.h	475;"	d
l_mathlim	liblua/luaconf.h	490;"	d
l_mathop	liblua/luaconf.h	466;"	d
l_mathop	liblua/luaconf.h	482;"	d
l_mathop	liblua/luaconf.h	497;"	d
l_mathop	liblua/luaconf.h	649;"	d
l_mathop	liblua/luaconf.h	651;"	d
l_mem	liblua/llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t
l_mem	liblua/llimits.h	/^typedef long l_mem;$/;"	t
l_mem	liblua/llimits.h	/^typedef ptrdiff_t l_mem;$/;"	t
l_message	liblua/lua.c	/^static void l_message (const char *pname, const char *msg) {$/;"	f	file:
l_new	nse_nsock.cc	/^static int l_new (lua_State *L)$/;"	f	file:
l_new	nse_nsock_tmp.cc	/^static int l_new(lua_State *L)$/;"	f	file:
l_noret	liblua/llimits.h	139;"	d
l_noret	liblua/llimits.h	141;"	d
l_noret	liblua/llimits.h	143;"	d
l_parse_ssl_certificate	nse_nsock.cc	/^int l_parse_ssl_certificate(lua_State *L)$/;"	f
l_pcap_open	nse_nsock.cc	/^static int l_pcap_open (lua_State *L)$/;"	f	file:
l_pcap_receive	nse_nsock.cc	/^static int l_pcap_receive (lua_State *L)$/;"	f	file:
l_pclose	liblua/liolib.c	60;"	d	file:
l_pclose	liblua/liolib.c	65;"	d	file:
l_pclose	liblua/liolib.c	74;"	d	file:
l_popen	liblua/liolib.c	59;"	d	file:
l_popen	liblua/liolib.c	64;"	d	file:
l_popen	liblua/liolib.c	70;"	d	file:
l_print	liblua/lua.c	/^static void l_print (lua_State *L) {$/;"	f	file:
l_pushtime	liblua/loslib.c	67;"	d	file:
l_rand	liblua/lmathlib.c	28;"	d	file:
l_rand	liblua/lmathlib.c	32;"	d	file:
l_randomizePivot	liblua/ltablib.c	/^static unsigned int l_randomizePivot (void) {$/;"	f	file:
l_receive	nse_nsock.cc	/^static int l_receive (lua_State *L)$/;"	f	file:
l_receive	nse_nsock_tmp.cc	/^static int l_receive(lua_State *L)$/;"	f	file:
l_receive_buf	nse_nsock.cc	/^static int l_receive_buf (lua_State *L)$/;"	f	file:
l_receive_bytes	nse_nsock.cc	/^static int l_receive_bytes (lua_State *L)$/;"	f	file:
l_receive_lines	nse_nsock.cc	/^static int l_receive_lines (lua_State *L)$/;"	f	file:
l_reconnect_ssl	nse_nsock.cc	/^static int l_reconnect_ssl (lua_State *L)$/;"	f	file:
l_registry	liblua/lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State
l_seeknum	liblua/liolib.c	112;"	d	file:
l_seeknum	liblua/liolib.c	120;"	d	file:
l_seeknum	liblua/liolib.c	127;"	d	file:
l_send	nse_nsock.cc	/^static int l_send (lua_State *L)$/;"	f	file:
l_send	nse_nsock_tmp.cc	/^static int l_send(lua_State *L)$/;"	f	file:
l_sendto	nse_nsock.cc	/^static int l_sendto (lua_State *L)$/;"	f	file:
l_sendto	nse_nsock_tmp.cc	/^static int l_sendto(lua_State *L)$/;"	f	file:
l_set_timeout	nse_nsock.cc	/^static int l_set_timeout (lua_State *L)$/;"	f	file:
l_set_timeout	nse_nsock_tmp.cc	/^static int l_set_timeout(lua_State *L)$/;"	f	file:
l_setbit	liblua/lgc.h	72;"	d
l_signalT	liblua/lstate.h	60;"	d
l_sleep	nse_nsock.cc	/^static int l_sleep (lua_State *L)$/;"	f	file:
l_sprintf	liblua/luaconf.h	606;"	d
l_sprintf	liblua/luaconf.h	608;"	d
l_srand	liblua/lmathlib.c	29;"	d	file:
l_srand	liblua/lmathlib.c	33;"	d	file:
l_str2d	liblua/lobject.c	/^static const char *l_str2d (const char *s, lua_Number *result) {$/;"	f	file:
l_str2dloc	liblua/lobject.c	/^static const char *l_str2dloc (const char *s, lua_Number *result, int mode) {$/;"	f	file:
l_str2int	liblua/lobject.c	/^static const char *l_str2int (const char *s, lua_Integer *result) {$/;"	f	file:
l_strcmp	liblua/lvm.c	/^static int l_strcmp (const TString *ls, const TString *rs) {$/;"	f	file:
l_timet	liblua/loslib.c	66;"	d	file:
l_uacInt	liblua/llimits.h	/^typedef LUAI_UACINT l_uacInt;$/;"	t
l_uacNumber	liblua/llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t
l_unlockfile	liblua/liolib.c	88;"	d	file:
l_unlockfile	liblua/liolib.c	92;"	d	file:
label	liblua/lparser.h	/^  Labellist label;   \/* list of active labels *\/$/;"	m	struct:Dyndata
labelstat	liblua/lparser.c	/^static void labelstat (LexState *ls, TString *label, int line) {$/;"	f	file:
laction	liblua/lua.c	/^static void laction (int i) {$/;"	f	file:
lapi_c	liblua/lapi.c	7;"	d	file:
lapi_h	liblua/lapi.h	8;"	d
last	nsock/src/gh_list.h	/^  gh_lnode_t *last;$/;"	m	struct:gh_list
lastfree	liblua/lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table
lastlevel	liblua/lauxlib.c	/^static int lastlevel (lua_State *L) {$/;"	f	file:
lastline	liblua/llex.h	/^  int lastline;  \/* line of last token 'consumed' *\/$/;"	m	struct:LexState
lastlinedefined	liblua/lobject.h	/^  int lastlinedefined;  \/* debug information  *\/$/;"	m	struct:Proto
lastlinedefined	liblua/lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lastlistfield	liblua/lparser.c	/^static void lastlistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
lastmatch	liblua/lstrlib.c	/^  const char *lastmatch;  \/* end of last match *\/$/;"	m	struct:GMatchState	file:
lastproto	nsock/src/nsock_internal.h	/^  int lastproto;$/;"	m	struct:niod
lasttarget	liblua/lparser.h	/^  int lasttarget;   \/* 'label' of last 'jump label' *\/$/;"	m	struct:FuncState
latest_readstdinev	nsock/examples/nsock_telnet.c	/^  nsock_event_id latest_readstdinev;$/;"	m	struct:telnet_state	file:
latest_readtcpev	nsock/examples/nsock_telnet.c	/^  nsock_event_id latest_readtcpev;$/;"	m	struct:telnet_state	file:
latest_writetcpev	nsock/examples/nsock_telnet.c	/^  nsock_event_id latest_writetcpev;$/;"	m	struct:telnet_state	file:
lauxlib_c	liblua/lauxlib.c	7;"	d	file:
lauxlib_h	liblua/lauxlib.h	9;"	d
lbaselib_c	liblua/lbaselib.c	7;"	d	file:
lbitlib_c	liblua/lbitlib.c	7;"	d	file:
lcode_c	liblua/lcode.c	7;"	d	file:
lcode_h	liblua/lcode.h	8;"	d
lcorolib_c	liblua/lcorolib.c	7;"	d	file:
lctype_c	liblua/lctype.c	7;"	d	file:
lctype_h	liblua/lctype.h	8;"	d
ldblib_c	liblua/ldblib.c	7;"	d	file:
ldebug_c	liblua/ldebug.c	7;"	d	file:
ldebug_h	liblua/ldebug.h	8;"	d
ldo_c	liblua/ldo.c	7;"	d	file:
ldo_h	liblua/ldo.h	8;"	d
ldump_c	liblua/ldump.c	7;"	d	file:
leaveblock	liblua/lparser.c	/^static void leaveblock (FuncState *fs) {$/;"	f	file:
leavelevel	liblua/lparser.c	338;"	d	file:
left	liblua/lparser.c	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anon12	file:
len	liblua/lobject.h	/^  size_t len;  \/* number of bytes *\/$/;"	m	struct:Udata
len	liblua/lstrlib.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon6	file:
len	nsock/src/nsock_pcap.h	/^  int len;$/;"	m	struct:__anon28
level	liblua/lstrlib.c	/^  unsigned char level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	file:
level	nsock/include/nsock.h	/^  nsock_loglevel_t level;$/;"	m	struct:nsock_log_rec
lexerror	liblua/llex.c	/^static l_noret lexerror (LexState *ls, const char *msg, int token) {$/;"	f	file:
lfunc_c	liblua/lfunc.c	7;"	d	file:
lfunc_h	liblua/lfunc.h	8;"	d
lgc_c	liblua/lgc.c	7;"	d	file:
lgc_h	liblua/lgc.h	8;"	d
libsize	liblua/lauxlib.c	/^static int libsize (const luaL_Reg *l) {$/;"	f	file:
line	liblua/lparser.h	/^  int line;  \/* line where it appeared *\/$/;"	m	struct:Labeldesc
line	nsock/include/nsock.h	/^  int line;$/;"	m	struct:nsock_log_rec
linedefined	liblua/lobject.h	/^  int linedefined;  \/* debug information  *\/$/;"	m	struct:Proto
linedefined	liblua/lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lineinfo	liblua/lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines (debug information) *\/$/;"	m	struct:Proto
linenumber	liblua/llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState
linit_c	liblua/linit.c	8;"	d	file:
linkgclist	liblua/lgc.c	113;"	d	file:
liolib_c	liblua/liolib.c	7;"	d	file:
lisdigit	liblua/lctype.h	59;"	d
lisdigit	liblua/lctype.h	85;"	d
lislalnum	liblua/lctype.h	58;"	d
lislalnum	liblua/lctype.h	84;"	d
lislalpha	liblua/lctype.h	57;"	d
lislalpha	liblua/lctype.h	83;"	d
lisprint	liblua/lctype.h	61;"	d
lisprint	liblua/lctype.h	87;"	d
lisspace	liblua/lctype.h	60;"	d
lisspace	liblua/lctype.h	86;"	d
listfield	liblua/lparser.c	/^static void listfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
listing	liblua/luac.c	/^static int listing=0;			\/* list bytecodes? *\/$/;"	v	file:
lisxdigit	liblua/lctype.h	62;"	d
lisxdigit	liblua/lctype.h	88;"	d
little	liblua/lstrlib.c	/^  char little;  \/* true iff machine is little endian *\/$/;"	m	union:__anon7	file:
ll_funcs	liblua/loadlib.c	/^static const luaL_Reg ll_funcs[] = {$/;"	v	file:
ll_loadlib	liblua/loadlib.c	/^static int ll_loadlib (lua_State *L) {$/;"	f	file:
ll_module	liblua/loadlib.c	/^static int ll_module (lua_State *L) {$/;"	f	file:
ll_require	liblua/loadlib.c	/^static int ll_require (lua_State *L) {$/;"	f	file:
ll_searchpath	liblua/loadlib.c	/^static int ll_searchpath (lua_State *L) {$/;"	f	file:
ll_seeall	liblua/loadlib.c	/^static int ll_seeall (lua_State *L) {$/;"	f	file:
llex	liblua/llex.c	/^static int llex (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
llex_c	liblua/llex.c	7;"	d	file:
llex_h	liblua/llex.h	8;"	d
llimits_h	liblua/llimits.h	8;"	d
lmathlib_c	liblua/lmathlib.c	7;"	d	file:
lmem_c	liblua/lmem.c	7;"	d	file:
lmem_h	liblua/lmem.h	8;"	d
lmemfind	liblua/lstrlib.c	/^static const char *lmemfind (const char *s1, size_t l1,$/;"	f	file:
lmod	liblua/lobject.h	514;"	d
lnglen	liblua/lobject.h	/^    size_t lnglen;  \/* length for long strings *\/$/;"	m	union:TString::__anon22
lnode	nsock/tests/ghlists.c	/^  gh_lnode_t lnode;$/;"	m	struct:testlist	file:
lnode_nevent	nsock/src/nsock_internal.h	/^static inline struct nevent *lnode_nevent(gh_lnode_t *lnode) {$/;"	f
lnode_nevent2	nsock/src/nsock_internal.h	/^static inline struct nevent *lnode_nevent2(gh_lnode_t *lnode) {$/;"	f
load_aux	liblua/lbaselib.c	/^static int load_aux (lua_State *L, int status, int envidx) {$/;"	f	file:
loadedlibs	liblua/linit.c	/^static const luaL_Reg loadedlibs[] = {$/;"	v	file:
loader	nselib/nse_main.lua	/^	local function loader(lib)$/;"	f
loadfunc	liblua/loadlib.c	/^static int loadfunc (lua_State *L, const char *filename, const char *modname) {$/;"	f	file:
loadlib_c	liblua/loadlib.c	11;"	d	file:
loadline	liblua/lua.c	/^static int loadline (lua_State *L) {$/;"	f	file:
lobject_c	liblua/lobject.c	7;"	d	file:
lobject_h	liblua/lobject.h	9;"	d
local	nsock/src/nsock_internal.h	/^  struct sockaddr_storage local;$/;"	m	struct:niod	typeref:struct:niod::sockaddr_storage
localfunc	liblua/lparser.c	/^static void localfunc (LexState *ls) {$/;"	f	file:
locallen	nsock/src/nsock_internal.h	/^  size_t locallen;$/;"	m	struct:niod
localstat	liblua/lparser.c	/^static void localstat (LexState *ls) {$/;"	f	file:
locvars	liblua/lobject.h	/^  LocVar *locvars;  \/* information about local variables (debug information) *\/$/;"	m	struct:Proto
log_check_err_levels	nsock/tests/logs.c	/^static int log_check_err_levels(void *tdata) {$/;"	f	file:
log_check_std_levels	nsock/tests/logs.c	/^static int log_check_std_levels(void *tdata) {$/;"	f	file:
log_debug	nbase/nbase_addrset.c	/^static void (*log_debug)(const char *, ...) = default_log_debug;$/;"	v	file:
log_handler	nsock/tests/logs.c	/^static void log_handler(const struct nsock_log_rec *rec) {$/;"	f	file:
log_setup	nsock/tests/logs.c	/^static int log_setup(void **tdata) {$/;"	f	file:
log_teardown	nsock/tests/logs.c	/^static int log_teardown(void *tdata) {$/;"	f	file:
log_test_data	nsock/tests/logs.c	/^struct log_test_data {$/;"	s	file:
log_user	nbase/nbase_addrset.c	/^static void (*log_user)(const char *, ...) = default_log_user;$/;"	v	file:
lookahead	liblua/llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState
lookforfunc	liblua/loadlib.c	/^static int lookforfunc (lua_State *L, const char *path, const char *sym) {$/;"	f	file:
loop	nsock/src/nsock_internal.h	/^  int (*loop)(struct npool *nsp, int msec_timeout);$/;"	m	struct:io_engine
lopcodes_c	liblua/lopcodes.c	7;"	d	file:
lopcodes_h	liblua/lopcodes.h	8;"	d
loslib_c	liblua/loslib.c	7;"	d	file:
lower_max_fd	nsock/src/engine_poll.c	/^static inline int lower_max_fd(struct poll_engine_info *pinfo) {$/;"	f	file:
lowercase	nsock/src/nsock_proxy.c	/^static int lowercase(char *s) {$/;"	f	file:
lparser_c	liblua/lparser.c	7;"	d	file:
lparser_h	liblua/lparser.h	8;"	d
lprefix_h	liblua/lprefix.h	8;"	d
ls	liblua/lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::LexState
lsizenode	liblua/lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of 'node' array *\/$/;"	m	struct:Table
lstate_c	liblua/lstate.c	7;"	d	file:
lstate_h	liblua/lstate.h	8;"	d
lstop	liblua/lua.c	/^static void lstop (lua_State *L, lua_Debug *ar) {$/;"	f	file:
lstring_c	liblua/lstring.c	7;"	d	file:
lstring_h	liblua/lstring.h	8;"	d
lstrlib_c	liblua/lstrlib.c	7;"	d	file:
lsys_load	liblua/loadlib.c	/^static void *lsys_load (lua_State *L, const char *path, int seeglb) {$/;"	f	file:
lsys_sym	liblua/loadlib.c	/^static lua_CFunction lsys_sym (lua_State *L, void *lib, const char *sym) {$/;"	f	file:
lsys_unloadlib	liblua/loadlib.c	/^static void lsys_unloadlib (void *lib) {$/;"	f	file:
ltable_c	liblua/ltable.c	7;"	d	file:
ltable_h	liblua/ltable.h	8;"	d
ltablib_c	liblua/ltablib.c	7;"	d	file:
ltm_c	liblua/ltm.c	7;"	d	file:
ltm_h	liblua/ltm.h	8;"	d
ltolower	liblua/lctype.h	67;"	d
ltolower	liblua/lctype.h	90;"	d
lu_byte	liblua/llimits.h	/^typedef unsigned char lu_byte;$/;"	t
lu_mem	liblua/llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t
lu_mem	liblua/llimits.h	/^typedef size_t lu_mem;$/;"	t
lu_mem	liblua/llimits.h	/^typedef unsigned long lu_mem;$/;"	t
luaB_assert	liblua/lbaselib.c	/^static int luaB_assert (lua_State *L) {$/;"	f	file:
luaB_auxwrap	liblua/lcorolib.c	/^static int luaB_auxwrap (lua_State *L) {$/;"	f	file:
luaB_cocreate	liblua/lcorolib.c	/^static int luaB_cocreate (lua_State *L) {$/;"	f	file:
luaB_collectgarbage	liblua/lbaselib.c	/^static int luaB_collectgarbage (lua_State *L) {$/;"	f	file:
luaB_coresume	liblua/lcorolib.c	/^static int luaB_coresume (lua_State *L) {$/;"	f	file:
luaB_corunning	liblua/lcorolib.c	/^static int luaB_corunning (lua_State *L) {$/;"	f	file:
luaB_costatus	liblua/lcorolib.c	/^static int luaB_costatus (lua_State *L) {$/;"	f	file:
luaB_cowrap	liblua/lcorolib.c	/^static int luaB_cowrap (lua_State *L) {$/;"	f	file:
luaB_dofile	liblua/lbaselib.c	/^static int luaB_dofile (lua_State *L) {$/;"	f	file:
luaB_error	liblua/lbaselib.c	/^static int luaB_error (lua_State *L) {$/;"	f	file:
luaB_getmetatable	liblua/lbaselib.c	/^static int luaB_getmetatable (lua_State *L) {$/;"	f	file:
luaB_ipairs	liblua/lbaselib.c	/^static int luaB_ipairs (lua_State *L) {$/;"	f	file:
luaB_load	liblua/lbaselib.c	/^static int luaB_load (lua_State *L) {$/;"	f	file:
luaB_loadfile	liblua/lbaselib.c	/^static int luaB_loadfile (lua_State *L) {$/;"	f	file:
luaB_next	liblua/lbaselib.c	/^static int luaB_next (lua_State *L) {$/;"	f	file:
luaB_pairs	liblua/lbaselib.c	/^static int luaB_pairs (lua_State *L) {$/;"	f	file:
luaB_pcall	liblua/lbaselib.c	/^static int luaB_pcall (lua_State *L) {$/;"	f	file:
luaB_print	liblua/lbaselib.c	/^static int luaB_print (lua_State *L) {$/;"	f	file:
luaB_rawequal	liblua/lbaselib.c	/^static int luaB_rawequal (lua_State *L) {$/;"	f	file:
luaB_rawget	liblua/lbaselib.c	/^static int luaB_rawget (lua_State *L) {$/;"	f	file:
luaB_rawlen	liblua/lbaselib.c	/^static int luaB_rawlen (lua_State *L) {$/;"	f	file:
luaB_rawset	liblua/lbaselib.c	/^static int luaB_rawset (lua_State *L) {$/;"	f	file:
luaB_select	liblua/lbaselib.c	/^static int luaB_select (lua_State *L) {$/;"	f	file:
luaB_setmetatable	liblua/lbaselib.c	/^static int luaB_setmetatable (lua_State *L) {$/;"	f	file:
luaB_tonumber	liblua/lbaselib.c	/^static int luaB_tonumber (lua_State *L) {$/;"	f	file:
luaB_tostring	liblua/lbaselib.c	/^static int luaB_tostring (lua_State *L) {$/;"	f	file:
luaB_type	liblua/lbaselib.c	/^static int luaB_type (lua_State *L) {$/;"	f	file:
luaB_xpcall	liblua/lbaselib.c	/^static int luaB_xpcall (lua_State *L) {$/;"	f	file:
luaB_yield	liblua/lcorolib.c	/^static int luaB_yield (lua_State *L) {$/;"	f	file:
luaB_yieldable	liblua/lcorolib.c	/^static int luaB_yieldable (lua_State *L) {$/;"	f	file:
luaC_barrier	liblua/lgc.h	118;"	d
luaC_barrier_	liblua/lgc.c	/^void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {$/;"	f
luaC_barrierback	liblua/lgc.h	122;"	d
luaC_barrierback_	liblua/lgc.c	/^void luaC_barrierback_ (lua_State *L, Table *t) {$/;"	f
luaC_checkGC	liblua/lgc.h	115;"	d
luaC_checkfinalizer	liblua/lgc.c	/^void luaC_checkfinalizer (lua_State *L, GCObject *o, Table *mt) {$/;"	f
luaC_condGC	liblua/lgc.h	110;"	d
luaC_fix	liblua/lgc.c	/^void luaC_fix (lua_State *L, GCObject *o) {$/;"	f
luaC_freeallobjects	liblua/lgc.c	/^void luaC_freeallobjects (lua_State *L) {$/;"	f
luaC_fullgc	liblua/lgc.c	/^void luaC_fullgc (lua_State *L, int isemergency) {$/;"	f
luaC_newobj	liblua/lgc.c	/^GCObject *luaC_newobj (lua_State *L, int tt, size_t sz) {$/;"	f
luaC_objbarrier	liblua/lgc.h	126;"	d
luaC_runtilstate	liblua/lgc.c	/^void luaC_runtilstate (lua_State *L, int statesmask) {$/;"	f
luaC_step	liblua/lgc.c	/^void luaC_step (lua_State *L) {$/;"	f
luaC_upvalbarrier	liblua/lgc.h	130;"	d
luaC_upvalbarrier_	liblua/lgc.c	/^void luaC_upvalbarrier_ (lua_State *L, UpVal *uv) {$/;"	f
luaC_upvdeccount	liblua/lgc.c	/^void luaC_upvdeccount (lua_State *L, UpVal *uv) {$/;"	f
luaC_white	liblua/lgc.h	101;"	d
luaD_call	liblua/ldo.c	/^void luaD_call (lua_State *L, StkId func, int nResults) {$/;"	f
luaD_callnoyield	liblua/ldo.c	/^void luaD_callnoyield (lua_State *L, StkId func, int nResults) {$/;"	f
luaD_checkstack	liblua/ldo.h	28;"	d
luaD_checkstackaux	liblua/ldo.h	23;"	d
luaD_growstack	liblua/ldo.c	/^void luaD_growstack (lua_State *L, int n) {$/;"	f
luaD_hook	liblua/ldo.c	/^void luaD_hook (lua_State *L, int event, int line) {$/;"	f
luaD_inctop	liblua/ldo.c	/^void luaD_inctop (lua_State *L) {$/;"	f
luaD_pcall	liblua/ldo.c	/^int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	f
luaD_poscall	liblua/ldo.c	/^int luaD_poscall (lua_State *L, CallInfo *ci, StkId firstResult, int nres) {$/;"	f
luaD_precall	liblua/ldo.c	/^int luaD_precall (lua_State *L, StkId func, int nresults) {$/;"	f
luaD_protectedparser	liblua/ldo.c	/^int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,$/;"	f
luaD_rawrunprotected	liblua/ldo.c	/^int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {$/;"	f
luaD_reallocstack	liblua/ldo.c	/^void luaD_reallocstack (lua_State *L, int newsize) {$/;"	f
luaD_shrinkstack	liblua/ldo.c	/^void luaD_shrinkstack (lua_State *L) {$/;"	f
luaD_throw	liblua/ldo.c	/^l_noret luaD_throw (lua_State *L, int errcode) {$/;"	f
luaE_extendCI	liblua/lstate.c	/^CallInfo *luaE_extendCI (lua_State *L) {$/;"	f
luaE_freeCI	liblua/lstate.c	/^void luaE_freeCI (lua_State *L) {$/;"	f
luaE_freethread	liblua/lstate.c	/^void luaE_freethread (lua_State *L, lua_State *L1) {$/;"	f
luaE_setdebt	liblua/lstate.c	/^void luaE_setdebt (global_State *g, l_mem debt) {$/;"	f
luaE_shrinkCI	liblua/lstate.c	/^void luaE_shrinkCI (lua_State *L) {$/;"	f
luaF_close	liblua/lfunc.c	/^void luaF_close (lua_State *L, StkId level) {$/;"	f
luaF_findupval	liblua/lfunc.c	/^UpVal *luaF_findupval (lua_State *L, StkId level) {$/;"	f
luaF_freeproto	liblua/lfunc.c	/^void luaF_freeproto (lua_State *L, Proto *f) {$/;"	f
luaF_getlocalname	liblua/lfunc.c	/^const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {$/;"	f
luaF_initupvals	liblua/lfunc.c	/^void luaF_initupvals (lua_State *L, LClosure *cl) {$/;"	f
luaF_newCclosure	liblua/lfunc.c	/^CClosure *luaF_newCclosure (lua_State *L, int n) {$/;"	f
luaF_newLclosure	liblua/lfunc.c	/^LClosure *luaF_newLclosure (lua_State *L, int n) {$/;"	f
luaF_newproto	liblua/lfunc.c	/^Proto *luaF_newproto (lua_State *L) {$/;"	f
luaG_addinfo	liblua/ldebug.c	/^const char *luaG_addinfo (lua_State *L, const char *msg, TString *src,$/;"	f
luaG_concaterror	liblua/ldebug.c	/^l_noret luaG_concaterror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_errormsg	liblua/ldebug.c	/^l_noret luaG_errormsg (lua_State *L) {$/;"	f
luaG_opinterror	liblua/ldebug.c	/^l_noret luaG_opinterror (lua_State *L, const TValue *p1,$/;"	f
luaG_ordererror	liblua/ldebug.c	/^l_noret luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_runerror	liblua/ldebug.c	/^l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {$/;"	f
luaG_tointerror	liblua/ldebug.c	/^l_noret luaG_tointerror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_traceexec	liblua/ldebug.c	/^void luaG_traceexec (lua_State *L) {$/;"	f
luaG_typeerror	liblua/ldebug.c	/^l_noret luaG_typeerror (lua_State *L, const TValue *o, const char *op) {$/;"	f
luaH_free	liblua/ltable.c	/^void luaH_free (lua_State *L, Table *t) {$/;"	f
luaH_get	liblua/ltable.c	/^const TValue *luaH_get (Table *t, const TValue *key) {$/;"	f
luaH_getint	liblua/ltable.c	/^const TValue *luaH_getint (Table *t, lua_Integer key) {$/;"	f
luaH_getn	liblua/ltable.c	/^lua_Unsigned luaH_getn (Table *t) {$/;"	f
luaH_getshortstr	liblua/ltable.c	/^const TValue *luaH_getshortstr (Table *t, TString *key) {$/;"	f
luaH_getstr	liblua/ltable.c	/^const TValue *luaH_getstr (Table *t, TString *key) {$/;"	f
luaH_isdummy	liblua/ltable.c	/^int luaH_isdummy (const Table *t) { return isdummy(t); }$/;"	f
luaH_mainposition	liblua/ltable.c	/^Node *luaH_mainposition (const Table *t, const TValue *key) {$/;"	f
luaH_new	liblua/ltable.c	/^Table *luaH_new (lua_State *L) {$/;"	f
luaH_newkey	liblua/ltable.c	/^TValue *luaH_newkey (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_next	liblua/ltable.c	/^int luaH_next (lua_State *L, Table *t, StkId key) {$/;"	f
luaH_resize	liblua/ltable.c	/^void luaH_resize (lua_State *L, Table *t, unsigned int nasize,$/;"	f
luaH_resizearray	liblua/ltable.c	/^void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize) {$/;"	f
luaH_set	liblua/ltable.c	/^TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_setint	liblua/ltable.c	/^void luaH_setint (lua_State *L, Table *t, lua_Integer key, TValue *value) {$/;"	f
luaK_checkstack	liblua/lcode.c	/^void luaK_checkstack (FuncState *fs, int n) {$/;"	f
luaK_code	liblua/lcode.c	/^static int luaK_code (FuncState *fs, Instruction i) {$/;"	f	file:
luaK_codeABC	liblua/lcode.c	/^int luaK_codeABC (FuncState *fs, OpCode o, int a, int b, int c) {$/;"	f
luaK_codeABx	liblua/lcode.c	/^int luaK_codeABx (FuncState *fs, OpCode o, int a, unsigned int bc) {$/;"	f
luaK_codeAsBx	liblua/lcode.h	46;"	d
luaK_codek	liblua/lcode.c	/^int luaK_codek (FuncState *fs, int reg, int k) {$/;"	f
luaK_concat	liblua/lcode.c	/^void luaK_concat (FuncState *fs, int *l1, int l2) {$/;"	f
luaK_dischargevars	liblua/lcode.c	/^void luaK_dischargevars (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2RK	liblua/lcode.c	/^int luaK_exp2RK (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyreg	liblua/lcode.c	/^int luaK_exp2anyreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyregup	liblua/lcode.c	/^void luaK_exp2anyregup (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2nextreg	liblua/lcode.c	/^void luaK_exp2nextreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2val	liblua/lcode.c	/^void luaK_exp2val (FuncState *fs, expdesc *e) {$/;"	f
luaK_fixline	liblua/lcode.c	/^void luaK_fixline (FuncState *fs, int line) {$/;"	f
luaK_getlabel	liblua/lcode.c	/^int luaK_getlabel (FuncState *fs) {$/;"	f
luaK_goiffalse	liblua/lcode.c	/^void luaK_goiffalse (FuncState *fs, expdesc *e) {$/;"	f
luaK_goiftrue	liblua/lcode.c	/^void luaK_goiftrue (FuncState *fs, expdesc *e) {$/;"	f
luaK_indexed	liblua/lcode.c	/^void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {$/;"	f
luaK_infix	liblua/lcode.c	/^void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {$/;"	f
luaK_intK	liblua/lcode.c	/^int luaK_intK (FuncState *fs, lua_Integer n) {$/;"	f
luaK_jump	liblua/lcode.c	/^int luaK_jump (FuncState *fs) {$/;"	f
luaK_jumpto	liblua/lcode.h	50;"	d
luaK_nil	liblua/lcode.c	/^void luaK_nil (FuncState *fs, int from, int n) {$/;"	f
luaK_numberK	liblua/lcode.c	/^static int luaK_numberK (FuncState *fs, lua_Number r) {$/;"	f	file:
luaK_patchclose	liblua/lcode.c	/^void luaK_patchclose (FuncState *fs, int list, int level) {$/;"	f
luaK_patchlist	liblua/lcode.c	/^void luaK_patchlist (FuncState *fs, int list, int target) {$/;"	f
luaK_patchtohere	liblua/lcode.c	/^void luaK_patchtohere (FuncState *fs, int list) {$/;"	f
luaK_posfix	liblua/lcode.c	/^void luaK_posfix (FuncState *fs, BinOpr op,$/;"	f
luaK_prefix	liblua/lcode.c	/^void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e, int line) {$/;"	f
luaK_reserveregs	liblua/lcode.c	/^void luaK_reserveregs (FuncState *fs, int n) {$/;"	f
luaK_ret	liblua/lcode.c	/^void luaK_ret (FuncState *fs, int first, int nret) {$/;"	f
luaK_self	liblua/lcode.c	/^void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {$/;"	f
luaK_setlist	liblua/lcode.c	/^void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {$/;"	f
luaK_setmultret	liblua/lcode.h	48;"	d
luaK_setoneret	liblua/lcode.c	/^void luaK_setoneret (FuncState *fs, expdesc *e) {$/;"	f
luaK_setreturns	liblua/lcode.c	/^void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {$/;"	f
luaK_storevar	liblua/lcode.c	/^void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {$/;"	f
luaK_stringK	liblua/lcode.c	/^int luaK_stringK (FuncState *fs, TString *s) {$/;"	f
luaL_Buffer	liblua/lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	liblua/lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Reg	liblua/lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	liblua/lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_Stream	liblua/lauxlib.h	/^typedef struct luaL_Stream {$/;"	s
luaL_Stream	liblua/lauxlib.h	/^} luaL_Stream;$/;"	t	typeref:struct:luaL_Stream
luaL_addchar	liblua/lauxlib.h	157;"	d
luaL_addlstring	liblua/lauxlib.c	/^LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {$/;"	f
luaL_addsize	liblua/lauxlib.h	161;"	d
luaL_addstring	liblua/lauxlib.c	/^LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {$/;"	f
luaL_addvalue	liblua/lauxlib.c	/^LUALIB_API void luaL_addvalue (luaL_Buffer *B) {$/;"	f
luaL_argcheck	liblua/lauxlib.h	122;"	d
luaL_argerror	liblua/lauxlib.c	/^LUALIB_API int luaL_argerror (lua_State *L, int arg, const char *extramsg) {$/;"	f
luaL_buffinit	liblua/lauxlib.c	/^LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {$/;"	f
luaL_buffinitsize	liblua/lauxlib.c	/^LUALIB_API char *luaL_buffinitsize (lua_State *L, luaL_Buffer *B, size_t sz) {$/;"	f
luaL_callmeta	liblua/lauxlib.c	/^LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {$/;"	f
luaL_checkany	liblua/lauxlib.c	/^LUALIB_API void luaL_checkany (lua_State *L, int arg) {$/;"	f
luaL_checkint	liblua/lauxlib.h	251;"	d
luaL_checkinteger	liblua/lauxlib.c	/^LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int arg) {$/;"	f
luaL_checklong	liblua/lauxlib.h	254;"	d
luaL_checklstring	liblua/lauxlib.c	/^LUALIB_API const char *luaL_checklstring (lua_State *L, int arg, size_t *len) {$/;"	f
luaL_checknumber	liblua/lauxlib.c	/^LUALIB_API lua_Number luaL_checknumber (lua_State *L, int arg) {$/;"	f
luaL_checkoption	liblua/lauxlib.c	/^LUALIB_API int luaL_checkoption (lua_State *L, int arg, const char *def,$/;"	f
luaL_checkstack	liblua/lauxlib.c	/^LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *msg) {$/;"	f
luaL_checkstring	liblua/lauxlib.h	124;"	d
luaL_checktype	liblua/lauxlib.c	/^LUALIB_API void luaL_checktype (lua_State *L, int arg, int t) {$/;"	f
luaL_checkudata	liblua/lauxlib.c	/^LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_checkunsigned	liblua/lauxlib.h	247;"	d
luaL_checkversion	liblua/lauxlib.h	40;"	d
luaL_checkversion_	liblua/lauxlib.c	/^LUALIB_API void luaL_checkversion_ (lua_State *L, lua_Number ver, size_t sz) {$/;"	f
luaL_dofile	liblua/lauxlib.h	129;"	d
luaL_dostring	liblua/lauxlib.h	132;"	d
luaL_error	liblua/lauxlib.c	/^LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {$/;"	f
luaL_execresult	liblua/lauxlib.c	/^LUALIB_API int luaL_execresult (lua_State *L, int stat) {$/;"	f
luaL_fileresult	liblua/lauxlib.c	/^LUALIB_API int luaL_fileresult (lua_State *L, int stat, const char *fname) {$/;"	f
luaL_findtable	liblua/lauxlib.c	/^static const char *luaL_findtable (lua_State *L, int idx,$/;"	f	file:
luaL_getmetafield	liblua/lauxlib.c	/^LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {$/;"	f
luaL_getmetatable	liblua/lauxlib.h	135;"	d
luaL_getsubtable	liblua/lauxlib.c	/^LUALIB_API int luaL_getsubtable (lua_State *L, int idx, const char *fname) {$/;"	f
luaL_gsub	liblua/lauxlib.c	/^LUALIB_API const char *luaL_gsub (lua_State *L, const char *s, const char *p,$/;"	f
luaL_len	liblua/lauxlib.c	/^LUALIB_API lua_Integer luaL_len (lua_State *L, int idx) {$/;"	f
luaL_loadbuffer	liblua/lauxlib.h	139;"	d
luaL_loadbufferx	liblua/lauxlib.c	/^LUALIB_API int luaL_loadbufferx (lua_State *L, const char *buff, size_t size,$/;"	f
luaL_loadfile	liblua/lauxlib.h	86;"	d
luaL_loadfilex	liblua/lauxlib.c	/^LUALIB_API int luaL_loadfilex (lua_State *L, const char *filename,$/;"	f
luaL_loadstring	liblua/lauxlib.c	/^LUALIB_API int luaL_loadstring (lua_State *L, const char *s) {$/;"	f
luaL_newlib	liblua/lauxlib.h	119;"	d
luaL_newlibtable	liblua/lauxlib.h	116;"	d
luaL_newmetatable	liblua/lauxlib.c	/^LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_newstate	liblua/lauxlib.c	/^LUALIB_API lua_State *luaL_newstate (void) {$/;"	f
luaL_openlib	liblua/lauxlib.c	/^LUALIB_API void luaL_openlib (lua_State *L, const char *libname,$/;"	f
luaL_openlibs	liblua/linit.c	/^LUALIB_API void luaL_openlibs (lua_State *L) {$/;"	f
luaL_opt	liblua/lauxlib.h	137;"	d
luaL_optint	liblua/lauxlib.h	252;"	d
luaL_optinteger	liblua/lauxlib.c	/^LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int arg,$/;"	f
luaL_optlong	liblua/lauxlib.h	255;"	d
luaL_optlstring	liblua/lauxlib.c	/^LUALIB_API const char *luaL_optlstring (lua_State *L, int arg,$/;"	f
luaL_optnumber	liblua/lauxlib.c	/^LUALIB_API lua_Number luaL_optnumber (lua_State *L, int arg, lua_Number def) {$/;"	f
luaL_optstring	liblua/lauxlib.h	125;"	d
luaL_optunsigned	liblua/lauxlib.h	248;"	d
luaL_prepbuffer	liblua/lauxlib.h	172;"	d
luaL_prepbuffsize	liblua/lauxlib.c	/^LUALIB_API char *luaL_prepbuffsize (luaL_Buffer *B, size_t sz) {$/;"	f
luaL_pushmodule	liblua/lauxlib.c	/^LUALIB_API void luaL_pushmodule (lua_State *L, const char *modname,$/;"	f
luaL_pushresult	liblua/lauxlib.c	/^LUALIB_API void luaL_pushresult (luaL_Buffer *B) {$/;"	f
luaL_pushresultsize	liblua/lauxlib.c	/^LUALIB_API void luaL_pushresultsize (luaL_Buffer *B, size_t sz) {$/;"	f
luaL_ref	liblua/lauxlib.c	/^LUALIB_API int luaL_ref (lua_State *L, int t) {$/;"	f
luaL_register	liblua/lauxlib.h	210;"	d
luaL_requiref	liblua/lauxlib.c	/^LUALIB_API void luaL_requiref (lua_State *L, const char *modname,$/;"	f
luaL_setfuncs	liblua/lauxlib.c	/^LUALIB_API void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup) {$/;"	f
luaL_setmetatable	liblua/lauxlib.c	/^LUALIB_API void luaL_setmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_testudata	liblua/lauxlib.c	/^LUALIB_API void *luaL_testudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_tolstring	liblua/lauxlib.c	/^LUALIB_API const char *luaL_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
luaL_traceback	liblua/lauxlib.c	/^LUALIB_API void luaL_traceback (lua_State *L, lua_State *L1,$/;"	f
luaL_typename	liblua/lauxlib.h	127;"	d
luaL_unref	liblua/lauxlib.c	/^LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {$/;"	f
luaL_where	liblua/lauxlib.c	/^LUALIB_API void luaL_where (lua_State *L, int level) {$/;"	f
luaM_free	liblua/lmem.h	42;"	d
luaM_freearray	liblua/lmem.h	43;"	d
luaM_freemem	liblua/lmem.h	41;"	d
luaM_growaux_	liblua/lmem.c	/^void *luaM_growaux_ (lua_State *L, void *block, int *size, size_t size_elems,$/;"	f
luaM_growvector	liblua/lmem.h	52;"	d
luaM_malloc	liblua/lmem.h	45;"	d
luaM_new	liblua/lmem.h	46;"	d
luaM_newobject	liblua/lmem.h	50;"	d
luaM_newvector	liblua/lmem.h	47;"	d
luaM_realloc_	liblua/lmem.c	/^void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {$/;"	f
luaM_reallocv	liblua/lmem.h	30;"	d
luaM_reallocvchar	liblua/lmem.h	38;"	d
luaM_reallocvector	liblua/lmem.h	56;"	d
luaM_toobig	liblua/lmem.c	/^l_noret luaM_toobig (lua_State *L) {$/;"	f
luaO_arith	liblua/lobject.c	/^void luaO_arith (lua_State *L, int op, const TValue *p1, const TValue *p2,$/;"	f
luaO_ceillog2	liblua/lobject.c	/^int luaO_ceillog2 (unsigned int x) {$/;"	f
luaO_chunkid	liblua/lobject.c	/^void luaO_chunkid (char *out, const char *source, size_t bufflen) {$/;"	f
luaO_fb2int	liblua/lobject.c	/^int luaO_fb2int (int x) {$/;"	f
luaO_hexavalue	liblua/lobject.c	/^int luaO_hexavalue (int c) {$/;"	f
luaO_int2fb	liblua/lobject.c	/^int luaO_int2fb (unsigned int x) {$/;"	f
luaO_nilobject	liblua/lobject.h	525;"	d
luaO_nilobject_	liblua/lobject.c	/^LUAI_DDEF const TValue luaO_nilobject_ = {NILCONSTANT};$/;"	v
luaO_nilobject_	liblua/lobject.h	/^LUAI_DDEC const TValue luaO_nilobject_;$/;"	v
luaO_pushfstring	liblua/lobject.c	/^const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
luaO_pushvfstring	liblua/lobject.c	/^const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {$/;"	f
luaO_str2num	liblua/lobject.c	/^size_t luaO_str2num (const char *s, TValue *o) {$/;"	f
luaO_tostring	liblua/lobject.c	/^void luaO_tostring (lua_State *L, StkId obj) {$/;"	f
luaO_utf8esc	liblua/lobject.c	/^int luaO_utf8esc (char *buff, unsigned long x) {$/;"	f
luaP_opmodes	liblua/lopcodes.c	/^LUAI_DDEF const lu_byte luaP_opmodes[NUM_OPCODES] = {$/;"	v
luaP_opmodes	liblua/lopcodes.h	/^LUAI_DDEC const lu_byte luaP_opmodes[NUM_OPCODES];$/;"	v
luaP_opnames	liblua/lopcodes.c	/^LUAI_DDEF const char *const luaP_opnames[NUM_OPCODES+1] = {$/;"	v
luaP_opnames	liblua/lopcodes.h	/^LUAI_DDEC const char *const luaP_opnames[NUM_OPCODES+1];  \/* opcode names *\/$/;"	v
luaS_clearcache	liblua/lstring.c	/^void luaS_clearcache (global_State *g) {$/;"	f
luaS_createlngstrobj	liblua/lstring.c	/^TString *luaS_createlngstrobj (lua_State *L, size_t l) {$/;"	f
luaS_eqlngstr	liblua/lstring.c	/^int luaS_eqlngstr (TString *a, TString *b) {$/;"	f
luaS_hash	liblua/lstring.c	/^unsigned int luaS_hash (const char *str, size_t l, unsigned int seed) {$/;"	f
luaS_hashlongstr	liblua/lstring.c	/^unsigned int luaS_hashlongstr (TString *ts) {$/;"	f
luaS_init	liblua/lstring.c	/^void luaS_init (lua_State *L) {$/;"	f
luaS_new	liblua/lstring.c	/^TString *luaS_new (lua_State *L, const char *str) {$/;"	f
luaS_newliteral	liblua/lstring.h	20;"	d
luaS_newlstr	liblua/lstring.c	/^TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {$/;"	f
luaS_newudata	liblua/lstring.c	/^Udata *luaS_newudata (lua_State *L, size_t s) {$/;"	f
luaS_remove	liblua/lstring.c	/^void luaS_remove (lua_State *L, TString *ts) {$/;"	f
luaS_resize	liblua/lstring.c	/^void luaS_resize (lua_State *L, int newsize) {$/;"	f
luaT_callTM	liblua/ltm.c	/^void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,$/;"	f
luaT_callbinTM	liblua/ltm.c	/^int luaT_callbinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_callorderTM	liblua/ltm.c	/^int luaT_callorderTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_gettm	liblua/ltm.c	/^const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {$/;"	f
luaT_gettmbyobj	liblua/ltm.c	/^const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {$/;"	f
luaT_init	liblua/ltm.c	/^void luaT_init (lua_State *L) {$/;"	f
luaT_objtypename	liblua/ltm.c	/^const char *luaT_objtypename (lua_State *L, const TValue *o) {$/;"	f
luaT_trybinTM	liblua/ltm.c	/^void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_typenames_	liblua/ltm.c	/^LUAI_DDEF const char *const luaT_typenames_[LUA_TOTALTAGS] = {$/;"	v
luaT_typenames_	liblua/ltm.h	/^LUAI_DDEC const char *const luaT_typenames_[LUA_TOTALTAGS];$/;"	v
luaU_dump	liblua/ldump.c	/^int luaU_dump(lua_State *L, const Proto *f, lua_Writer w, void *data,$/;"	f
luaU_print	liblua/luac.c	26;"	d	file:
luaU_undump	liblua/lundump.c	/^LClosure *luaU_undump(lua_State *L, ZIO *Z, const char *name) {$/;"	f
luaV_concat	liblua/lvm.c	/^void luaV_concat (lua_State *L, int total) {$/;"	f
luaV_div	liblua/lvm.c	/^lua_Integer luaV_div (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f
luaV_equalobj	liblua/lvm.c	/^int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {$/;"	f
luaV_execute	liblua/lvm.c	/^void luaV_execute (lua_State *L) {$/;"	f
luaV_fastget	liblua/lvm.h	58;"	d
luaV_fastset	liblua/lvm.h	80;"	d
luaV_finishOp	liblua/lvm.c	/^void luaV_finishOp (lua_State *L) {$/;"	f
luaV_finishget	liblua/lvm.c	/^void luaV_finishget (lua_State *L, const TValue *t, TValue *key, StkId val,$/;"	f
luaV_finishset	liblua/lvm.c	/^void luaV_finishset (lua_State *L, const TValue *t, TValue *key,$/;"	f
luaV_gettable	liblua/lvm.h	67;"	d
luaV_lessequal	liblua/lvm.c	/^int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_lessthan	liblua/lvm.c	/^int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_mod	liblua/lvm.c	/^lua_Integer luaV_mod (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f
luaV_objlen	liblua/lvm.c	/^void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {$/;"	f
luaV_rawequalobj	liblua/lvm.h	48;"	d
luaV_settable	liblua/lvm.h	90;"	d
luaV_shiftl	liblua/lvm.c	/^lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y) {$/;"	f
luaV_tointeger	liblua/lvm.c	/^int luaV_tointeger (const TValue *obj, lua_Integer *p, int mode) {$/;"	f
luaV_tonumber_	liblua/lvm.c	/^int luaV_tonumber_ (const TValue *obj, lua_Number *n) {$/;"	f
luaX_init	liblua/llex.c	/^void luaX_init (lua_State *L) {$/;"	f
luaX_lookahead	liblua/llex.c	/^int luaX_lookahead (LexState *ls) {$/;"	f
luaX_newstring	liblua/llex.c	/^TString *luaX_newstring (LexState *ls, const char *str, size_t l) {$/;"	f
luaX_next	liblua/llex.c	/^void luaX_next (LexState *ls) {$/;"	f
luaX_setinput	liblua/llex.c	/^void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source,$/;"	f
luaX_syntaxerror	liblua/llex.c	/^l_noret luaX_syntaxerror (LexState *ls, const char *msg) {$/;"	f
luaX_token2str	liblua/llex.c	/^const char *luaX_token2str (LexState *ls, int token) {$/;"	f
luaX_tokens	liblua/llex.c	/^static const char *const luaX_tokens [] = {$/;"	v	file:
luaY_parser	liblua/lparser.c	/^LClosure *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff,$/;"	f
luaZ_buffer	liblua/lzio.h	31;"	d
luaZ_bufflen	liblua/lzio.h	33;"	d
luaZ_buffremove	liblua/lzio.h	35;"	d
luaZ_fill	liblua/lzio.c	/^int luaZ_fill (ZIO *z) {$/;"	f
luaZ_freebuffer	liblua/lzio.h	44;"	d
luaZ_init	liblua/lzio.c	/^void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {$/;"	f
luaZ_initbuffer	liblua/lzio.h	29;"	d
luaZ_read	liblua/lzio.c	/^size_t luaZ_read (ZIO *z, void *b, size_t n) {$/;"	f
luaZ_resetbuffer	liblua/lzio.h	36;"	d
luaZ_resizebuffer	liblua/lzio.h	39;"	d
luaZ_sizebuffer	liblua/lzio.h	32;"	d
lua_Alloc	liblua/lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t
lua_CFunction	liblua/lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t
lua_Debug	liblua/lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	liblua/lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Hook	liblua/lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t
lua_Integer	liblua/lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t
lua_KContext	liblua/lua.h	/^typedef LUA_KCONTEXT lua_KContext;$/;"	t
lua_KFunction	liblua/lua.h	/^typedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);$/;"	t
lua_Number	liblua/lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t
lua_Reader	liblua/lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t
lua_State	liblua/lstate.h	/^struct lua_State {$/;"	s
lua_State	liblua/lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_TValue	liblua/lobject.h	/^typedef struct lua_TValue {$/;"	s
lua_Unsigned	liblua/lua.h	/^typedef LUA_UNSIGNED lua_Unsigned;$/;"	t
lua_Writer	liblua/lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void *p, size_t sz, void *ud);$/;"	t
lua_absindex	liblua/lapi.c	/^LUA_API int lua_absindex (lua_State *L, int idx) {$/;"	f
lua_arith	liblua/lapi.c	/^LUA_API void lua_arith (lua_State *L, int op) {$/;"	f
lua_assert	liblua/llimits.h	89;"	d
lua_assert	liblua/lualib.h	57;"	d
lua_atpanic	liblua/lapi.c	/^LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {$/;"	f
lua_c	liblua/lua.c	7;"	d	file:
lua_call	liblua/lua.h	274;"	d
lua_callk	liblua/lapi.c	/^LUA_API void lua_callk (lua_State *L, int nargs, int nresults,$/;"	f
lua_checkstack	liblua/lapi.c	/^LUA_API int lua_checkstack (lua_State *L, int n) {$/;"	f
lua_close	liblua/lstate.c	/^LUA_API void lua_close (lua_State *L) {$/;"	f
lua_compare	liblua/lapi.c	/^LUA_API int lua_compare (lua_State *L, int index1, int index2, int op) {$/;"	f
lua_concat	liblua/lapi.c	/^LUA_API void lua_concat (lua_State *L, int n) {$/;"	f
lua_copy	liblua/lapi.c	/^LUA_API void lua_copy (lua_State *L, int fromidx, int toidx) {$/;"	f
lua_cpcall	liblua/luaconf.h	353;"	d
lua_createtable	liblua/lapi.c	/^LUA_API void lua_createtable (lua_State *L, int narray, int nrec) {$/;"	f
lua_dump	liblua/lapi.c	/^LUA_API int lua_dump (lua_State *L, lua_Writer writer, void *data, int strip) {$/;"	f
lua_equal	liblua/luaconf.h	385;"	d
lua_error	liblua/lapi.c	/^LUA_API int lua_error (lua_State *L) {$/;"	f
lua_freeline	liblua/lua.c	86;"	d	file:
lua_freeline	liblua/lua.c	94;"	d	file:
lua_gc	liblua/lapi.c	/^LUA_API int lua_gc (lua_State *L, int what, int data) {$/;"	f
lua_getallocf	liblua/lapi.c	/^LUA_API lua_Alloc lua_getallocf (lua_State *L, void **ud) {$/;"	f
lua_getextraspace	liblua/lua.h	339;"	d
lua_getfield	liblua/lapi.c	/^LUA_API int lua_getfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_getglobal	liblua/lapi.c	/^LUA_API int lua_getglobal (lua_State *L, const char *name) {$/;"	f
lua_gethook	liblua/ldebug.c	/^LUA_API lua_Hook lua_gethook (lua_State *L) {$/;"	f
lua_gethookcount	liblua/ldebug.c	/^LUA_API int lua_gethookcount (lua_State *L) {$/;"	f
lua_gethookmask	liblua/ldebug.c	/^LUA_API int lua_gethookmask (lua_State *L) {$/;"	f
lua_geti	liblua/lapi.c	/^LUA_API int lua_geti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_getinfo	liblua/ldebug.c	/^LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar) {$/;"	f
lua_getlocal	liblua/ldebug.c	/^LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_getlocaledecpoint	liblua/luaconf.h	680;"	d
lua_getmetatable	liblua/lapi.c	/^LUA_API int lua_getmetatable (lua_State *L, int objindex) {$/;"	f
lua_getstack	liblua/ldebug.c	/^LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar) {$/;"	f
lua_gettable	liblua/lapi.c	/^LUA_API int lua_gettable (lua_State *L, int idx) {$/;"	f
lua_gettop	liblua/lapi.c	/^LUA_API int lua_gettop (lua_State *L) {$/;"	f
lua_getupvalue	liblua/lapi.c	/^LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_getuservalue	liblua/lapi.c	/^LUA_API int lua_getuservalue (lua_State *L, int idx) {$/;"	f
lua_h	liblua/lua.h	10;"	d
lua_ident	liblua/lapi.c	/^const char lua_ident[] =$/;"	v
lua_insert	liblua/lua.h	369;"	d
lua_integer2str	liblua/luaconf.h	530;"	d
lua_isboolean	liblua/lua.h	356;"	d
lua_iscfunction	liblua/lapi.c	/^LUA_API int lua_iscfunction (lua_State *L, int idx) {$/;"	f
lua_isfunction	liblua/lua.h	352;"	d
lua_isinteger	liblua/lapi.c	/^LUA_API int lua_isinteger (lua_State *L, int idx) {$/;"	f
lua_islightuserdata	liblua/lua.h	354;"	d
lua_isnil	liblua/lua.h	355;"	d
lua_isnone	liblua/lua.h	358;"	d
lua_isnoneornil	liblua/lua.h	359;"	d
lua_isnumber	liblua/lapi.c	/^LUA_API int lua_isnumber (lua_State *L, int idx) {$/;"	f
lua_isstring	liblua/lapi.c	/^LUA_API int lua_isstring (lua_State *L, int idx) {$/;"	f
lua_istable	liblua/lua.h	353;"	d
lua_isthread	liblua/lua.h	357;"	d
lua_isuserdata	liblua/lapi.c	/^LUA_API int lua_isuserdata (lua_State *L, int idx) {$/;"	f
lua_isyieldable	liblua/ldo.c	/^LUA_API int lua_isyieldable (lua_State *L) {$/;"	f
lua_len	liblua/lapi.c	/^LUA_API void lua_len (lua_State *L, int idx) {$/;"	f
lua_lessthan	liblua/luaconf.h	386;"	d
lua_load	liblua/lapi.c	/^LUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,$/;"	f
lua_lock	liblua/llimits.h	214;"	d
lua_longassert	liblua/llimits.h	87;"	d
lua_longassert	liblua/llimits.h	91;"	d
lua_longjmp	liblua/ldo.c	/^struct lua_longjmp {$/;"	s	file:
lua_newstate	liblua/lstate.c	/^LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {$/;"	f
lua_newtable	liblua/lua.h	346;"	d
lua_newthread	liblua/lstate.c	/^LUA_API lua_State *lua_newthread (lua_State *L) {$/;"	f
lua_newuserdata	liblua/lapi.c	/^LUA_API void *lua_newuserdata (lua_State *L, size_t size) {$/;"	f
lua_next	liblua/lapi.c	/^LUA_API int lua_next (lua_State *L, int idx) {$/;"	f
lua_number2str	liblua/luaconf.h	436;"	d
lua_number2strx	liblua/lstrlib.c	/^static int lua_number2strx (lua_State *L, char *buff, int sz,$/;"	f	file:
lua_number2strx	liblua/luaconf.h	637;"	d
lua_numbertointeger	liblua/luaconf.h	447;"	d
lua_objlen	liblua/luaconf.h	383;"	d
lua_pcall	liblua/lua.h	278;"	d
lua_pcallk	liblua/lapi.c	/^LUA_API int lua_pcallk (lua_State *L, int nargs, int nresults, int errfunc,$/;"	f
lua_pointer2str	liblua/luaconf.h	627;"	d
lua_pop	liblua/lua.h	344;"	d
lua_pushboolean	liblua/lapi.c	/^LUA_API void lua_pushboolean (lua_State *L, int b) {$/;"	f
lua_pushcclosure	liblua/lapi.c	/^LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {$/;"	f
lua_pushcfunction	liblua/lua.h	350;"	d
lua_pushfstring	liblua/lapi.c	/^LUA_API const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
lua_pushglobaltable	liblua/lua.h	363;"	d
lua_pushinteger	liblua/lapi.c	/^LUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {$/;"	f
lua_pushlightuserdata	liblua/lapi.c	/^LUA_API void lua_pushlightuserdata (lua_State *L, void *p) {$/;"	f
lua_pushliteral	liblua/lua.h	361;"	d
lua_pushlstring	liblua/lapi.c	/^LUA_API const char *lua_pushlstring (lua_State *L, const char *s, size_t len) {$/;"	f
lua_pushnil	liblua/lapi.c	/^LUA_API void lua_pushnil (lua_State *L) {$/;"	f
lua_pushnumber	liblua/lapi.c	/^LUA_API void lua_pushnumber (lua_State *L, lua_Number n) {$/;"	f
lua_pushstring	liblua/lapi.c	/^LUA_API const char *lua_pushstring (lua_State *L, const char *s) {$/;"	f
lua_pushthread	liblua/lapi.c	/^LUA_API int lua_pushthread (lua_State *L) {$/;"	f
lua_pushunsigned	liblua/lua.h	385;"	d
lua_pushvalue	liblua/lapi.c	/^LUA_API void lua_pushvalue (lua_State *L, int idx) {$/;"	f
lua_pushvfstring	liblua/lapi.c	/^LUA_API const char *lua_pushvfstring (lua_State *L, const char *fmt,$/;"	f
lua_rawequal	liblua/lapi.c	/^LUA_API int lua_rawequal (lua_State *L, int index1, int index2) {$/;"	f
lua_rawget	liblua/lapi.c	/^LUA_API int lua_rawget (lua_State *L, int idx) {$/;"	f
lua_rawgeti	liblua/lapi.c	/^LUA_API int lua_rawgeti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_rawgetp	liblua/lapi.c	/^LUA_API int lua_rawgetp (lua_State *L, int idx, const void *p) {$/;"	f
lua_rawlen	liblua/lapi.c	/^LUA_API size_t lua_rawlen (lua_State *L, int idx) {$/;"	f
lua_rawset	liblua/lapi.c	/^LUA_API void lua_rawset (lua_State *L, int idx) {$/;"	f
lua_rawseti	liblua/lapi.c	/^LUA_API void lua_rawseti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_rawsetp	liblua/lapi.c	/^LUA_API void lua_rawsetp (lua_State *L, int idx, const void *p) {$/;"	f
lua_readline	liblua/lua.c	84;"	d	file:
lua_readline	liblua/lua.c	90;"	d	file:
lua_register	liblua/lua.h	348;"	d
lua_remove	liblua/lua.h	371;"	d
lua_replace	liblua/lua.h	373;"	d
lua_resume	liblua/ldo.c	/^LUA_API int lua_resume (lua_State *L, lua_State *from, int nargs) {$/;"	f
lua_rotate	liblua/lapi.c	/^LUA_API void lua_rotate (lua_State *L, int idx, int n) {$/;"	f
lua_saveline	liblua/lua.c	85;"	d	file:
lua_saveline	liblua/lua.c	93;"	d	file:
lua_setallocf	liblua/lapi.c	/^LUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {$/;"	f
lua_setfield	liblua/lapi.c	/^LUA_API void lua_setfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_setglobal	liblua/lapi.c	/^LUA_API void lua_setglobal (lua_State *L, const char *name) {$/;"	f
lua_sethook	liblua/ldebug.c	/^LUA_API void lua_sethook (lua_State *L, lua_Hook func, int mask, int count) {$/;"	f
lua_seti	liblua/lapi.c	/^LUA_API void lua_seti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_setlocal	liblua/ldebug.c	/^LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_setmetatable	liblua/lapi.c	/^LUA_API int lua_setmetatable (lua_State *L, int objindex) {$/;"	f
lua_settable	liblua/lapi.c	/^LUA_API void lua_settable (lua_State *L, int idx) {$/;"	f
lua_settop	liblua/lapi.c	/^LUA_API void lua_settop (lua_State *L, int idx) {$/;"	f
lua_setupvalue	liblua/lapi.c	/^LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_setuservalue	liblua/lapi.c	/^LUA_API void lua_setuservalue (lua_State *L, int idx) {$/;"	f
lua_status	liblua/lapi.c	/^LUA_API int lua_status (lua_State *L) {$/;"	f
lua_stdin_is_tty	liblua/lua.c	53;"	d	file:
lua_stdin_is_tty	liblua/lua.c	60;"	d	file:
lua_stdin_is_tty	liblua/lua.c	65;"	d	file:
lua_str2number	liblua/luaconf.h	468;"	d
lua_str2number	liblua/luaconf.h	484;"	d
lua_str2number	liblua/luaconf.h	499;"	d
lua_str2number	liblua/luaconf.h	650;"	d
lua_str2number	liblua/luaconf.h	652;"	d
lua_stringtonumber	liblua/lapi.c	/^LUA_API size_t lua_stringtonumber (lua_State *L, const char *s) {$/;"	f
lua_strlen	liblua/luaconf.h	381;"	d
lua_strx2number	liblua/lobject.c	/^static lua_Number lua_strx2number (const char *s, char **endptr) {$/;"	f	file:
lua_strx2number	liblua/luaconf.h	619;"	d
lua_tmpnam	liblua/loslib.c	121;"	d	file:
lua_tmpnam	liblua/loslib.c	131;"	d	file:
lua_toboolean	liblua/lapi.c	/^LUA_API int lua_toboolean (lua_State *L, int idx) {$/;"	f
lua_tocfunction	liblua/lapi.c	/^LUA_API lua_CFunction lua_tocfunction (lua_State *L, int idx) {$/;"	f
lua_tointeger	liblua/lua.h	342;"	d
lua_tointegerx	liblua/lapi.c	/^LUA_API lua_Integer lua_tointegerx (lua_State *L, int idx, int *pisnum) {$/;"	f
lua_tolstring	liblua/lapi.c	/^LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
lua_tonumber	liblua/lua.h	341;"	d
lua_tonumberx	liblua/lapi.c	/^LUA_API lua_Number lua_tonumberx (lua_State *L, int idx, int *pisnum) {$/;"	f
lua_topointer	liblua/lapi.c	/^LUA_API const void *lua_topointer (lua_State *L, int idx) {$/;"	f
lua_tostring	liblua/lua.h	366;"	d
lua_tothread	liblua/lapi.c	/^LUA_API lua_State *lua_tothread (lua_State *L, int idx) {$/;"	f
lua_tounsigned	liblua/lua.h	387;"	d
lua_tounsignedx	liblua/lua.h	386;"	d
lua_touserdata	liblua/lapi.c	/^LUA_API void *lua_touserdata (lua_State *L, int idx) {$/;"	f
lua_type	liblua/lapi.c	/^LUA_API int lua_type (lua_State *L, int idx) {$/;"	f
lua_typename	liblua/lapi.c	/^LUA_API const char *lua_typename (lua_State *L, int t) {$/;"	f
lua_unlock	liblua/llimits.h	215;"	d
lua_upvalueid	liblua/lapi.c	/^LUA_API void *lua_upvalueid (lua_State *L, int fidx, int n) {$/;"	f
lua_upvalueindex	liblua/lua.h	43;"	d
lua_upvaluejoin	liblua/lapi.c	/^LUA_API void lua_upvaluejoin (lua_State *L, int fidx1, int n1,$/;"	f
lua_version	liblua/lapi.c	/^LUA_API const lua_Number *lua_version (lua_State *L) {$/;"	f
lua_writeline	liblua/lauxlib.h	228;"	d
lua_writestring	liblua/lauxlib.h	223;"	d
lua_writestringerror	liblua/lauxlib.h	233;"	d
lua_xmove	liblua/lapi.c	/^LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {$/;"	f
lua_yield	liblua/lua.h	295;"	d
lua_yieldk	liblua/ldo.c	/^LUA_API int lua_yieldk (lua_State *L, int nresults, lua_KContext ctx,$/;"	f
luac_c	liblua/luac.c	217;"	d	file:
luac_c	liblua/luac.c	7;"	d	file:
luaconf_h	liblua/luaconf.h	9;"	d
luai_apicheck	liblua/llimits.h	98;"	d
luai_apicheck	liblua/luaconf.h	708;"	d
luai_ctype_	liblua/lctype.c	/^LUAI_DDEF const lu_byte luai_ctype_[UCHAR_MAX + 2] = {$/;"	v
luai_ctype_	liblua/lctype.h	/^LUAI_DDEC const lu_byte luai_ctype_[UCHAR_MAX + 2];$/;"	v
luai_jmpbuf	liblua/ldo.c	61;"	d	file:
luai_jmpbuf	liblua/ldo.c	68;"	d	file:
luai_jmpbuf	liblua/ldo.c	75;"	d	file:
luai_makeseed	liblua/lstate.c	46;"	d	file:
luai_numadd	liblua/llimits.h	291;"	d
luai_numdiv	liblua/llimits.h	269;"	d
luai_numeq	liblua/llimits.h	295;"	d
luai_numidiv	liblua/llimits.h	264;"	d
luai_numisnan	liblua/llimits.h	298;"	d
luai_numle	liblua/llimits.h	297;"	d
luai_numlt	liblua/llimits.h	296;"	d
luai_nummod	liblua/llimits.h	280;"	d
luai_nummul	liblua/llimits.h	293;"	d
luai_numpow	liblua/llimits.h	286;"	d
luai_numsub	liblua/llimits.h	292;"	d
luai_numunm	liblua/llimits.h	294;"	d
luai_threadyield	liblua/llimits.h	223;"	d
luai_userstateclose	liblua/llimits.h	237;"	d
luai_userstatefree	liblua/llimits.h	245;"	d
luai_userstateopen	liblua/llimits.h	233;"	d
luai_userstateresume	liblua/llimits.h	249;"	d
luai_userstatethread	liblua/llimits.h	241;"	d
luai_userstateyield	liblua/llimits.h	253;"	d
luai_verifycode	liblua/lundump.c	28;"	d	file:
lualib_h	liblua/lualib.h	9;"	d
luaopen_base	liblua/lbaselib.c	/^LUAMOD_API int luaopen_base (lua_State *L) {$/;"	f
luaopen_bit32	liblua/lbitlib.c	/^LUAMOD_API int luaopen_bit32 (lua_State *L) {$/;"	f
luaopen_coroutine	liblua/lcorolib.c	/^LUAMOD_API int luaopen_coroutine (lua_State *L) {$/;"	f
luaopen_debug	liblua/ldblib.c	/^LUAMOD_API int luaopen_debug (lua_State *L) {$/;"	f
luaopen_io	liblua/liolib.c	/^LUAMOD_API int luaopen_io (lua_State *L) {$/;"	f
luaopen_math	liblua/lmathlib.c	/^LUAMOD_API int luaopen_math (lua_State *L) {$/;"	f
luaopen_nmap	nse_nmaplib.cc	/^int luaopen_nmap(lua_State *L)$/;"	f
luaopen_nsock	nse_nsock.cc	/^LUALIB_API int luaopen_nsock (lua_State *L)$/;"	f
luaopen_nsock	nse_nsock_tmp.cc	/^LUALIB_API int luaopen_nsock(lua_State *L)$/;"	f
luaopen_os	liblua/loslib.c	/^LUAMOD_API int luaopen_os (lua_State *L) {$/;"	f
luaopen_package	liblua/loadlib.c	/^LUAMOD_API int luaopen_package (lua_State *L) {$/;"	f
luaopen_string	liblua/lstrlib.c	/^LUAMOD_API int luaopen_string (lua_State *L) {$/;"	f
luaopen_table	liblua/ltablib.c	/^LUAMOD_API int luaopen_table (lua_State *L) {$/;"	f
luaopen_utf8	liblua/lutf8lib.c	/^LUAMOD_API int luaopen_utf8 (lua_State *L) {$/;"	f
lundump_c	liblua/lundump.c	7;"	d	file:
lundump_h	liblua/lundump.h	8;"	d
lutf8lib_c	liblua/lutf8lib.c	7;"	d	file:
lvm_c	liblua/lvm.c	7;"	d	file:
lvm_h	liblua/lvm.h	8;"	d
lzio_c	liblua/lzio.c	7;"	d	file:
lzio_h	liblua/lzio.h	9;"	d
main	liblua/lua.c	/^int main (int argc, char **argv) {$/;"	f
main	liblua/luac.c	/^int main(int argc, char* argv[])$/;"	f
main	main.cc	/^int main(int argc, char *argv[])$/;"	f
main	nbase/config.guess	/^		main()$/;"	f
main	nbase/config.guess	/^	main ()$/;"	f
main	nbase/test/test-escape_windows_command_arg.c	/^int main(int argc, char *argv[])$/;"	f
main	nselib/nse_main.lua	/^	local function main()$/;"	f
main	nselib/nse_main.lua	/^local function main(hosts)$/;"	f
main	nsock/examples/nsock_telnet.c	/^int main(int argc, char *argv[]) {$/;"	f
main	nsock/examples/nsock_test_timers.c	/^int main(int argc, char *argv[]) {$/;"	f
main	nsock/src/config.guess	/^		main()$/;"	f
main	nsock/src/config.guess	/^	main ()$/;"	f
main	nsock/tests/run_tests.sh	/^main() {$/;"	f
main	nsock/tests/tests_main.c	/^int main(int ac, char **av) {$/;"	f
mainfunc	liblua/lparser.c	/^static void mainfunc (LexState *ls, FuncState *fs) {$/;"	f	file:
mainposition	liblua/ltable.c	/^static Node *mainposition (const Table *t, const TValue *key) {$/;"	f	file:
mainthread	liblua/lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
make_crc_table	nbase/nbase_misc.c	/^static void make_crc_table(void)$/;"	f	file:
makemask	liblua/ldblib.c	/^static int makemask (const char *smask, int count) {$/;"	f	file:
makeseed	liblua/lstate.c	/^static unsigned int makeseed (lua_State *L) {$/;"	f	file:
makewhite	liblua/lgc.c	67;"	d	file:
mandir	nbase/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	nsock/src/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
map_faulty_errors	nsock/src/engine_iocp.c	/^static int map_faulty_errors(int err) {$/;"	f	file:
markbeingfnz	liblua/lgc.c	/^static void markbeingfnz (global_State *g) {$/;"	f	file:
marklen	liblua/lua.c	283;"	d	file:
markmt	liblua/lgc.c	/^static void markmt (global_State *g) {$/;"	f	file:
markobject	liblua/lgc.c	86;"	d	file:
markobjectN	liblua/lgc.c	92;"	d	file:
markupval	liblua/lparser.c	/^static void markupval (FuncState *fs, int level) {$/;"	f	file:
markvalue	liblua/lgc.c	83;"	d	file:
mask	liblua/lbitlib.c	45;"	d	file:
mask	nbase/nbase_addrset.c	/^  u32 mask[4];$/;"	m	struct:trie_node	file:
mask_matches	nbase/nbase_addrset.c	/^static int mask_matches(u32 mask, u32 a, u32 b)$/;"	f	file:
maskcolors	liblua/lgc.c	66;"	d	file:
match	liblua/lstrlib.c	/^static const char *match (MatchState *ms, const char *s, const char *p) {$/;"	f	file:
match_capture	liblua/lstrlib.c	/^static const char *match_capture (MatchState *ms, const char *s, int l) {$/;"	f	file:
match_class	liblua/lstrlib.c	/^static int match_class (int c, int cl) {$/;"	f	file:
match_ipv4_bits	nbase/nbase_addrset.c	/^static int match_ipv4_bits(const octet_bitvector bits[4], const struct sockaddr *sa)$/;"	f	file:
matchbalance	liblua/lstrlib.c	/^static const char *matchbalance (MatchState *ms, const char *s,$/;"	f	file:
matchbracketclass	liblua/lstrlib.c	/^static int matchbracketclass (int c, const char *p, const char *ec) {$/;"	f	file:
matchdepth	liblua/lstrlib.c	/^  int matchdepth;  \/* control for recursive depth (to avoid C stack overflow) *\/$/;"	m	struct:MatchState	file:
math_abs	liblua/lmathlib.c	/^static int math_abs (lua_State *L) {$/;"	f	file:
math_acos	liblua/lmathlib.c	/^static int math_acos (lua_State *L) {$/;"	f	file:
math_asin	liblua/lmathlib.c	/^static int math_asin (lua_State *L) {$/;"	f	file:
math_atan	liblua/lmathlib.c	/^static int math_atan (lua_State *L) {$/;"	f	file:
math_ceil	liblua/lmathlib.c	/^static int math_ceil (lua_State *L) {$/;"	f	file:
math_cos	liblua/lmathlib.c	/^static int math_cos (lua_State *L) {$/;"	f	file:
math_cosh	liblua/lmathlib.c	/^static int math_cosh (lua_State *L) {$/;"	f	file:
math_deg	liblua/lmathlib.c	/^static int math_deg (lua_State *L) {$/;"	f	file:
math_exp	liblua/lmathlib.c	/^static int math_exp (lua_State *L) {$/;"	f	file:
math_floor	liblua/lmathlib.c	/^static int math_floor (lua_State *L) {$/;"	f	file:
math_fmod	liblua/lmathlib.c	/^static int math_fmod (lua_State *L) {$/;"	f	file:
math_frexp	liblua/lmathlib.c	/^static int math_frexp (lua_State *L) {$/;"	f	file:
math_ldexp	liblua/lmathlib.c	/^static int math_ldexp (lua_State *L) {$/;"	f	file:
math_log	liblua/lmathlib.c	/^static int math_log (lua_State *L) {$/;"	f	file:
math_log10	liblua/lmathlib.c	/^static int math_log10 (lua_State *L) {$/;"	f	file:
math_max	liblua/lmathlib.c	/^static int math_max (lua_State *L) {$/;"	f	file:
math_min	liblua/lmathlib.c	/^static int math_min (lua_State *L) {$/;"	f	file:
math_modf	liblua/lmathlib.c	/^static int math_modf (lua_State *L) {$/;"	f	file:
math_pow	liblua/lmathlib.c	/^static int math_pow (lua_State *L) {$/;"	f	file:
math_rad	liblua/lmathlib.c	/^static int math_rad (lua_State *L) {$/;"	f	file:
math_random	liblua/lmathlib.c	/^static int math_random (lua_State *L) {$/;"	f	file:
math_randomseed	liblua/lmathlib.c	/^static int math_randomseed (lua_State *L) {$/;"	f	file:
math_sin	liblua/lmathlib.c	/^static int math_sin (lua_State *L) {$/;"	f	file:
math_sinh	liblua/lmathlib.c	/^static int math_sinh (lua_State *L) {$/;"	f	file:
math_sqrt	liblua/lmathlib.c	/^static int math_sqrt (lua_State *L) {$/;"	f	file:
math_tan	liblua/lmathlib.c	/^static int math_tan (lua_State *L) {$/;"	f	file:
math_tanh	liblua/lmathlib.c	/^static int math_tanh (lua_State *L) {$/;"	f	file:
math_toint	liblua/lmathlib.c	/^static int math_toint (lua_State *L) {$/;"	f	file:
math_type	liblua/lmathlib.c	/^static int math_type (lua_State *L) {$/;"	f	file:
math_ult	liblua/lmathlib.c	/^static int math_ult (lua_State *L) {$/;"	f	file:
mathlib	liblua/lmathlib.c	/^static const luaL_Reg mathlib[] = {$/;"	v	file:
max	nbase/snprintf.c	72;"	d	file:
max_expand	liblua/lstrlib.c	/^static const char *max_expand (MatchState *ms, const char *s,$/;"	f	file:
max_fd	nsock/src/engine_poll.c	/^  int max_fd;$/;"	m	struct:poll_engine_info	file:
max_sd	nsock/src/engine_select.c	/^  int max_sd;$/;"	m	struct:select_engine_info	file:
max_sz	nbase/snprintf.c	/^  size_t max_sz;$/;"	m	struct:state	file:
maxalign	liblua/lstrlib.c	/^  int maxalign;$/;"	m	struct:Header	file:
maxfd	nsock/src/engine_kqueue.c	/^  int maxfd;$/;"	m	struct:kqueue_engine_info	file:
maximize_fdlimit	nsock/src/netutils.c	/^int maximize_fdlimit(void) {$/;"	f
maxn	liblua/ltablib.c	/^static int maxn (lua_State *L) {$/;"	f	file:
maxstacksize	liblua/lobject.h	/^  lu_byte maxstacksize;  \/* number of registers needed by this function *\/$/;"	m	struct:Proto
memerrmsg	liblua/lstate.h	/^  TString *memerrmsg;  \/* memory-error message *\/$/;"	m	struct:global_State
metatable	liblua/lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table::Table
metatable	liblua/lobject.h	/^  struct Table *metatable;$/;"	m	struct:Udata	typeref:struct:Udata::Table
min	nbase/snprintf.c	69;"	d	file:
min_expand	liblua/lstrlib.c	/^static const char *min_expand (MatchState *ms, const char *s,$/;"	f	file:
minus_flag	nbase/snprintf.c	/^    minus_flag     =  1,$/;"	e	enum:format_flags	file:
mknode	nsock/tests/ghheaps.c	/^static gh_hnode_t *mknode(int val) {$/;"	f	file:
mknode	nsock/tests/ghlists.c	/^static gh_lnode_t *mknode(unsigned int val) {$/;"	f	file:
mksock_bind_addr	nsock/src/nsock_connect.c	/^static int mksock_bind_addr(struct npool *ms, struct niod *iod) {$/;"	f	file:
mksock_bind_device	nsock/src/nsock_connect.c	/^static int mksock_bind_device(struct npool *ms, struct niod *iod) {$/;"	f	file:
mksock_set_broadcast	nsock/src/nsock_connect.c	/^static int mksock_set_broadcast(struct npool *ms, struct niod *iod) {$/;"	f	file:
mksock_set_ipopts	nsock/src/nsock_connect.c	/^static int mksock_set_ipopts(struct npool *ms, struct niod *iod) {$/;"	f	file:
mkstr	nbase/nbase_str.c	/^char *mkstr(const char *start, const char *end) {$/;"	f
mode	liblua/ldo.c	/^  const char *mode;$/;"	m	struct:SParser	file:
modinit	liblua/loadlib.c	/^static void modinit (lua_State *L, const char *modname) {$/;"	f	file:
module	nselib/stdnse.lua	/^function module(name, ...)$/;"	f
movegotosout	liblua/lparser.c	/^static void movegotosout (FuncState *fs, BlockCnt *bl) {$/;"	f	file:
moveresults	liblua/ldo.c	/^static int moveresults (lua_State *L, const TValue *firstResult, StkId res,$/;"	f	file:
ms	liblua/lstrlib.c	/^  MatchState ms;  \/* match state *\/$/;"	m	struct:GMatchState	file:
msg	nsock/include/nsock.h	/^  char *msg;$/;"	m	struct:nsock_log_rec
msghandler	liblua/lua.c	/^static int msghandler (lua_State *L) {$/;"	f	file:
mspcap	nsock/src/nsock_pcap.h	/^} mspcap;$/;"	t	typeref:struct:__anon27
mt	liblua/lstate.h	/^  struct Table *mt[LUA_NUMTAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:global_State::Table
mt.__index 	nselib/strict.lua	/^  function mt.__index (t, n)$/;"	f
mt.__newindex 	nselib/strict.lua	/^  function mt.__newindex (t, n, v)$/;"	f
multiline	liblua/lua.c	/^static int multiline (lua_State *L) {$/;"	f	file:
munmap	nbase/nbase_winunix.h	204;"	d
n	liblua/lauxlib.c	/^  int n;  \/* number of pre-read characters *\/$/;"	m	struct:LoadF	file:
n	liblua/lauxlib.h	/^  size_t n;  \/* number of characters in buffer *\/$/;"	m	struct:luaL_Buffer
n	liblua/liolib.c	/^  int n;  \/* number of elements in buffer 'buff' *\/$/;"	m	struct:__anon20	file:
n	liblua/llimits.h	/^  lua_Number n;$/;"	m	union:__anon13
n	liblua/lobject.h	/^  lua_Number n;    \/* float numbers *\/$/;"	m	union:Value
n	liblua/lparser.h	/^    int n;$/;"	m	struct:Dyndata::__anon18
n	liblua/lparser.h	/^  int n;  \/* number of entries in use *\/$/;"	m	struct:Labellist
n	liblua/lstrlib.c	/^  lua_Number n;$/;"	m	union:Ftypes	file:
n	liblua/lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon8	file:
n	liblua/lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio
n	liblua/lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer
nCcalls	liblua/lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State
na	liblua/lparser.c	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl	file:
nactvar	liblua/lparser.c	/^  lu_byte nactvar;  \/* # active locals outside the block *\/$/;"	m	struct:BlockCnt	file:
nactvar	liblua/lparser.h	/^  lu_byte nactvar;  \/* local level where it appears in current block *\/$/;"	m	struct:Labeldesc
nactvar	liblua/lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState
name	liblua/lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg
name	liblua/ldo.c	/^  const char *name;$/;"	m	struct:SParser	file:
name	liblua/lobject.h	/^  TString *name;  \/* upvalue name (for debug information) *\/$/;"	m	struct:Upvaldesc
name	liblua/lparser.h	/^  TString *name;  \/* label identifier *\/$/;"	m	struct:Labeldesc
name	liblua/lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug
name	liblua/lundump.c	/^  const char *name;$/;"	m	struct:__anon24	file:
name	nbase/getopt.h	/^  const char *name;$/;"	m	struct:option
name	nsock/src/nsock_internal.h	/^  const char *name;$/;"	m	struct:io_engine
namewhat	liblua/lua.h	/^  const char *namewhat;	\/* (n) 'global', 'local', 'field', 'method' *\/$/;"	m	struct:lua_Debug
nativeendian	liblua/lstrlib.c	/^} nativeendian = {1};$/;"	v	typeref:union:__anon7	file:
nbase_adler32	nbase/nbase_misc.c	/^unsigned long nbase_adler32(unsigned char *buf, int len)$/;"	f
nbase_crc32	nbase/nbase_misc.c	/^unsigned long nbase_crc32(unsigned char *buf, int len)$/;"	f
nbase_crc32c	nbase/nbase_misc.c	/^unsigned long nbase_crc32c(unsigned char *buf, int len)$/;"	f
nbase_set_log	nbase/nbase_addrset.c	/^void nbase_set_log(void (*log_user_func)(const char *, ...),void (*log_debug_func)(const char *, ...)){$/;"	f
nci	liblua/lstate.h	/^  unsigned short nci;  \/* number of items in 'ci' list *\/$/;"	m	struct:lua_State
need_value	liblua/lcode.c	/^static int need_value (FuncState *fs, int list) {$/;"	f	file:
negatecondition	liblua/lcode.c	/^static void negatecondition (FuncState *fs, expdesc *e) {$/;"	f	file:
netutils_debugging	nsock/src/netutils.c	/^static int netutils_debugging = 0;$/;"	v	file:
nevent	nsock/src/nsock_internal.h	/^struct nevent {$/;"	s
nevent_delete	nsock/src/nsock_event.c	/^int nevent_delete(struct npool *nsp, struct nevent *nse, gh_list_t *event_list,$/;"	f
nevent_unref	nsock/src/nsock_core.c	/^static int nevent_unref(struct npool *nsp, struct nevent *nse) {$/;"	f	file:
new 	nselib/dnssd.lua	/^	new = function(self, host, port)$/;"	f
new 	nselib/wsdd.lua	/^  new = function( self, host, port )$/;"	f
new 	nselib/wsdd.lua	/^  new = function( self, host, port, mcast )$/;"	f
newPacket	nselib/dns.lua	/^function newPacket()$/;"	f
new_ai	nbase/getaddrinfo.c	/^static struct addrinfo *new_ai(unsigned short portno, u32 addr)$/;"	f	file:
new_eov	nsock/src/engine_iocp.c	/^static struct extended_overlapped *new_eov(struct npool *nsp, struct nevent *nse) {$/;"	f	file:
new_localvar	liblua/lparser.c	/^static void new_localvar (LexState *ls, TString *name) {$/;"	f	file:
new_localvarliteral	liblua/lparser.c	191;"	d	file:
new_localvarliteral_	liblua/lparser.c	/^static void new_localvarliteral_ (LexState *ls, const char *name, size_t sz) {$/;"	f	file:
new_pool	nse_nsock.cc	/^static nsock_pool new_pool (lua_State *L)$/;"	f	file:
new_pool	nse_nsock_tmp.cc	/^static nsock_pool new_pool(lua_State *L)$/;"	f	file:
new_trie_node	nbase/nbase_addrset.c	/^static struct trie_node *new_trie_node(const u32 *addr, const u32 *mask)$/;"	f	file:
newbox	liblua/lauxlib.c	/^static void *newbox (lua_State *L, size_t newsize) {$/;"	f	file:
newfile	liblua/liolib.c	/^static LStream *newfile (lua_State *L) {$/;"	f	file:
newlabelentry	liblua/lparser.c	/^static int newlabelentry (LexState *ls, Labellist *l, TString *name,$/;"	f	file:
newprefile	liblua/liolib.c	/^static LStream *newprefile (lua_State *L) {$/;"	f	file:
newupvalue	liblua/lparser.c	/^static int newupvalue (FuncState *fs, TString *name, expdesc *v) {$/;"	f	file:
next	liblua/lfunc.h	/^      UpVal *next;  \/* linked list *\/$/;"	m	struct:UpVal::__anon10::__anon11
next	liblua/llex.c	32;"	d	file:
next	liblua/lobject.h	/^    int next;  \/* for chaining (offset for next node) *\/$/;"	m	struct:TKey::__anon23
next	liblua/lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::
next	nbase/nbase_addrset.c	/^  struct addrset_elem *next;$/;"	m	struct:addrset_elem	typeref:struct:addrset_elem::addrset_elem	file:
next	nsock/src/gh_list.h	/^  struct gh_list_node *next;$/;"	m	struct:gh_list_node	typeref:struct:gh_list_node::gh_list_node
next_bit_is_one	nbase/nbase_addrset.c	/^static u32 next_bit_is_one(u32 mask, u32 value) {$/;"	f	file:
next_bit_one	nbase/nbase_addrset.c	/^  struct trie_node *next_bit_one;$/;"	m	struct:trie_node	typeref:struct:trie_node::trie_node	file:
next_bit_zero	nbase/nbase_addrset.c	/^  struct trie_node *next_bit_zero;$/;"	m	struct:trie_node	typeref:struct:trie_node::trie_node	file:
next_ci	liblua/ldo.c	395;"	d	file:
next_event_serial	nsock/src/nsock_internal.h	/^  unsigned long next_event_serial;$/;"	m	struct:npool
next_expirable_event	nsock/src/nsock_internal.h	/^static inline struct nevent *next_expirable_event(struct npool *nsp) {$/;"	f
next_iod_serial	nsock/src/nsock_internal.h	/^  unsigned long next_iod_serial;$/;"	m	struct:npool
nextc	liblua/liolib.c	/^static int nextc (RN *rn) {$/;"	f	file:
nh	liblua/lparser.c	/^  int nh;  \/* total number of 'record' elements *\/$/;"	m	struct:ConsControl	file:
nhsize	liblua/ltable.c	/^  unsigned int nhsize;$/;"	m	struct:__anon9	file:
nilK	liblua/lcode.c	/^static int nilK (FuncState *fs) {$/;"	f	file:
niod	nsock/src/nsock_internal.h	/^struct niod {$/;"	s
nk	liblua/lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anon23
nk	liblua/lparser.h	/^  int nk;  \/* number of elements in 'k' *\/$/;"	m	struct:FuncState
nlocvars	liblua/lparser.h	/^  short nlocvars;  \/* number of elements in 'f->locvars' *\/$/;"	m	struct:FuncState
nny	liblua/lstate.h	/^  unsigned short nny;  \/* number of non-yieldable calls in stack *\/$/;"	m	struct:lua_State
noLuaClosure	liblua/ldebug.c	34;"	d	file:
no_argument	nbase/getopt.h	62;"	d
no_argument	nbase/getopt.h	63;"	d
node	liblua/lobject.h	/^  Node *node;$/;"	m	struct:Table
node	nsock/tests/ghheaps.c	/^  gh_hnode_t  node;$/;"	m	struct:testitem	file:
node2int	nsock/tests/ghheaps.c	/^static int node2int(gh_hnode_t *hnode) {$/;"	f	file:
node_delete	nsock/src/nsock_proxy.h	/^  void (*node_delete)(struct proxy_node *node);$/;"	m	struct:proxy_op
node_new	nsock/src/nsock_proxy.h	/^  int (*node_new)(struct proxy_node **node, const struct uri *uri);$/;"	m	struct:proxy_op
nodeq	nsock/src/engine_iocp.c	/^  gh_lnode_t nodeq;$/;"	m	struct:extended_overlapped	file:
nodeq	nsock/src/nsock_internal.h	/^  gh_lnode_t nodeq;$/;"	m	struct:niod
nodeq	nsock/src/nsock_proxy.h	/^  gh_lnode_t nodeq;$/;"	m	struct:proxy_node
nodeq_io	nsock/src/nsock_internal.h	/^  gh_lnode_t nodeq_io;$/;"	m	struct:nevent
nodeq_pcap	nsock/src/nsock_internal.h	/^  gh_lnode_t nodeq_pcap;$/;"	m	struct:nevent
nodes	nsock/src/nsock_proxy.h	/^  gh_list_t nodes;$/;"	m	struct:proxy_chain
nodestr	nsock/src/nsock_proxy.h	/^  char *nodestr; \/* used for log messages *\/$/;"	m	struct:proxy_node
nodeval	nsock/tests/ghlists.c	/^static unsigned int nodeval(gh_lnode_t *lnode) {$/;"	f	file:
noenv	liblua/loadlib.c	/^static int noenv (lua_State *L) {$/;"	f	file:
nop_handler	nsock/tests/logs.c	/^static void nop_handler(nsock_pool nsp, nsock_event nse, void *udata) {$/;"	f	file:
nospecials	liblua/lstrlib.c	/^static int nospecials (const char *p, size_t l) {$/;"	f	file:
novariant	liblua/lobject.h	130;"	d
np	liblua/lparser.h	/^  int np;  \/* number of elements in 'p' *\/$/;"	m	struct:FuncState
nparams	liblua/lua.h	/^  unsigned char nparams;\/* (u) number of parameters *\/$/;"	m	struct:lua_Debug
npool	nsock/src/nsock_internal.h	/^struct npool {$/;"	s
nrand_addrandom	nbase/nbase_rnd.c	/^static void nrand_addrandom(nrand_h *rand, u8 *buf, int len) {$/;"	f	file:
nrand_get	nbase/nbase_rnd.c	/^int nrand_get(nrand_h *r, void *buf, size_t len) {$/;"	f
nrand_getbyte	nbase/nbase_rnd.c	/^static u8 nrand_getbyte(nrand_h *r) {$/;"	f	file:
nrand_h	nbase/nbase_rnd.c	/^typedef struct nrand_handle nrand_h;$/;"	t	typeref:struct:nrand_handle	file:
nrand_handle	nbase/nbase_rnd.c	/^struct nrand_handle {$/;"	s	file:
nrand_init	nbase/nbase_rnd.c	/^void nrand_init(nrand_h *r) {$/;"	f
nresults	liblua/lapi.c	/^  int nresults;$/;"	m	struct:CallS	file:
nresults	liblua/lstate.h	/^  short nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo
nse	nsock/src/engine_iocp.c	/^  struct nevent *nse;$/;"	m	struct:extended_overlapped	typeref:struct:extended_overlapped::nevent	file:
nseU_appendfstr	nse_utility.cc	/^void nseU_appendfstr(lua_State *L, int idx, const char *fmt, ...)$/;"	f
nseU_checkinteger	nse_utility.cc	/^int nseU_checkinteger(lua_State *L, int arg)$/;"	f
nseU_checkport	nse_utility.cc	/^unsigned short nseU_checkport(lua_State *L, int idx, const char **protocol)$/;"	f
nseU_checktarget	nse_utility.cc	/^void nseU_checktarget(lua_State *L, int idx, const char **address, const char **targetname)$/;"	f
nseU_checkudata	nse_utility.cc	/^void *nseU_checkudata(lua_State *L, int idx, int upvalue, const char *name)$/;"	f
nseU_safeerror	nse_utility.cc	/^int nseU_safeerror(lua_State *L, const char *fmt, ...)$/;"	f
nseU_setbfield	nse_utility.cc	/^void nseU_setbfield(lua_State *L, int idx, const char *field, int b)$/;"	f
nseU_setsfield	nse_utility.cc	/^void nseU_setsfield(lua_State *L, int idx, const char *field, const char *what)$/;"	f
nseU_success	nse_utility.cc	/^int nseU_success(lua_State *L)$/;"	f
nseU_typeerror	nse_utility.cc	/^void nseU_typeerror(lua_State *L, int idx, const char *type)$/;"	f
nse_eof	nsock/src/nsock_event.c	/^int nse_eof(nsock_event nse) {$/;"	f
nse_errorcode	nsock/src/nsock_event.c	/^int nse_errorcode(nsock_event nse) {$/;"	f
nse_id	nsock/src/engine_iocp.c	/^  nsock_event_id nse_id;$/;"	m	struct:extended_overlapped	file:
nse_id	nsock/src/nsock_event.c	/^nsock_event_id nse_id(nsock_event nse) {$/;"	f
nse_iod	nsock/src/nsock_event.c	/^nsock_iod nse_iod(nsock_event ms_event) {$/;"	f
nse_nsock_get_ssl	nse_nsock.cc	/^SSL *nse_nsock_get_ssl (lua_State *L)$/;"	f
nse_nsock_udata	nse_nsock.cc	/^typedef struct nse_nsock_udata$/;"	s	file:
nse_nsock_udata	nse_nsock.cc	/^} nse_nsock_udata;$/;"	t	typeref:struct:nse_nsock_udata	file:
nse_nsock_udata	nse_nsock_tmp.cc	/^typedef struct nse_nsock_udata$/;"	s	file:
nse_nsock_udata	nse_nsock_tmp.cc	/^}nse_nsock_udata;$/;"	t	typeref:struct:nse_nsock_udata	file:
nse_readbuf	nsock/src/nsock_event.c	/^char *nse_readbuf(nsock_event nse, int *nbytes) {$/;"	f
nse_readpcap	nsock/src/nsock_pcap.c	/^void nse_readpcap(nsock_event nsev, const unsigned char **l2_data, size_t *l2_len,$/;"	f
nse_restore	nse_main.cc	/^int nse_restore(lua_State *L, int number)$/;"	f
nse_status	nsock/include/nsock.h	/^enum nse_status {$/;"	g
nse_status	nsock/src/nsock_event.c	/^enum nse_status nse_status(nsock_event nse) {$/;"	f
nse_status2str	nsock/src/nsock_event.c	/^const char *nse_status2str(enum nse_status status) {$/;"	f
nse_type	nsock/include/nsock.h	/^enum nse_type {$/;"	g
nse_type	nsock/src/nsock_event.c	/^enum nse_type nse_type(nsock_event nse) {$/;"	f
nse_type2str	nsock/src/nsock_event.c	/^const char *nse_type2str(enum nse_type type) {$/;"	f
nse_yield	nse_main.cc	/^int nse_yield(lua_State *L)$/;"	f
nseid	nse_nsock.cc	/^  nsock_event_id nseid;$/;"	m	struct:nse_nsock_udata	file:
nsi	nsock/tests/connect.c	/^  nsock_iod  nsi;$/;"	m	struct:connect_test_data	file:
nsi_set_ssl_session	nsock/src/nsock_iod.c	/^void nsi_set_ssl_session(struct niod *iod, SSL_SESSION *sessid) {$/;"	f
nsi_ssl_post_connect_verify	nsock/src/nsock_ssl.c	/^int nsi_ssl_post_connect_verify(const nsock_iod nsockiod) {$/;"	f
nsiod	nse_nsock.cc	/^  nsock_iod nsiod;$/;"	m	struct:nse_nsock_udata	file:
nsiod	nse_nsock_tmp.cc	/^	nsock_iod nsiod;$/;"	m	struct:nse_nsock_udata	file:
nsock_connect_internal	nsock/src/nsock_connect.c	/^void nsock_connect_internal(struct npool *ms, struct nevent *nse, int type, int proto, struct sockaddr_storage *ss, size_t sslen,$/;"	f
nsock_connect_sctp	nsock/src/nsock_connect.c	/^nsock_event_id nsock_connect_sctp(nsock_pool nsp, nsock_iod ms_iod, nsock_ev_handler handler, int timeout_msecs,$/;"	f
nsock_connect_ssl	nsock/src/nsock_connect.c	/^nsock_event_id nsock_connect_ssl(nsock_pool nsp, nsock_iod nsiod, nsock_ev_handler handler, int timeout_msecs,$/;"	f
nsock_connect_tcp	nsock/src/nsock_connect.c	/^nsock_event_id nsock_connect_tcp(nsock_pool nsp, nsock_iod ms_iod, nsock_ev_handler handler, int timeout_msecs,$/;"	f
nsock_connect_udp	nsock/src/nsock_connect.c	/^nsock_event_id nsock_connect_udp(nsock_pool nsp, nsock_iod nsiod, nsock_ev_handler handler, void *userdata,$/;"	f
nsock_connect_unixsock_datagram	nsock/src/nsock_connect.c	/^nsock_event_id nsock_connect_unixsock_datagram(nsock_pool nsp, nsock_iod nsiod, nsock_ev_handler handler,$/;"	f
nsock_connect_unixsock_stream	nsock/src/nsock_connect.c	/^nsock_event_id nsock_connect_unixsock_stream(nsock_pool nsp, nsock_iod nsiod, nsock_ev_handler handler, int timeout_msecs,$/;"	f
nsock_del_mode	nsock/include/nsock.h	/^enum nsock_del_mode {$/;"	g
nsock_engine_destroy	nsock/src/nsock_internal.h	/^static inline void nsock_engine_destroy(struct npool *nsp) {$/;"	f
nsock_engine_init	nsock/src/nsock_internal.h	/^static inline int nsock_engine_init(struct npool *nsp) {$/;"	f
nsock_engine_iod_modify	nsock/src/nsock_internal.h	/^static inline int nsock_engine_iod_modify(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev_set, int ev_clr) {$/;"	f
nsock_engine_iod_register	nsock/src/nsock_internal.h	/^static inline int nsock_engine_iod_register(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev) {$/;"	f
nsock_engine_iod_unregister	nsock/src/nsock_internal.h	/^static inline int nsock_engine_iod_unregister(struct npool *nsp, struct niod *iod) {$/;"	f
nsock_engine_loop	nsock/src/nsock_internal.h	/^static inline int nsock_engine_loop(struct npool *nsp, int msec_timeout) {$/;"	f
nsock_ev_handler	nsock/include/nsock.h	/^typedef void (*nsock_ev_handler)(nsock_pool, nsock_event, void *);$/;"	t
nsock_event	nsock/include/nsock.h	/^typedef struct nevent *nsock_event;$/;"	t	typeref:struct:nevent
nsock_event_cancel	nsock/src/nsock_event.c	/^int nsock_event_cancel(nsock_pool ms_pool, nsock_event_id id, int notify) {$/;"	f
nsock_event_id	nsock/include/nsock.h	/^typedef unsigned long nsock_event_id;$/;"	t
nsock_gc	nse_nsock.cc	/^static int nsock_gc (lua_State *L)$/;"	f	file:
nsock_gc	nse_nsock_tmp.cc	/^static int nsock_gc(lua_State *L)$/;"	f	file:
nsock_get_loglevel	nsock/src/nsock_log.c	/^nsock_loglevel_t nsock_get_loglevel(void) {$/;"	f
nsock_gettimeofday	nsock/src/nsock_core.c	/^const struct timeval *nsock_gettimeofday() {$/;"	f
nsock_iod	nsock/include/nsock.h	/^typedef struct niod *nsock_iod;$/;"	t	typeref:struct:niod
nsock_iod_check_ssl	nsock/src/nsock_iod.c	/^int nsock_iod_check_ssl(nsock_iod iod) {$/;"	f
nsock_iod_delete	nsock/src/nsock_iod.c	/^void nsock_iod_delete(nsock_iod nsockiod, enum nsock_del_mode pending_response) {$/;"	f
nsock_iod_get_communication_info	nsock/src/nsock_connect.c	/^int nsock_iod_get_communication_info(nsock_iod iod, int *protocol, int *af,$/;"	f
nsock_iod_get_peerport	nsock/src/nsock_iod.c	/^int nsock_iod_get_peerport(nsock_iod iod) {$/;"	f
nsock_iod_get_read_count	nsock/src/nsock_iod.c	/^unsigned long nsock_iod_get_read_count(nsock_iod iod){$/;"	f
nsock_iod_get_sd	nsock/src/nsock_iod.c	/^int nsock_iod_get_sd(nsock_iod iod) {$/;"	f
nsock_iod_get_ssl	nsock/src/nsock_iod.c	/^nsock_ssl nsock_iod_get_ssl(nsock_iod iod) {$/;"	f
nsock_iod_get_ssl_session	nsock/src/nsock_iod.c	/^nsock_ssl_session nsock_iod_get_ssl_session(nsock_iod iod, int inc_ref) {$/;"	f
nsock_iod_get_udata	nsock/src/nsock_iod.c	/^void *nsock_iod_get_udata(nsock_iod iod) {$/;"	f
nsock_iod_get_write_count	nsock/src/nsock_iod.c	/^unsigned long nsock_iod_get_write_count(nsock_iod iod){$/;"	f
nsock_iod_id	nsock/src/nsock_iod.c	/^unsigned long nsock_iod_id(nsock_iod nsockiod) {$/;"	f
nsock_iod_is_pcap	nsock/src/nsock_pcap.c	/^int nsock_iod_is_pcap(nsock_iod iod) {$/;"	f
nsock_iod_linktype	nsock/src/nsock_pcap.c	/^int nsock_iod_linktype(nsock_iod iod) {$/;"	f
nsock_iod_new	nsock/src/nsock_iod.c	/^nsock_iod nsock_iod_new(nsock_pool nsockp, void *userdata) {$/;"	f
nsock_iod_new2	nsock/src/nsock_iod.c	/^nsock_iod nsock_iod_new2(nsock_pool nsockp, int sd, void *userdata) {$/;"	f
nsock_iod_set_hostname	nsock/src/nsock_iod.c	/^int nsock_iod_set_hostname(nsock_iod iod, const char *hostname) {$/;"	f
nsock_iod_set_ipoptions	nsock/src/nsock_iod.c	/^int nsock_iod_set_ipoptions(nsock_iod iod, void *opts, size_t optslen) {$/;"	f
nsock_iod_set_localaddr	nsock/src/nsock_iod.c	/^int nsock_iod_set_localaddr(nsock_iod iod, struct sockaddr_storage *ss,$/;"	f
nsock_iod_set_udata	nsock/src/nsock_iod.c	/^void nsock_iod_set_udata(nsock_iod iod, void *udata) {$/;"	f
nsock_library_initialize	nsock/src/nsock_pool.c	/^void nsock_library_initialize(void) {$/;"	f
nsock_list_engines	nsock/src/nsock_engines.c	/^const char *nsock_list_engines(void) {$/;"	f
nsock_log_debug	nsock/src/nsock_log.h	100;"	d
nsock_log_debug_all	nsock/src/nsock_log.h	95;"	d
nsock_log_error	nsock/src/nsock_log.h	111;"	d
nsock_log_info	nsock/src/nsock_log.h	106;"	d
nsock_log_rec	nsock/include/nsock.h	/^struct nsock_log_rec {$/;"	s
nsock_logger_t	nsock/include/nsock.h	/^typedef void (*nsock_logger_t)(const struct nsock_log_rec *rec);$/;"	t
nsock_loglevel2str	nsock/src/nsock_log.h	/^static inline const char *nsock_loglevel2str(nsock_loglevel_t level)$/;"	f
nsock_loglevel_t	nsock/include/nsock.h	/^} nsock_loglevel_t;$/;"	t	typeref:enum:__anon26
nsock_loop	nsock/src/nsock_core.c	/^enum nsock_loopstatus nsock_loop(nsock_pool nsp, int msec_timeout) {$/;"	f
nsock_loop_quit	nsock/src/nsock_core.c	/^void nsock_loop_quit(nsock_pool nsp) {$/;"	f
nsock_loopstatus	nsock/include/nsock.h	/^enum nsock_loopstatus {$/;"	g
nsock_make_socket	nsock/src/nsock_connect.c	/^static int nsock_make_socket(struct npool *ms, struct niod *iod, int family, int type, int proto) {$/;"	f	file:
nsock_pcap	nsock/src/nsock_pcap.h	/^} nsock_pcap;$/;"	t	typeref:struct:__anon28
nsock_pcap_get_l3_offset	nsock/src/nsock_pcap.c	/^static int nsock_pcap_get_l3_offset(pcap_t *pt, int *dl) {$/;"	f	file:
nsock_pcap_open	nsock/src/nsock_pcap.c	/^int nsock_pcap_open(nsock_pool nsp, nsock_iod nsiod, const char *pcap_device,$/;"	f
nsock_pcap_read_packet	nsock/src/nsock_pcap.c	/^nsock_event_id nsock_pcap_read_packet(nsock_pool nsp, nsock_iod nsiod,$/;"	f
nsock_pcap_set_filter	nsock/src/nsock_pcap.c	/^static int nsock_pcap_set_filter(struct npool *nsp, pcap_t *pt, const char *device,$/;"	f	file:
nsock_pool	nsock/include/nsock.h	/^typedef struct npool *nsock_pool;$/;"	t	typeref:struct:npool
nsock_pool_add_event	nsock/src/nsock_core.c	/^void nsock_pool_add_event(struct npool *nsp, struct nevent *nse) {$/;"	f
nsock_pool_delete	nsock/src/nsock_pool.c	/^void nsock_pool_delete(nsock_pool ms_pool) {$/;"	f
nsock_pool_dtls_init	nsock/src/nsock_ssl.c	/^nsock_ssl_ctx nsock_pool_dtls_init(nsock_pool ms_pool, int flags) {$/;"	f
nsock_pool_get_error	nsock/src/nsock_pool.c	/^int nsock_pool_get_error(nsock_pool nsp) {$/;"	f
nsock_pool_get_udata	nsock/src/nsock_pool.c	/^void *nsock_pool_get_udata(nsock_pool nsp) {$/;"	f
nsock_pool_new	nsock/src/nsock_pool.c	/^nsock_pool nsock_pool_new(void *userdata) {$/;"	f
nsock_pool_set_broadcast	nsock/src/nsock_pool.c	/^void nsock_pool_set_broadcast(nsock_pool nsp, int optval) {$/;"	f
nsock_pool_set_device	nsock/src/nsock_pool.c	/^void nsock_pool_set_device(nsock_pool nsp, const char *device) {$/;"	f
nsock_pool_set_proxychain	nsock/src/nsock_proxy.c	/^int nsock_pool_set_proxychain(nsock_pool nspool, nsock_proxychain chain) {$/;"	f
nsock_pool_set_udata	nsock/src/nsock_pool.c	/^void nsock_pool_set_udata(nsock_pool nsp, void *data) {$/;"	f
nsock_pool_ssl_init	nsock/src/nsock_ssl.c	/^nsock_ssl_ctx nsock_pool_ssl_init(nsock_pool ms_pool, int flags) {$/;"	f
nsock_pool_ssl_init_helper	nsock/src/nsock_ssl.c	/^static nsock_ssl_ctx nsock_pool_ssl_init_helper(struct npool *ms, int flags) {$/;"	f	file:
nsock_printf	nsock/src/nsock_write.c	/^nsock_event_id nsock_printf(nsock_pool ms_pool, nsock_iod ms_iod,$/;"	f
nsock_proxy_ev_dispatch	nsock/src/nsock_proxy.c	/^void nsock_proxy_ev_dispatch(nsock_pool nspool, nsock_event nsevent, void *udata) {$/;"	f
nsock_proxy_state	nsock/src/nsock_proxy.h	/^enum nsock_proxy_state {$/;"	g
nsock_proxy_type	nsock/src/nsock_proxy.h	/^enum nsock_proxy_type {$/;"	g
nsock_proxychain	nsock/include/nsock.h	/^typedef struct proxy_chain *nsock_proxychain;$/;"	t	typeref:struct:proxy_chain
nsock_proxychain_delete	nsock/src/nsock_proxy.c	/^void nsock_proxychain_delete(nsock_proxychain chain) {$/;"	f
nsock_proxychain_new	nsock/src/nsock_proxy.c	/^int nsock_proxychain_new(const char *proxystr, nsock_proxychain *chain, nsock_pool nspool) {$/;"	f
nsock_read	nsock/src/nsock_read.c	/^nsock_event_id nsock_read(nsock_pool nsp, nsock_iod ms_iod,$/;"	f
nsock_read_types	nsock/src/nsock_internal.h	/^enum nsock_read_types {$/;"	g
nsock_readbytes	nsock/src/nsock_read.c	/^nsock_event_id nsock_readbytes(nsock_pool nsp, nsock_iod ms_iod,$/;"	f
nsock_readlines	nsock/src/nsock_read.c	/^nsock_event_id nsock_readlines(nsock_pool nsp, nsock_iod ms_iod,$/;"	f
nsock_reconnect_ssl	nsock/src/nsock_connect.c	/^nsock_event_id nsock_reconnect_ssl(nsock_pool nsp, nsock_iod nsiod, nsock_ev_handler handler, int timeout_msecs,$/;"	f
nsock_sendto	nsock/src/nsock_write.c	/^nsock_event_id nsock_sendto(nsock_pool ms_pool, nsock_iod ms_iod, nsock_ev_handler handler, int timeout_msecs,$/;"	f
nsock_set_default_engine	nsock/src/nsock_engines.c	/^int nsock_set_default_engine(char *engine) {$/;"	f
nsock_set_log_function	nsock/src/nsock_log.c	/^void nsock_set_log_function(nsock_logger_t logger) {$/;"	f
nsock_set_loglevel	nsock/src/nsock_log.c	/^void nsock_set_loglevel(nsock_loglevel_t loglevel) {$/;"	f
nsock_setup_udp	nsock/src/nsock_connect.c	/^int nsock_setup_udp(nsock_pool nsp, nsock_iod ms_iod, int af) {$/;"	f
nsock_ssl	nsock/include/nsock.h	/^typedef void *nsock_ssl;$/;"	t
nsock_ssl_ctx	nsock/include/nsock.h	/^typedef void *nsock_ssl_ctx;$/;"	t
nsock_ssl_session	nsock/include/nsock.h	/^typedef void *nsock_ssl_session;$/;"	t
nsock_stderr_logger	nsock/src/nsock_log.c	/^void nsock_stderr_logger(const struct nsock_log_rec *rec) {$/;"	f
nsock_timer_create	nsock/src/nsock_timers.c	/^nsock_event_id nsock_timer_create(nsock_pool ms_pool, nsock_ev_handler handler,$/;"	f
nsock_tod	nsock/src/nsock_core.c	/^struct timeval nsock_tod;$/;"	v	typeref:struct:timeval
nsock_trace_handler_callback	nsock/src/nsock_core.c	/^void nsock_trace_handler_callback(struct npool *ms, struct nevent *nse) {$/;"	f
nsock_write	nsock/src/nsock_write.c	/^nsock_event_id nsock_write(nsock_pool ms_pool, nsock_iod ms_iod,$/;"	f
nsocklib_initialized	nsock/src/nsock_pool.c	/^static int nsocklib_initialized = 0;$/;"	v	file:
nsp	nsock/src/nsock_internal.h	/^  struct npool *nsp;$/;"	m	struct:niod	typeref:struct:niod::npool
nsp	nsock/tests/basic.c	/^  nsock_pool nsp;$/;"	m	struct:basic_test_data	file:
nsp	nsock/tests/cancel.c	/^  nsock_pool nsp;$/;"	m	struct:basic_test_data	file:
nsp	nsock/tests/connect.c	/^  nsock_pool nsp;$/;"	m	struct:connect_test_data	file:
nsp	nsock/tests/logs.c	/^  nsock_pool nsp;$/;"	m	struct:log_test_data	file:
nsp	nsock/tests/timer.c	/^  nsock_pool nsp;$/;"	m	struct:timer_test_data	file:
null	nsock/src/proxy_socks4.c	/^    uint8_t  null;$/;"	m	struct:socks4_data	file:
nullarray_length	nbase/test/test-escape_windows_command_arg.c	/^static unsigned int nullarray_length(const char *a[])$/;"	f	file:
num	nsock/src/nsock_internal.h	/^  int num;$/;"	m	struct:readinfo
num2straux	liblua/lstrlib.c	/^static int num2straux (char *buff, int sz, lua_Number x) {$/;"	f	file:
num_ids	nsock/examples/nsock_test_timers.c	/^int num_ids = 0;$/;"	v
numarith	liblua/lobject.c	/^static lua_Number numarith (lua_State *L, int op, lua_Number v1,$/;"	f	file:
numparams	liblua/lobject.h	/^  lu_byte numparams;  \/* number of fixed parameters *\/$/;"	m	struct:Proto
numusearray	liblua/ltable.c	/^static unsigned int numusearray (const Table *t, unsigned int *nums) {$/;"	f	file:
numusehash	liblua/ltable.c	/^static int numusehash (const Table *t, unsigned int *nums, unsigned int *pna) {$/;"	f	file:
nups	liblua/lparser.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:FuncState
nups	liblua/lua.h	/^  unsigned char nups;	\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug
nuse	liblua/lstate.h	/^  int nuse;  \/* number of elements *\/$/;"	m	struct:stringtable
nval	liblua/lparser.h	/^    lua_Number nval;  \/* for VKFLT *\/$/;"	m	union:expdesc::__anon16
nvalue	liblua/lobject.h	165;"	d
o	util.cc	/^Ops o;$/;"	v
obj2gco	liblua/lstate.h	238;"	d
octet_bitvector	nbase/nbase_addrset.c	/^typedef bitvector_t octet_bitvector[(256 - 1) \/ (sizeof(unsigned long) * CHAR_BIT) + 1];$/;"	t	file:
old_errfunc	liblua/lstate.h	/^      ptrdiff_t old_errfunc;$/;"	m	struct:CallInfo::__anon3::__anon5
oldpc	liblua/lstate.h	/^  const Instruction *oldpc;  \/* last pc traced *\/$/;"	m	struct:lua_State
open	liblua/lfunc.h	/^    } open;$/;"	m	union:UpVal::__anon10	typeref:struct:UpVal::__anon10::__anon11
open	nbase/nbase.h	357;"	d
open_func	liblua/lparser.c	/^static void open_func (LexState *ls, FuncState *fs, BlockCnt *bl) {$/;"	f	file:
open_nse	nse_main.cc	/^void open_nse(void)$/;"	f
opencheck	liblua/liolib.c	/^static void opencheck (lua_State *L, const char *fname, const char *mode) {$/;"	f	file:
openupval	liblua/lstate.h	/^  UpVal *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State
opmode	liblua/lopcodes.c	72;"	d	file:
ops	nsock/src/nsock_proxy.h	/^  const struct proxy_op *ops;$/;"	m	struct:proxy_spec	typeref:struct:proxy_spec::proxy_op
optarg	nbase/getopt.c	/^char *optarg=0;$/;"	v
opterr	nbase/getopt.c	/^int optind=1, opterr=1, optopt=0;$/;"	v
optind	nbase/getopt.c	/^int optind=1, opterr=1, optopt=0;$/;"	v
option	nbase/getopt.h	/^struct option {$/;"	s
optional_argument	nbase/getopt.h	66;"	d
optional_argument	nbase/getopt.h	67;"	d
optopt	nbase/getopt.c	/^int optind=1, opterr=1, optopt=0;$/;"	v
os_clock	liblua/loslib.c	/^static int os_clock (lua_State *L) {$/;"	f	file:
os_date	liblua/loslib.c	/^static int os_date (lua_State *L) {$/;"	f	file:
os_difftime	liblua/loslib.c	/^static int os_difftime (lua_State *L) {$/;"	f	file:
os_execute	liblua/loslib.c	/^static int os_execute (lua_State *L) {$/;"	f	file:
os_exit	liblua/loslib.c	/^static int os_exit (lua_State *L) {$/;"	f	file:
os_getenv	liblua/loslib.c	/^static int os_getenv (lua_State *L) {$/;"	f	file:
os_remove	liblua/loslib.c	/^static int os_remove (lua_State *L) {$/;"	f	file:
os_rename	liblua/loslib.c	/^static int os_rename (lua_State *L) {$/;"	f	file:
os_setlocale	liblua/loslib.c	/^static int os_setlocale (lua_State *L) {$/;"	f	file:
os_time	liblua/loslib.c	/^static int os_time (lua_State *L) {$/;"	f	file:
os_tmpname	liblua/loslib.c	/^static int os_tmpname (lua_State *L) {$/;"	f	file:
otherwhite	liblua/lgc.h	94;"	d
output	liblua/luac.c	/^static const char* output=Output;	\/* actual output file name *\/$/;"	v	file:
ov	nsock/src/engine_iocp.c	/^  OVERLAPPED ov;$/;"	m	struct:extended_overlapped	file:
p	liblua/lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto::Proto
p	liblua/lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:LClosure::Proto
p	liblua/lobject.h	/^  void *p;         \/* light userdata *\/$/;"	m	union:Value
p	liblua/lstate.h	/^  struct Proto p;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Proto
p	liblua/lstrlib.c	/^  const char *p;  \/* pattern *\/$/;"	m	struct:GMatchState	file:
p	liblua/lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon8	file:
p	liblua/lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio
p_end	liblua/lstrlib.c	/^  const char *p_end;  \/* end ('\\0') of pattern *\/$/;"	m	struct:MatchState	file:
pack	liblua/ltablib.c	/^static int pack (lua_State *L) {$/;"	f	file:
packet	nsock/src/nsock_pcap.h	/^  const unsigned char *packet;  \/* caplen bytes *\/$/;"	m	struct:__anon28
packint	liblua/lstrlib.c	/^static void packint (luaL_Buffer *b, lua_Unsigned n,$/;"	f	file:
pairsmeta	liblua/lbaselib.c	/^static int pairsmeta (lua_State *L, const char *method, int iszero,$/;"	f	file:
panic	liblua/lauxlib.c	/^static int panic (lua_State *L) {$/;"	f	file:
panic	liblua/lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State
paranoid_list_check	nsock/src/gh_list.h	/^static inline void paranoid_list_check(gh_list_t *list) {$/;"	f
parlist	liblua/lparser.c	/^static void parlist (LexState *ls) {$/;"	f	file:
parse_ipv4_ranges	nbase/nbase_addrset.c	/^static int parse_ipv4_ranges(struct addrset_elem *elem, const char *spec)$/;"	f	file:
parse_long	nbase/nbase_misc.c	/^long parse_long(const char *s, char **tail)$/;"	f
parse_targets	main.cc	/^static void parse_targets(std::vector<Target *> &T, char *ip_str)$/;"	f	file:
parse_uri	nsock/src/nsock_proxy.c	/^static int parse_uri(const char *proxystr, struct uri *uri) {$/;"	f	file:
partition	liblua/ltablib.c	/^static IdxT partition (lua_State *L, IdxT lo, IdxT up) {$/;"	f	file:
pass	nsock/src/nsock_proxy.h	/^  char *pass;$/;"	m	struct:uri
patchlistaux	liblua/lcode.c	/^static void patchlistaux (FuncState *fs, int list, int vtarget, int reg,$/;"	f	file:
patchtestreg	liblua/lcode.c	/^static int patchtestreg (FuncState *fs, int node, int reg) {$/;"	f	file:
path	nsock/src/nsock_proxy.h	/^  char *path;$/;"	m	struct:uri
path_get_basename	nbase/nbase_str.c	/^char *path_get_basename(const char *path) {$/;"	f
path_get_dirname	nbase/nbase_str.c	/^char *path_get_dirname(const char *path) {$/;"	f
pc	liblua/lparser.h	/^  int pc;  \/* next position to code (equivalent to 'ncode') *\/$/;"	m	struct:FuncState
pc	liblua/lparser.h	/^  int pc;  \/* position in code *\/$/;"	m	struct:Labeldesc
pcRel	liblua/ldebug.h	14;"	d
pcap	nsock/src/nsock_internal.h	/^  void *pcap;$/;"	m	struct:niod
pcap_desc	nsock/src/nsock_pcap.h	/^  int pcap_desc;$/;"	m	struct:__anon27
pcap_device	nsock/src/nsock_pcap.h	/^  char *pcap_device;$/;"	m	struct:__anon27
pcap_gc	nse_nsock.cc	/^static int pcap_gc (lua_State *L)$/;"	f	file:
pcap_read_events	nsock/src/nsock_internal.h	/^  gh_list_t pcap_read_events;$/;"	m	struct:npool
pcap_read_on_nonselect	nsock/src/nsock_core.c	/^int pcap_read_on_nonselect(struct npool *nsp) {$/;"	f
pcap_receive_handler	nse_nsock.cc	/^static void pcap_receive_handler (nsock_pool nsp, nsock_event nse, void *ud)$/;"	f	file:
peer	nsock/src/nsock_internal.h	/^  struct sockaddr_storage peer;$/;"	m	struct:niod	typeref:struct:niod::sockaddr_storage
peerlen	nsock/src/nsock_internal.h	/^  size_t peerlen;$/;"	m	struct:niod
percent_decode	nsock/src/nsock_proxy.c	/^static int percent_decode(char *s) {$/;"	f	file:
pfatal	nsock/src/error.c	/^void pfatal(char *fmt, ...) {$/;"	f
pk_funcs	liblua/loadlib.c	/^static const luaL_Reg pk_funcs[] = {$/;"	v	file:
plus_flag	nbase/snprintf.c	/^    plus_flag      =  2,$/;"	e	enum:format_flags	file:
pmain	liblua/lua.c	/^static int pmain (lua_State *L) {$/;"	f	file:
pmain	liblua/luac.c	/^static int pmain(lua_State* L)$/;"	f	file:
point2uint	liblua/llimits.h	59;"	d
poll_destroy	nsock/src/engine_poll.c	/^void poll_destroy(struct npool *nsp) {$/;"	f
poll_engine_info	nsock/src/engine_poll.c	/^struct poll_engine_info {$/;"	s	file:
poll_init	nsock/src/engine_poll.c	/^int poll_init(struct npool *nsp) {$/;"	f
poll_iod_modify	nsock/src/engine_poll.c	/^int poll_iod_modify(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev_set, int ev_clr) {$/;"	f
poll_iod_register	nsock/src/engine_poll.c	/^int poll_iod_register(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev) {$/;"	f
poll_iod_unregister	nsock/src/engine_poll.c	/^int poll_iod_unregister(struct npool *nsp, struct niod *iod) {$/;"	f
poll_loop	nsock/src/engine_poll.c	/^int poll_loop(struct npool *nsp, int msec_timeout) {$/;"	f
port	nsock/src/nsock_proxy.h	/^  int port;$/;"	m	struct:uri
port	nsock/src/nsock_proxy.h	/^  unsigned short port;$/;"	m	struct:proxy_node
port	nsock/src/proxy_socks4.c	/^    uint16_t port;$/;"	m	struct:socks4_data	file:
pos	nsock/src/filespace.h	/^  char *pos;$/;"	m	struct:filespace
posix_io_operations	nsock/src/nsock_engines.c	/^struct io_operations posix_io_operations = {$/;"	v	typeref:struct:io_operations
posix_iod_connect	nsock/src/nsock_engines.c	/^int posix_iod_connect(struct npool *nsp, int sockfd, const struct sockaddr *addr, socklen_t addrlen) {$/;"	f
posix_iod_read	nsock/src/nsock_engines.c	/^int posix_iod_read(struct npool *nsp, int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen) {$/;"	f
posix_iod_write	nsock/src/nsock_engines.c	/^int posix_iod_write(struct npool *nsp, int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen) {$/;"	f
posrelat	liblua/lstrlib.c	/^static lua_Integer posrelat (lua_Integer pos, size_t len) {$/;"	f	file:
prefix	nbase/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	nsock/src/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	nsock/src/nsock_proxy.h	/^  const char *prefix;$/;"	m	struct:proxy_spec
preinit_thread	liblua/lstate.c	/^static void preinit_thread (lua_State *L, global_State *g) {$/;"	f	file:
prepstate	liblua/lstrlib.c	/^static void prepstate (MatchState *ms, lua_State *L,$/;"	f	file:
prev	liblua/lparser.c	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign::LHS_assign	file:
prev	liblua/lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState
prev	nsock/src/gh_list.h	/^  struct gh_list_node *prev;$/;"	m	struct:gh_list_node	typeref:struct:gh_list_node::gh_list_node
previous	liblua/ldo.c	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp::lua_longjmp	file:
previous	liblua/lparser.c	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt::BlockCnt	file:
previous	liblua/lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::CallInfo
primaryexp	liblua/lparser.c	/^static void primaryexp (LexState *ls, expdesc *v) {$/;"	f	file:
print_usage	liblua/lua.c	/^static void print_usage (const char *badoption) {$/;"	f	file:
print_version	liblua/lua.c	/^static void print_version (void) {$/;"	f	file:
priority	liblua/lparser.c	/^} priority[] = {  \/* ORDER OPR *\/$/;"	v	typeref:struct:__anon12	file:
processResponse	nselib/dns.lua	/^local function processResponse(response, dname, dtype, options)$/;"	f
process_event	nsock/src/nsock_core.c	/^void process_event(struct npool *nsp, gh_list_t *evlist, struct nevent *nse, int ev) {$/;"	f
process_expired_events	nsock/src/nsock_core.c	/^void process_expired_events(struct npool *nsp) {$/;"	f
process_iod_events	nsock/src/nsock_core.c	/^void process_iod_events(struct npool *nsp, struct niod *nsi, int ev) {$/;"	f
progname	liblua/lua.c	/^static const char *progname = LUA_PROGNAME;$/;"	v	file:
progname	liblua/luac.c	/^static const char* progname=PROGNAME;	\/* actual program name *\/$/;"	v	file:
propagateall	liblua/lgc.c	/^static void propagateall (global_State *g) {$/;"	f	file:
propagatemark	liblua/lgc.c	/^static void propagatemark (global_State *g) {$/;"	f	file:
proto	nse_nsock.cc	/^  int proto;$/;"	m	struct:nse_nsock_udata	file:
proto	nse_nsock_tmp.cc	/^	int proto;$/;"	m	struct:nse_nsock_udata	file:
prototypes	nbase/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prototypes	nsock/src/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
proxy_chain	nsock/src/nsock_proxy.h	/^struct proxy_chain {$/;"	s
proxy_chain_context	nsock/src/nsock_proxy.h	/^struct proxy_chain_context {$/;"	s
proxy_chain_context_delete	nsock/src/nsock_proxy.c	/^void proxy_chain_context_delete(struct proxy_chain_context *ctx) {$/;"	f
proxy_chain_context_new	nsock/src/nsock_proxy.c	/^struct proxy_chain_context *proxy_chain_context_new(nsock_pool nspool) {$/;"	f
proxy_ctx_node_next	nsock/src/nsock_proxy.h	/^static inline struct proxy_node *proxy_ctx_node_next(struct proxy_chain_context *ctx) {$/;"	f
proxy_http_handler	nsock/src/proxy_http.c	/^static void proxy_http_handler(nsock_pool nspool, nsock_event nsevent, void *udata) {$/;"	f	file:
proxy_http_node_delete	nsock/src/proxy_http.c	/^static void proxy_http_node_delete(struct proxy_node *node) {$/;"	f	file:
proxy_http_node_new	nsock/src/proxy_http.c	/^static int proxy_http_node_new(struct proxy_node **node, const struct uri *uri) {$/;"	f	file:
proxy_node	nsock/src/nsock_proxy.h	/^struct proxy_node {$/;"	s
proxy_node_new	nsock/src/nsock_proxy.c	/^static struct proxy_node *proxy_node_new(char *proxystr) {$/;"	f	file:
proxy_op	nsock/src/nsock_proxy.h	/^struct proxy_op {$/;"	s
proxy_parser	nsock/src/nsock_proxy.c	/^struct proxy_parser {$/;"	s	file:
proxy_parser_delete	nsock/src/nsock_proxy.c	/^void proxy_parser_delete(struct proxy_parser *parser) {$/;"	f
proxy_parser_new	nsock/src/nsock_proxy.c	/^struct proxy_parser *proxy_parser_new(const char *proxychainstr) {$/;"	f
proxy_parser_next	nsock/src/nsock_proxy.c	/^void proxy_parser_next(struct proxy_parser *parser) {$/;"	f
proxy_resolve	nsock/src/nsock_proxy.c	/^int proxy_resolve(const char *host, struct sockaddr *addr, size_t *addrlen) {$/;"	f
proxy_socks4_handler	nsock/src/proxy_socks4.c	/^static void proxy_socks4_handler(nsock_pool nspool, nsock_event nsevent, void *udata) {$/;"	f	file:
proxy_socks4_node_delete	nsock/src/proxy_socks4.c	/^static void proxy_socks4_node_delete(struct proxy_node *node) {$/;"	f	file:
proxy_socks4_node_new	nsock/src/proxy_socks4.c	/^static int proxy_socks4_node_new(struct proxy_node **node, const struct uri *uri) {$/;"	f	file:
proxy_spec	nsock/src/nsock_proxy.h	/^struct proxy_spec {$/;"	s
pt	nsock/src/nsock_pcap.h	/^  pcap_t *pt;$/;"	m	struct:__anon27
push_captures	liblua/lstrlib.c	/^static int push_captures (MatchState *ms, const char *s, const char *e) {$/;"	f	file:
push_onecapture	liblua/lstrlib.c	/^static void push_onecapture (MatchState *ms, int i, const char *s,$/;"	f	file:
pushargs	liblua/lua.c	/^static int pushargs (lua_State *L) {$/;"	f	file:
pushclosure	liblua/lvm.c	/^static void pushclosure (lua_State *L, Proto *p, UpVal **encup, StkId base,$/;"	f	file:
pusherror	liblua/loadlib.c	/^static void pusherror (lua_State *L) {$/;"	f	file:
pushfuncname	liblua/lauxlib.c	/^static void pushfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	file:
pushglobalfuncname	liblua/lauxlib.c	/^static int pushglobalfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	file:
pushline	liblua/lua.c	/^static int pushline (lua_State *L, int firstline) {$/;"	f	file:
pushnexttemplate	liblua/loadlib.c	/^static const char *pushnexttemplate (lua_State *L, const char *path) {$/;"	f	file:
pushnumint	liblua/lmathlib.c	/^static void pushnumint (lua_State *L, lua_Number d) {$/;"	f	file:
pushstr	liblua/lobject.c	/^static void pushstr (lua_State *L, const char *str, size_t l) {$/;"	f	file:
pushunsigned	liblua/lbitlib.c	22;"	d	file:
pushutfchar	liblua/lutf8lib.c	/^static void pushutfchar (lua_State *L, int arg) {$/;"	f	file:
putenv	nbase/nbase.h	359;"	d
pvalue	liblua/lobject.h	168;"	d
px_chain	nsock/src/nsock_internal.h	/^  struct proxy_chain *px_chain;$/;"	m	struct:npool	typeref:struct:npool::proxy_chain
px_chain	nsock/src/nsock_proxy.h	/^  const struct proxy_chain *px_chain;$/;"	m	struct:proxy_chain_context	typeref:struct:proxy_chain_context::proxy_chain
px_ctx	nsock/src/nsock_internal.h	/^  struct proxy_chain_context *px_ctx;$/;"	m	struct:niod	typeref:struct:niod::proxy_chain_context
px_current	nsock/src/nsock_proxy.h	/^  struct proxy_node *px_current;$/;"	m	struct:proxy_chain_context	typeref:struct:proxy_chain_context::proxy_node
px_state	nsock/src/nsock_proxy.h	/^  enum nsock_proxy_state px_state;$/;"	m	struct:proxy_chain_context	typeref:enum:proxy_chain_context::nsock_proxy_state
query	nselib/dns.lua	/^function query(dname, options)$/;"	f
queryAllServices 	nselib/dnssd.lua	/^	queryAllServices = function(host, port)$/;"	f
queryServices 	nselib/dnssd.lua	/^	queryServices = function(self, service)$/;"	f
quit	nsock/src/nsock_internal.h	/^  int quit;$/;"	m	struct:npool
r	liblua/llex.h	/^  lua_Number r;$/;"	m	union:__anon19
rcsid	nbase/snprintf.c	/^static const char rcsid[] =$/;"	v	file:
read_all	liblua/liolib.c	/^static void read_all (lua_State *L, FILE *f) {$/;"	f	file:
read_chars	liblua/liolib.c	/^static int read_chars (lua_State *L, FILE *f, size_t n) {$/;"	f	file:
read_count	nsock/src/nsock_internal.h	/^  unsigned long read_count;$/;"	m	struct:niod
read_events	nsock/src/nsock_internal.h	/^  gh_list_t read_events;$/;"	m	struct:npool
read_line	liblua/liolib.c	/^static int read_line (lua_State *L, FILE *f, int chop) {$/;"	f	file:
read_long_string	liblua/llex.c	/^static void read_long_string (LexState *ls, SemInfo *seminfo, int sep) {$/;"	f	file:
read_number	liblua/liolib.c	/^static int read_number (lua_State *L, FILE *f) {$/;"	f	file:
read_numeral	liblua/llex.c	/^static int read_numeral (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
read_string	liblua/llex.c	/^static void read_string (LexState *ls, int del, SemInfo *seminfo) {$/;"	f	file:
read_type	nsock/src/nsock_internal.h	/^  enum nsock_read_types read_type;$/;"	m	struct:readinfo	typeref:enum:readinfo::nsock_read_types
readable	liblua/loadlib.c	/^static int readable (const char *filename) {$/;"	f	file:
readbuf	nsock/src/engine_iocp.c	/^  char *readbuf;$/;"	m	struct:extended_overlapped	file:
readdecesc	liblua/llex.c	/^static int readdecesc (LexState *ls) {$/;"	f	file:
readdigits	liblua/liolib.c	/^static int readdigits (RN *rn, int hex) {$/;"	f	file:
reader	liblua/luac.c	/^static const char* reader(lua_State *L, void *ud, size_t *size)$/;"	f	file:
reader	liblua/lzio.h	/^  lua_Reader reader;		\/* reader function *\/$/;"	m	struct:Zio
readhexaesc	liblua/llex.c	/^static int readhexaesc (LexState *ls) {$/;"	f	file:
readinfo	nsock/src/nsock_internal.h	/^  struct readinfo readinfo;$/;"	m	struct:nevent	typeref:struct:nevent::readinfo
readinfo	nsock/src/nsock_internal.h	/^struct readinfo {$/;"	s
readpcapsd_count	nsock/src/nsock_internal.h	/^  int readpcapsd_count;$/;"	m	struct:niod
readsd_count	nsock/src/nsock_internal.h	/^  int readsd_count;$/;"	m	struct:niod
readsd_count	nsock/src/nsock_pcap.h	/^  int readsd_count;$/;"	m	struct:__anon27
readutf8esc	liblua/llex.c	/^static unsigned long readutf8esc (LexState *ls) {$/;"	f	file:
reallymarkobject	liblua/lgc.c	/^static void reallymarkobject (global_State *g, GCObject *o) {$/;"	f	file:
receive_buf	nse_nsock.cc	/^static int receive_buf (lua_State *L, int status, lua_KContext ctx)$/;"	f	file:
receive_callback	nse_nsock.cc	/^static void receive_callback (nsock_pool nsp, nsock_event nse, void *udata)$/;"	f	file:
receive_callback	nse_nsock_tmp.cc	/^static void receive_callback(nsock_pool nsp, nsock_event nse, void *udata)$/;"	f	file:
recfield	liblua/lparser.c	/^static void recfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
recover	liblua/ldo.c	/^static int recover (lua_State *L, int status) {$/;"	f	file:
recvProbeMatches 	nselib/wsdd.lua	/^  recvProbeMatches = function( self )$/;"	f
recvtime	nse_nsock.cc	/^  struct timeval recvtime; \/* Time packet was received, if r_success is true *\/$/;"	m	struct:nse_nsock_udata	typeref:struct:nse_nsock_udata::timeval	file:
refcount	liblua/lfunc.h	/^  lu_mem refcount;  \/* reference counter *\/$/;"	m	struct:UpVal
registerlocalvar	liblua/lparser.c	/^static int registerlocalvar (LexState *ls, TString *varname) {$/;"	f	file:
rehash	liblua/ltable.c	/^static void rehash (lua_State *L, Table *t, const TValue *ek) {$/;"	f	file:
remarkupvals	liblua/lgc.c	/^static void remarkupvals (global_State *g) {$/;"	f	file:
removeentry	liblua/lgc.c	/^static void removeentry (Node *n) {$/;"	f	file:
removevalues	liblua/lcode.c	/^static void removevalues (FuncState *fs, int list) {$/;"	f	file:
removevars	liblua/lparser.c	/^static void removevars (FuncState *fs, int tolevel) {$/;"	f	file:
repeatstat	liblua/lparser.c	/^static void repeatstat (LexState *ls, int line) {$/;"	f	file:
replacenonprintable	nbase/nbase_str.c	/^void replacenonprintable(char *str, int strlength, char replchar) {$/;"	f
report	liblua/lua.c	/^static int report (lua_State *L, int status) {$/;"	f	file:
reprepstate	liblua/lstrlib.c	/^static void reprepstate (MatchState *ms) {$/;"	f	file:
request_timer	nsock/examples/nsock_test_timers.c	/^nsock_event_id request_timer(nsock_pool nsp, nsock_ev_handler handler, int timeout_msecs, void *userdata) {$/;"	f
required_argument	nbase/getopt.h	64;"	d
required_argument	nbase/getopt.h	65;"	d
reserve	nbase/snprintf.c	/^  int (*reserve)(struct state *, size_t);$/;"	m	struct:state	file:
resetbit	liblua/lgc.h	73;"	d
resetbits	liblua/lgc.h	67;"	d
resethookcount	liblua/ldebug.h	18;"	d
resizebox	liblua/lauxlib.c	/^static void *resizebox (lua_State *L, int idx, size_t newsize) {$/;"	f	file:
resolve	nsock/examples/nsock_telnet.c	/^int resolve(char *hostname, struct in_addr *ip) {$/;"	f
resolve_name	nbase/nbase_addrset.c	/^static int resolve_name(const char *name, struct addrinfo **result, int af, int use_dns)$/;"	f	file:
restartcollection	liblua/lgc.c	/^static void restartcollection (global_State *g) {$/;"	f	file:
restorestack	liblua/ldo.h	33;"	d
resume	liblua/ldo.c	/^static void resume (lua_State *L, void *ud) {$/;"	f	file:
resume_error	liblua/ldo.c	/^static int resume_error (lua_State *L, const char *msg, int narg) {$/;"	f	file:
retstat	liblua/lparser.c	/^static void retstat (LexState *ls) {$/;"	f	file:
reverse	liblua/lapi.c	/^static void reverse (lua_State *L, StkId from, StkId to) {$/;"	f	file:
right	liblua/lparser.c	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anon12	file:
righttt	liblua/lobject.h	188;"	d
rttype	liblua/lobject.h	127;"	d
run	nselib/nse_main.lua	/^local function run(threads_iter, hosts)$/;"	f
run_main	nse_main.cc	/^static int run_main(lua_State *L)$/;"	f	file:
run_test	nbase/test/test-escape_windows_command_arg.c	/^static int run_test(const char *args[])$/;"	f	file:
runafewfinalizers	liblua/lgc.c	/^static int runafewfinalizers (lua_State *L) {$/;"	f	file:
runargs	liblua/lua.c	/^static int runargs (lua_State *L, char **argv, int n) {$/;"	f	file:
s	liblua/lauxlib.c	/^  const char *s;$/;"	m	struct:LoadS	file:
s	liblua/llimits.h	/^  void *s;$/;"	m	union:__anon13
s	nbase/nbase_rnd.c	/^  u8    i, j, s[256], *tmp;$/;"	m	struct:nrand_handle	file:
s	nbase/snprintf.c	/^  unsigned char *s;$/;"	m	struct:state	file:
s16	nbase/nbase.h	/^typedef int16_t s16;$/;"	t
s32	nbase/nbase.h	/^typedef int32_t s32;$/;"	t
s64	nbase/nbase.h	/^typedef int64_t s64;$/;"	t
s8	nbase/nbase.h	/^typedef int8_t s8;$/;"	t
safe_append_char	nbase/nbase_str.c	/^static char* safe_append_char(char* buf, char byte, unsigned int *rpos, unsigned int *rsize)$/;"	f	file:
safe_malloc	nbase/nbase_memalloc.c	/^void *safe_malloc(size_t size) {$/;"	f
safe_realloc	nbase/nbase_memalloc.c	/^void *safe_realloc(void *ptr, size_t size) {$/;"	f
safe_zalloc	nbase/nbase_memalloc.c	/^void *safe_zalloc(size_t size) {$/;"	f
save	liblua/llex.c	/^static void save (LexState *ls, int c) {$/;"	f	file:
save_and_next	liblua/llex.c	51;"	d	file:
savedpc	liblua/lstate.h	/^      const Instruction *savedpc;$/;"	m	struct:CallInfo::__anon3::__anon4
savestack	liblua/ldo.h	32;"	d
sbindir	nbase/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	nsock/src/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scanformat	liblua/lstrlib.c	/^static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {$/;"	f	file:
scheme	nsock/src/nsock_proxy.h	/^  char *scheme;$/;"	m	struct:uri
script_scan	nse_main.cc	/^void script_scan(std::vector<Target *> &targets)$/;"	f
scripts	util.h	/^		std::vector<std::string> scripts;$/;"	m	class:Ops
sd	nsock/src/nsock_internal.h	/^  int sd;$/;"	m	struct:niod
searcher_C	liblua/loadlib.c	/^static int searcher_C (lua_State *L) {$/;"	f	file:
searcher_Croot	liblua/loadlib.c	/^static int searcher_Croot (lua_State *L) {$/;"	f	file:
searcher_Lua	liblua/loadlib.c	/^static int searcher_Lua (lua_State *L) {$/;"	f	file:
searcher_preload	liblua/loadlib.c	/^static int searcher_preload (lua_State *L) {$/;"	f	file:
searchpath	liblua/loadlib.c	/^static const char *searchpath (lua_State *L, const char *name,$/;"	f	file:
searchupvalue	liblua/lparser.c	/^static int searchupvalue (FuncState *fs, TString *name) {$/;"	f	file:
searchvar	liblua/lparser.c	/^static int searchvar (FuncState *fs, TString *n) {$/;"	f	file:
seeall	nselib/stdnse.lua	/^function seeall(env)$/;"	f
seed	liblua/lstate.h	/^  unsigned int seed;  \/* randomized seed for hashes *\/$/;"	m	struct:global_State
select_destroy	nsock/src/engine_select.c	/^void select_destroy(struct npool *nsp) {$/;"	f
select_engine_info	nsock/src/engine_select.c	/^struct select_engine_info {$/;"	s	file:
select_init	nsock/src/engine_select.c	/^int select_init(struct npool *nsp) {$/;"	f
select_iod_modify	nsock/src/engine_select.c	/^int select_iod_modify(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev_set, int ev_clr) {$/;"	f
select_iod_register	nsock/src/engine_select.c	/^int select_iod_register(struct npool *nsp, struct niod *iod, struct nevent *nse, int ev) {$/;"	f
select_iod_unregister	nsock/src/engine_select.c	/^int select_iod_unregister(struct npool *nsp, struct niod *iod) {$/;"	f
select_loop	nsock/src/engine_select.c	/^int select_loop(struct npool *nsp, int msec_timeout) {$/;"	f
semerror	liblua/lparser.c	/^static l_noret semerror (LexState *ls, const char *msg) {$/;"	f	file:
seminfo	liblua/llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token
sendPackets	nselib/dns.lua	/^local function sendPackets(data, host, port, timeout, cnt, multiple, proto)$/;"	f
sendProbe 	nselib/wsdd.lua	/^  sendProbe = function( self )$/;"	f
separatetobefnz	liblua/lgc.c	/^static void separatetobefnz (global_State *g, int all) {$/;"	f	file:
serialize	nselib/stdnse.lua	/^function serialize(obj)$/;"	f
set2	liblua/ltablib.c	/^static void set2 (lua_State *L, IdxT i, IdxT j) {$/;"	f	file:
setMulticast 	nselib/wsdd.lua	/^  setMulticast = function( self, mcast )$/;"	f
setProbe 	nselib/wsdd.lua	/^  setProbe = function( self, probe )$/;"	f
setScripts	util.cc	/^void Ops::setScripts(char *arg)$/;"	f	class:Ops
setTargetName	Target.cc	/^void Target::setTargetName(const char *name)$/;"	f	class:Target
setTargetSockAddr	Target.cc	/^void Target::setTargetSockAddr(const struct sockaddr_storage *ss, size_t ss_len)$/;"	f	class:Target
setTimeout 	nselib/wsdd.lua	/^  setTimeout = function( self, timeout ) self.timeout = timeout end,$/;"	f
set_env	liblua/loadlib.c	/^static void set_env (lua_State *L) {$/;"	f	file:
set_nmap_libraries	nse_main.cc	/^static void set_nmap_libraries(lua_State *L)$/;"	f	file:
setallfields	liblua/loslib.c	/^static void setallfields (lua_State *L, struct tm *stm) {$/;"	f	file:
setarg	liblua/lopcodes.h	94;"	d
setarrayvector	liblua/ltable.c	/^static void setarrayvector (lua_State *L, Table *t, unsigned int size) {$/;"	f	file:
setbits	liblua/lgc.h	68;"	d
setboolfield	liblua/loslib.c	/^static void setboolfield (lua_State *L, const char *key, int value) {$/;"	f	file:
setbvalue	liblua/lobject.h	218;"	d
setclCvalue	liblua/lobject.h	245;"	d
setclLvalue	liblua/lobject.h	240;"	d
setdeadvalue	liblua/lobject.h	255;"	d
seterrorobj	liblua/ldo.c	/^static void seterrorobj (lua_State *L, int errcode, StkId oldtop) {$/;"	f	file:
setfield	liblua/loslib.c	/^static void setfield (lua_State *L, const char *key, int value) {$/;"	f	file:
setfltvalue	liblua/lobject.h	198;"	d
setfvalue	liblua/lobject.h	212;"	d
setgcovalue	liblua/lobject.h	221;"	d
sethvalue	liblua/lobject.h	250;"	d
sethvalue2s	liblua/lobject.h	273;"	d
setivalue	liblua/lobject.h	204;"	d
setnilvalue	liblua/lobject.h	210;"	d
setnodekey	liblua/lobject.h	485;"	d
setnodevector	liblua/ltable.c	/^static void setnodevector (lua_State *L, Table *t, unsigned int size) {$/;"	f	file:
setoah	liblua/lstate.h	130;"	d
setobj	liblua/lobject.h	259;"	d
setobj2n	liblua/lobject.h	278;"	d
setobj2s	liblua/lobject.h	271;"	d
setobj2t	liblua/lobject.h	282;"	d
setobjs2s	liblua/lobject.h	269;"	d
setobjt2t	liblua/lobject.h	276;"	d
setpath	liblua/loadlib.c	/^static void setpath (lua_State *L, const char *fieldname,$/;"	f	file:
setpause	liblua/lgc.c	/^static void setpause (global_State *g) {$/;"	f	file:
setprogdir	liblua/loadlib.c	/^static void setprogdir (lua_State *L) {$/;"	f	file:
setprogdir	liblua/loadlib.c	161;"	d	file:
setprogdir	liblua/loadlib.c	67;"	d	file:
setptvalue2s	liblua/lobject.h	274;"	d
setpvalue	liblua/lobject.h	215;"	d
setsvalue	liblua/lobject.h	225;"	d
setsvalue2n	liblua/lobject.h	279;"	d
setsvalue2s	liblua/lobject.h	272;"	d
settableProtected	liblua/lvm.c	780;"	d	file:
settabsb	liblua/ldblib.c	/^static void settabsb (lua_State *L, const char *k, int v) {$/;"	f	file:
settabsi	liblua/ldblib.c	/^static void settabsi (lua_State *L, const char *k, int v) {$/;"	f	file:
settabss	liblua/ldblib.c	/^static void settabss (lua_State *L, const char *k, const char *v) {$/;"	f	file:
setthvalue	liblua/lobject.h	235;"	d
settt_	liblua/lobject.h	196;"	d
setup_echo_tcp	nsock/tests/run_tests.sh	/^setup_echo_tcp() {$/;"	f
setup_echo_tcpssl	nsock/tests/run_tests.sh	/^setup_echo_tcpssl() {$/;"	f
setup_echo_udp	nsock/tests/run_tests.sh	/^setup_echo_udp() {$/;"	f
setuservalue	liblua/lobject.h	371;"	d
setuvalue	liblua/lobject.h	230;"	d
short_src	liblua/lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug
should_clear_ev_read	nsock/src/nsock_core.c	/^static int should_clear_ev_read(const struct niod *iod, int ev_set) {$/;"	f	file:
should_clear_ev_write	nsock/src/nsock_core.c	/^static int should_clear_ev_write(const struct niod *iod, int ev_set) {$/;"	f	file:
shrlen	liblua/lobject.h	/^  lu_byte shrlen;  \/* length for short strings *\/$/;"	m	struct:TString
simpleexp	liblua/lparser.c	/^static void simpleexp (LexState *ls, expdesc *v) {$/;"	f	file:
singlematch	liblua/lstrlib.c	/^static int singlematch (MatchState *ms, const char *s, const char *p,$/;"	f	file:
singlestep	liblua/lgc.c	/^static lu_mem singlestep (lua_State *L) {$/;"	f	file:
singlevar	liblua/lparser.c	/^static void singlevar (LexState *ls, expdesc *var) {$/;"	f	file:
singlevaraux	liblua/lparser.c	/^static void singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {$/;"	f	file:
size	liblua/lauxlib.c	/^  size_t size;$/;"	m	struct:LoadS	file:
size	liblua/lauxlib.h	/^  size_t size;  \/* buffer size *\/$/;"	m	struct:luaL_Buffer
size	liblua/lparser.h	/^    int size;$/;"	m	struct:Dyndata::__anon18
size	liblua/lparser.h	/^  int size;  \/* array size *\/$/;"	m	struct:Labellist
size	liblua/lstate.h	/^  int size;$/;"	m	struct:stringtable
sizeCclosure	liblua/lfunc.h	14;"	d
sizeLclosure	liblua/lfunc.h	17;"	d
sizearray	liblua/lobject.h	/^  unsigned int sizearray;  \/* size of 'array' array *\/$/;"	m	struct:Table
sizecode	liblua/lobject.h	/^  int sizecode;$/;"	m	struct:Proto
sizek	liblua/lobject.h	/^  int sizek;  \/* size of 'k' *\/$/;"	m	struct:Proto
sizelineinfo	liblua/lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto
sizelocvars	liblua/lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto
sizelstring	liblua/lstring.h	15;"	d
sizeludata	liblua/lstring.h	17;"	d
sizenode	liblua/lobject.h	519;"	d
sizep	liblua/lobject.h	/^  int sizep;  \/* size of 'p' *\/$/;"	m	struct:Proto
sizeudata	liblua/lstring.h	18;"	d
sizeupvalues	liblua/lobject.h	/^  int sizeupvalues;  \/* size of 'upvalues' *\/$/;"	m	struct:Proto
skipBOM	liblua/lauxlib.c	/^static int skipBOM (LoadF *lf) {$/;"	f	file:
skip_sep	liblua/llex.c	/^static int skip_sep (LexState *ls) {$/;"	f	file:
skipcomment	liblua/lauxlib.c	/^static int skipcomment (LoadF *lf, int *cp) {$/;"	f	file:
skipnoopstat	liblua/lparser.c	/^static void skipnoopstat (LexState *ls) {$/;"	f	file:
sleep	nbase/nbase_time.c	/^unsigned int sleep(unsigned int seconds)$/;"	f
sleep_callback	nse_nsock.cc	/^static void sleep_callback (nsock_pool nsp, nsock_event nse, void *ud)$/;"	f	file:
sleep_destructor	nse_nsock.cc	/^static int sleep_destructor (lua_State *L)$/;"	f	file:
slots	nsock/src/gh_heap.h	/^  gh_hnode_t **slots;$/;"	m	struct:gh_heap
sn_append_char	nbase/snprintf.c	/^sn_append_char (struct state *state, unsigned char c)$/;"	f	file:
sn_reserve	nbase/snprintf.c	/^sn_reserve (struct state *state, size_t n)$/;"	f	file:
snaplen	nsock/src/nsock_pcap.h	/^  int snaplen;$/;"	m	struct:__anon27
snprintf	nbase/nbase.h	362;"	d
snprintf	nbase/snprintf.c	/^snprintf (char *str, size_t sz, const char *format, ...)$/;"	f
sockaddr_storage	nbase/nbase_ipv6.h	/^struct sockaddr_storage {$/;"	s
sockaddr_storage_cmp	nbase/nbase_misc.c	/^int sockaddr_storage_cmp(const struct sockaddr_storage *a,$/;"	f
sockaddr_storage_equal	nbase/nbase_misc.c	/^int sockaddr_storage_equal(const struct sockaddr_storage *a,$/;"	f
sockaddr_storage_inet_pton	nbase/nbase_misc.c	/^int sockaddr_storage_inet_pton(const char * ip_str, struct sockaddr_storage * addr)$/;"	f
sockaddr_storage_iptop	nbase/nbase_misc.c	/^const char *sockaddr_storage_iptop(const struct sockaddr_storage * addr, char * dst)$/;"	f
sockaddr_to_addr	nbase/nbase_addrset.c	/^static int sockaddr_to_addr(const struct sockaddr *sa, u32 *addr)$/;"	f	file:
sockaddr_to_mask	nbase/nbase_addrset.c	/^static int sockaddr_to_mask (const struct sockaddr *sa, int bits, u32 *mask)$/;"	f	file:
socket_bindtodevice	nbase/nbase_misc.c	/^int socket_bindtodevice(int sd, const char *device) {$/;"	f
socket_count_dec_ssl_desire	nsock/src/nsock_core.c	/^static int socket_count_dec_ssl_desire(struct nevent *nse) {$/;"	f	file:
socket_count_read_dec	nsock/src/nsock_core.c	/^static int socket_count_read_dec(struct niod *iod) {$/;"	f	file:
socket_count_read_inc	nsock/src/nsock_core.c	/^static int socket_count_read_inc(struct niod *iod) {$/;"	f	file:
socket_count_readpcap_dec	nsock/src/nsock_core.c	/^static int socket_count_readpcap_dec(struct niod *iod) {$/;"	f	file:
socket_count_readpcap_inc	nsock/src/nsock_core.c	/^static int socket_count_readpcap_inc(struct niod *iod) {$/;"	f	file:
socket_count_write_dec	nsock/src/nsock_core.c	/^static int socket_count_write_dec(struct niod *iod) {$/;"	f	file:
socket_count_write_inc	nsock/src/nsock_core.c	/^static int socket_count_write_inc(struct niod *iod) {$/;"	f	file:
socket_count_zero	nsock/src/nsock_core.c	/^int socket_count_zero(struct niod *iod, struct npool *ms) {$/;"	f
socket_errno	nbase/nbase_misc.c	/^int socket_errno() {$/;"	f
socket_lock	nse_nsock.cc	/^static int socket_lock (lua_State *L, int idx)$/;"	f	file:
socket_strerror	nbase/nbase_misc.c	/^char *socket_strerror(int errnum) {$/;"	f
socket_unlock	nse_nsock.cc	/^static void socket_unlock (lua_State *L)$/;"	f	file:
socks4_data	nsock/src/proxy_socks4.c	/^struct socks4_data {$/;"	s	file:
socks4_data_init	nsock/src/proxy_socks4.c	/^static inline void socks4_data_init(struct socks4_data *socks4,$/;"	f	file:
sof	liblua/ltablib.c	250;"	d	file:
sort	liblua/ltablib.c	/^static int sort (lua_State *L) {$/;"	f	file:
sort_comp	liblua/ltablib.c	/^static int sort_comp (lua_State *L, int a, int b) {$/;"	f	file:
source	liblua/llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState
source	liblua/lobject.h	/^  TString  *source;  \/* used for debug information *\/$/;"	m	struct:Proto
source	liblua/lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug
source_addr	nse_nsock.cc	/^  struct sockaddr_storage source_addr;$/;"	m	struct:nse_nsock_udata	typeref:struct:nse_nsock_udata::sockaddr_storage	file:
source_addr	nse_nsock_tmp.cc	/^	struct sockaddr_storage source_addr;$/;"	m	struct:nse_nsock_udata	typeref:struct:nse_nsock_udata::sockaddr_storage	file:
source_addrlen	nse_nsock.cc	/^  size_t source_addrlen;$/;"	m	struct:nse_nsock_udata	file:
source_addrlen	nse_nsock_tmp.cc	/^	size_t source_addrlen;$/;"	m	struct:nse_nsock_udata	file:
space_flag	nbase/snprintf.c	/^    space_flag     =  4,$/;"	e	enum:format_flags	file:
spec	nsock/src/nsock_proxy.h	/^  const struct proxy_spec *spec;$/;"	m	struct:proxy_node	typeref:struct:proxy_node::proxy_spec
src	liblua/lstrlib.c	/^  const char *src;  \/* current position *\/$/;"	m	struct:GMatchState	file:
src_end	liblua/lstrlib.c	/^  const char *src_end;  \/* end ('\\0') of source string *\/$/;"	m	struct:MatchState	file:
src_init	liblua/lstrlib.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	file:
srcdir	nbase/Makefile	/^srcdir = .$/;"	m
srcdir	nsock/src/Makefile	/^srcdir = .$/;"	m
ss	nsock/src/nsock_proxy.h	/^  struct sockaddr_storage ss;$/;"	m	struct:proxy_node	typeref:struct:proxy_node::sockaddr_storage
ss_family	nbase/nbase_ipv6.h	/^  u16 ss_family;$/;"	m	struct:sockaddr_storage
ssl	nsock/src/nsock_internal.h	/^  SSL *ssl;$/;"	m	struct:niod
ssl	nsock/src/nsock_internal.h	/^  char *ssl;$/;"	m	struct:niod
ssl_desire	nsock/src/nsock_ssl.h	/^  int ssl_desire;$/;"	m	struct:sslinfo
ssl_init_common	nsock/src/nsock_ssl.c	/^static SSL_CTX *ssl_init_common() {$/;"	f	file:
ssl_init_helper	nsock/src/nsock_ssl.c	/^static SSL_CTX *ssl_init_helper(const SSL_METHOD *method) {$/;"	f	file:
ssl_session	nse_nsock.cc	/^  void *ssl_session;$/;"	m	struct:nse_nsock_udata	file:
ssl_session	nsock/examples/nsock_telnet.c	/^  void *ssl_session;$/;"	m	struct:telnet_state	file:
ssl_session	nsock/src/nsock_internal.h	/^  SSL_SESSION *ssl_session;$/;"	m	struct:niod
sslctx	nsock/src/nsock_internal.h	/^  SSL_CTX *sslctx;$/;"	m	struct:npool
sslen	nsock/src/nsock_proxy.h	/^  size_t sslen;$/;"	m	struct:proxy_node
sslinfo	nsock/src/nsock_internal.h	/^  struct sslinfo sslinfo;$/;"	m	struct:nevent	typeref:struct:nevent::sslinfo
sslinfo	nsock/src/nsock_ssl.h	/^struct sslinfo {$/;"	s
stack	liblua/lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State
stack_init	liblua/lstate.c	/^static void stack_init (lua_State *L1, lua_State *L) {$/;"	f	file:
stack_last	liblua/lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State
stackerror	liblua/ldo.c	/^static void stackerror (lua_State *L) {$/;"	f	file:
stackinuse	liblua/ldo.c	/^static int stackinuse (lua_State *L) {$/;"	f	file:
stacksize	liblua/lstate.h	/^  int stacksize;$/;"	m	struct:lua_State
start_capture	liblua/lstrlib.c	/^static const char *start_capture (MatchState *ms, const char *s,$/;"	f	file:
startpc	liblua/lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar
stat	nbase/nbase.h	350;"	d
state	nbase/snprintf.c	/^struct state {$/;"	s	file:
state	nsock/src/nsock_internal.h	/^  enum iod_state state;$/;"	m	struct:niod	typeref:enum:niod::iod_state
statement	liblua/lparser.c	/^static void statement (LexState *ls) {$/;"	f	file:
statlist	liblua/lparser.c	/^static void statlist (LexState *ls) {$/;"	f	file:
status	liblua/ldo.c	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp	file:
status	liblua/ldump.c	/^  int status;$/;"	m	struct:__anon21	file:
status	liblua/lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State
status	nse_nsock.cc	/^static void status (lua_State *L, enum nse_status status)$/;"	f	file:
status	nse_nsock_tmp.cc	/^static void status(lua_State *L, enum nse_status status)$/;"	f	file:
status	nsock/src/nsock_internal.h	/^  enum nse_status status;$/;"	m	struct:nevent	typeref:enum:nevent::nse_status
stdin_nsi	nsock/examples/nsock_telnet.c	/^  nsock_iod stdin_nsi;$/;"	m	struct:telnet_state	file:
stdin_pipe_r	nbase/nbase_winunix.c	/^static HANDLE stdin_pipe_r = NULL, stdin_pipe_w = NULL;$/;"	v	file:
stdin_pipe_w	nbase/nbase_winunix.c	/^static HANDLE stdin_pipe_r = NULL, stdin_pipe_w = NULL;$/;"	v	file:
stdin_thread	nbase/nbase_winunix.c	/^static HANDLE stdin_thread = NULL;$/;"	v	file:
stop	nsock/tests/timer.c	/^  int stop; \/* set to non-zero to stop the test *\/$/;"	m	struct:timer_test_data	file:
str	nbase/snprintf.c	/^  unsigned char *str;$/;"	m	struct:state	file:
str	nsock/src/filespace.h	/^  char *str;$/;"	m	struct:filespace
str	nsock/src/nsock_proxy.c	/^  char *str;$/;"	m	struct:proxy_parser	file:
str_byte	liblua/lstrlib.c	/^static int str_byte (lua_State *L) {$/;"	f	file:
str_char	liblua/lstrlib.c	/^static int str_char (lua_State *L) {$/;"	f	file:
str_checkname	liblua/lparser.c	/^static TString *str_checkname (LexState *ls) {$/;"	f	file:
str_dump	liblua/lstrlib.c	/^static int str_dump (lua_State *L) {$/;"	f	file:
str_find	liblua/lstrlib.c	/^static int str_find (lua_State *L) {$/;"	f	file:
str_find_aux	liblua/lstrlib.c	/^static int str_find_aux (lua_State *L, int find) {$/;"	f	file:
str_format	liblua/lstrlib.c	/^static int str_format (lua_State *L) {$/;"	f	file:
str_gsub	liblua/lstrlib.c	/^static int str_gsub (lua_State *L) {$/;"	f	file:
str_len	liblua/lstrlib.c	/^static int str_len (lua_State *L) {$/;"	f	file:
str_lower	liblua/lstrlib.c	/^static int str_lower (lua_State *L) {$/;"	f	file:
str_match	liblua/lstrlib.c	/^static int str_match (lua_State *L) {$/;"	f	file:
str_pack	liblua/lstrlib.c	/^static int str_pack (lua_State *L) {$/;"	f	file:
str_packsize	liblua/lstrlib.c	/^static int str_packsize (lua_State *L) {$/;"	f	file:
str_rep	liblua/lstrlib.c	/^static int str_rep (lua_State *L) {$/;"	f	file:
str_reverse	liblua/lstrlib.c	/^static int str_reverse (lua_State *L) {$/;"	f	file:
str_sub	liblua/lstrlib.c	/^static int str_sub (lua_State *L) {$/;"	f	file:
str_unpack	liblua/lstrlib.c	/^static int str_unpack (lua_State *L) {$/;"	f	file:
str_upper	liblua/lstrlib.c	/^static int str_upper (lua_State *L) {$/;"	f	file:
strcache	liblua/lstate.h	/^  TString *strcache[STRCACHE_N][STRCACHE_M];  \/* cache for strings in API *\/$/;"	m	struct:global_State
strcasecmp	nbase/nbase.h	365;"	d
strcasecmp	nbase/strcasecmp.c	/^int strcasecmp(const char *s1, const char *s2)$/;"	f
strcasestr	nbase/nbase_str.c	/^char *strcasestr(const char *haystack, const char *pneedle) {$/;"	f
strdup	nbase/nbase.h	355;"	d
stricmp	nbase/nbase.h	358;"	d
strict 	nselib/strict.lua	/^local function strict (env)$/;"	f
stringtable	liblua/lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	liblua/lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
strip	liblua/ldump.c	/^  int strip;$/;"	m	struct:__anon21	file:
stripping	liblua/luac.c	/^static int stripping=0;			\/* strip debug information? *\/$/;"	v	file:
strlib	liblua/lstrlib.c	/^static const luaL_Reg strlib[] = {$/;"	v	file:
strncasecmp	nbase/nbase.h	366;"	d
strncasecmp	nbase/strcasecmp.c	/^int strncasecmp(const char *s1, const char *s2, size_t n)$/;"	f
strt	liblua/lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State
subexpr	liblua/lparser.c	/^static BinOpr subexpr (LexState *ls, expdesc *v, int limit) {$/;"	f	file:
suffixedexp	liblua/lparser.c	/^static void suffixedexp (LexState *ls, expdesc *v) {$/;"	f	file:
svalue	liblua/lobject.h	333;"	d
swapextra	liblua/ldebug.c	/^static void swapextra (lua_State *L) {$/;"	f	file:
sweepgc	liblua/lstate.h	/^  GCObject **sweepgc;  \/* current position of sweep in list *\/$/;"	m	struct:global_State
sweeplist	liblua/lgc.c	/^static GCObject **sweeplist (lua_State *L, GCObject **p, lu_mem count) {$/;"	f	file:
sweepstep	liblua/lgc.c	/^static lu_mem sweepstep (lua_State *L, global_State *g,$/;"	f	file:
sweeptolive	liblua/lgc.c	/^static GCObject **sweeptolive (lua_State *L, GCObject **p) {$/;"	f	file:
sweepwholelist	liblua/lgc.c	724;"	d	file:
syslib	liblua/loslib.c	/^static const luaL_Reg syslib[] = {$/;"	v	file:
sz	nbase/snprintf.c	/^  size_t sz;$/;"	m	struct:state	file:
t	liblua/llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState
t	liblua/lparser.c	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl	file:
t	liblua/lparser.h	/^      lu_byte t;  \/* table (register or upvalue) *\/$/;"	m	struct:expdesc::__anon16::__anon17
t	liblua/lparser.h	/^  int t;  \/* patch list of 'exit when true' *\/$/;"	m	struct:expdesc
t	liblua/ltable.c	/^  Table *t;$/;"	m	struct:__anon9	file:
t_name	nsock/tests/test-common.h	/^  const char *t_name;$/;"	m	struct:test_case
t_run	nsock/tests/test-common.h	/^  int (*t_run)(void *tdata);$/;"	m	struct:test_case
t_setup	nsock/tests/test-common.h	/^  int (*t_setup)(void **tdata);$/;"	m	struct:test_case
t_teardown	nsock/tests/test-common.h	/^  int (*t_teardown)(void *tdata);$/;"	m	struct:test_case
tab_funcs	liblua/ltablib.c	/^static const luaL_Reg tab_funcs[] = {$/;"	v	file:
tag_error	liblua/lauxlib.c	/^static void tag_error (lua_State *L, int arg, int tag) {$/;"	f	file:
target_ev_type	nsock/src/nsock_proxy.h	/^  enum nse_type target_ev_type;$/;"	m	struct:proxy_chain_context	typeref:enum:proxy_chain_context::nse_type
target_handler	nsock/src/nsock_proxy.h	/^  nsock_ev_handler target_handler;$/;"	m	struct:proxy_chain_context
target_port	nsock/src/nsock_proxy.h	/^  unsigned short target_port;$/;"	m	struct:proxy_chain_context
target_ss	nsock/src/nsock_proxy.h	/^  struct sockaddr_storage target_ss;$/;"	m	struct:proxy_chain_context	typeref:struct:proxy_chain_context::sockaddr_storage
target_sslen	nsock/src/nsock_proxy.h	/^  size_t target_sslen;$/;"	m	struct:proxy_chain_context
targetipstr	Target.h	/^	const char *targetipstr() const {return targetipstring;}$/;"	f	class:Target
targetipstring	Target.h	/^	char targetipstring[INET6_ADDRSTRLEN];$/;"	m	class:Target
targetname	Target.h	/^	char *targetname;$/;"	m	class:Target
targetsock	Target.h	/^	struct sockaddr_storage targetsock;$/;"	m	class:Target	typeref:struct:Target::sockaddr_storage
tconcat	liblua/ltablib.c	/^static int tconcat (lua_State *L) {$/;"	f	file:
tcp_nsi	nsock/examples/nsock_telnet.c	/^  nsock_iod tcp_nsi;$/;"	m	struct:telnet_state	file:
telnet_event_handler	nsock/examples/nsock_telnet.c	/^void telnet_event_handler(nsock_pool nsp, nsock_event nse, void *mydata) {$/;"	f
telnet_state	nsock/examples/nsock_telnet.c	/^struct telnet_state {$/;"	s	file:
terminate_overlapped_event	nsock/src/engine_iocp.c	/^static void terminate_overlapped_event(struct npool *nsp, struct nevent *nse) {$/;"	f	file:
test2	liblua/liolib.c	/^static int test2 (RN *rn, const char *set) {$/;"	f	file:
testAMode	liblua/lopcodes.h	286;"	d
testTMode	liblua/lopcodes.h	287;"	d
test_case	nsock/tests/test-common.h	/^struct test_case {$/;"	s
test_case_run	nsock/tests/tests_main.c	/^static int test_case_run(const struct test_case *test) {$/;"	f	file:
test_eof	liblua/liolib.c	/^static int test_eof (lua_State *L, FILE *f) {$/;"	f	file:
test_run	nsock/tests/test-common.h	/^static inline int test_run(const struct test_case *test, void *tdata) {$/;"	f
test_setup	nsock/tests/test-common.h	/^static inline int test_setup(const struct test_case *test, void **tdata) {$/;"	f
test_teardown	nsock/tests/test-common.h	/^static inline int test_teardown(const struct test_case *test, void *tdata) {$/;"	f
test_then_block	liblua/lparser.c	/^static void test_then_block (LexState *ls, int *escapelist) {$/;"	f	file:
testbit	liblua/lgc.h	74;"	d
testbits	liblua/lgc.h	69;"	d
testitem	nsock/tests/ghheaps.c	/^struct testitem {$/;"	s	file:
testlist	nsock/tests/ghlists.c	/^struct testlist {$/;"	s	file:
testnext	liblua/lparser.c	/^static int testnext (LexState *ls, int c) {$/;"	f	file:
testprop	liblua/lctype.h	52;"	d
th	liblua/lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCUnion	typeref:struct:GCUnion::lua_State
theend	nbase/snprintf.c	/^  unsigned char *theend;$/;"	m	struct:state	file:
thread	nse_nsock.cc	/^  lua_State *thread;$/;"	m	struct:nse_nsock_udata	file:
thread	nse_nsock_tmp.cc	/^	lua_State *thread;$/;"	m	struct:nse_nsock_udata	file:
thread_stdin_handle	nbase/nbase_winunix.c	/^static HANDLE thread_stdin_handle = NULL;$/;"	v	file:
threads_iter	nselib/nse_main.lua	/^	local function threads_iter()$/;"	f
thvalue	liblua/lobject.h	177;"	d
time	nsock/include/nsock.h	/^  struct timeval time;$/;"	m	struct:nsock_log_rec	typeref:struct:nsock_log_rec::timeval
timeout	nse_nsock.cc	/^  int timeout;$/;"	m	struct:nse_nsock_udata	file:
timeout	nse_nsock_tmp.cc	/^	int timeout;$/;"	m	struct:nse_nsock_udata	file:
timeout	nsock/src/nsock_internal.h	/^  struct timeval timeout;$/;"	m	struct:nevent	typeref:struct:nevent::timeval
timer_count	nsock/tests/timer.c	/^  size_t timer_count;$/;"	m	struct:timer_test_data	file:
timer_handler	nsock/examples/nsock_test_timers.c	/^void timer_handler(nsock_pool nsp, nsock_event nse, void *mydata) {$/;"	f
timer_handler	nsock/tests/timer.c	/^static void timer_handler(nsock_pool nsp, nsock_event nse, void *tdata) {$/;"	f	file:
timer_list	nsock/tests/timer.c	/^  nsock_event_id timer_list[TIMERS_BUFFLEN];$/;"	m	struct:timer_test_data	file:
timer_setup	nsock/tests/timer.c	/^static int timer_setup(void **tdata) {$/;"	f	file:
timer_teardown	nsock/tests/timer.c	/^static int timer_teardown(void *tdata) {$/;"	f	file:
timer_test_data	nsock/tests/timer.c	/^struct timer_test_data {$/;"	s	file:
timer_totalmess	nsock/tests/timer.c	/^static int timer_totalmess(void *tdata) {$/;"	f	file:
tinsert	liblua/ltablib.c	/^static int tinsert (lua_State *L) {$/;"	f	file:
tmname	liblua/lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State
tmove	liblua/ltablib.c	/^static int tmove (lua_State *L) {$/;"	f	file:
tmp	nbase/nbase_rnd.c	/^  u8    i, j, s[256], *tmp;$/;"	m	struct:nrand_handle	file:
tmplen	nbase/nbase_rnd.c	/^  int   tmplen;$/;"	m	struct:nrand_handle	file:
tobefnz	liblua/lstate.h	/^  GCObject *tobefnz;  \/* list of userdata to be GC *\/$/;"	m	struct:global_State
tofile	liblua/liolib.c	/^static FILE *tofile (lua_State *L) {$/;"	f	file:
tofinalize	liblua/lgc.h	92;"	d
tointeger	liblua/lvm.h	43;"	d
token	liblua/llex.h	/^  int token;$/;"	m	struct:Token
tokens	nsock/src/nsock_proxy.c	/^  char *tokens;$/;"	m	struct:proxy_parser	file:
tolstream	liblua/liolib.c	145;"	d	file:
tonumber	liblua/lvm.h	40;"	d
tonumeral	liblua/lcode.c	/^static int tonumeral(const expdesc *e, TValue *v) {$/;"	f	file:
top	liblua/lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo
top	liblua/lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State
toproto	liblua/luac.c	137;"	d	file:
tostore	liblua/lparser.c	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl	file:
tostring	liblua/lvm.c	454;"	d	file:
total	nsock/tests/logs.c	/^  unsigned int total;$/;"	m	struct:log_test_data	file:
totalbytes	liblua/lstate.h	/^  l_mem totalbytes;  \/* number of bytes currently allocated - GCdebt *\/$/;"	m	struct:global_State
touched	liblua/lfunc.h	/^      int touched;  \/* mark to avoid cycles with dead threads *\/$/;"	m	struct:UpVal::__anon10::__anon11
trace	nse_nsock.cc	/^static void trace (nsock_iod nsiod, const char *message, const char *dir)$/;"	f	file:
traverseCclosure	liblua/lgc.c	/^static lu_mem traverseCclosure (global_State *g, CClosure *cl) {$/;"	f	file:
traverseLclosure	liblua/lgc.c	/^static lu_mem traverseLclosure (global_State *g, LClosure *cl) {$/;"	f	file:
traverseephemeron	liblua/lgc.c	/^static int traverseephemeron (global_State *g, Table *h) {$/;"	f	file:
traverseproto	liblua/lgc.c	/^static int traverseproto (global_State *g, Proto *f) {$/;"	f	file:
traversestrongtable	liblua/lgc.c	/^static void traversestrongtable (global_State *g, Table *h) {$/;"	f	file:
traversetable	liblua/lgc.c	/^static lu_mem traversetable (global_State *g, Table *h) {$/;"	f	file:
traversethread	liblua/lgc.c	/^static lu_mem traversethread (global_State *g, lua_State *th) {$/;"	f	file:
traverseweakvalue	liblua/lgc.c	/^static void traverseweakvalue (global_State *g, Table *h) {$/;"	f	file:
treatstackoption	liblua/ldblib.c	/^static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {$/;"	f	file:
tremove	liblua/ltablib.c	/^static int tremove (lua_State *L) {$/;"	f	file:
trie	nbase/nbase_addrset.c	/^    struct trie_node *trie;$/;"	m	struct:addrset	typeref:struct:addrset::trie_node	file:
trie_free	nbase/nbase_addrset.c	/^static void trie_free(struct trie_node *curr)$/;"	f	file:
trie_insert	nbase/nbase_addrset.c	/^static void trie_insert (struct trie_node *this, const struct sockaddr *sa, int bits)$/;"	f	file:
trie_match	nbase/nbase_addrset.c	/^static int trie_match (const struct trie_node *this, const struct sockaddr *sa)$/;"	f	file:
trie_node	nbase/nbase_addrset.c	/^struct trie_node {$/;"	s	file:
trie_split	nbase/nbase_addrset.c	/^static void trie_split (struct trie_node *this, const u32 *addr)$/;"	f	file:
trim	liblua/lbitlib.c	41;"	d	file:
try_cancel_timer	nsock/examples/nsock_test_timers.c	/^int try_cancel_timer(nsock_pool nsp, int idx, int notify) {$/;"	f
tryfuncTM	liblua/ldo.c	/^static void tryfuncTM (lua_State *L, StkId func) {$/;"	f	file:
ts	liblua/llex.h	/^  TString *ts;$/;"	m	union:__anon19
ts	liblua/lstate.h	/^  struct TString ts;$/;"	m	union:GCUnion	typeref:struct:GCUnion::TString
ts	nsock/src/nsock_pcap.h	/^  struct timeval ts;$/;"	m	struct:__anon28	typeref:struct:__anon28::timeval
tsslen	liblua/lobject.h	336;"	d
tsv	liblua/lobject.h	/^  TString tsv;$/;"	m	union:UTString
tsvalue	liblua/lobject.h	169;"	d
ttisCclosure	liblua/lobject.h	154;"	d
ttisLclosure	liblua/lobject.h	155;"	d
ttisboolean	liblua/lobject.h	146;"	d
ttisclosure	liblua/lobject.h	153;"	d
ttisdeadkey	liblua/lobject.h	159;"	d
ttisfloat	liblua/lobject.h	143;"	d
ttisfulluserdata	liblua/lobject.h	157;"	d
ttisfunction	liblua/lobject.h	152;"	d
ttisinteger	liblua/lobject.h	144;"	d
ttislcf	liblua/lobject.h	156;"	d
ttislightuserdata	liblua/lobject.h	147;"	d
ttislngstring	liblua/lobject.h	150;"	d
ttisnil	liblua/lobject.h	145;"	d
ttisnumber	liblua/lobject.h	142;"	d
ttisshrstring	liblua/lobject.h	149;"	d
ttisstring	liblua/lobject.h	148;"	d
ttistable	liblua/lobject.h	151;"	d
ttisthread	liblua/lobject.h	158;"	d
ttnov	liblua/lobject.h	136;"	d
ttuv_	liblua/lobject.h	/^  lu_byte ttuv_;  \/* user value's tag *\/$/;"	m	struct:Udata
ttype	liblua/lobject.h	133;"	d
ttypename	liblua/ltm.h	53;"	d
tval2msecs	nbase/nbase_misc.c	/^long tval2msecs(const char *tspec) {$/;"	f
tval2secs	nbase/nbase_misc.c	/^double tval2secs(const char *tspec) {$/;"	f
tval_unit	nbase/nbase_misc.c	/^const char *tval_unit(const char *tspec) {$/;"	f
tvk	liblua/lobject.h	/^  TValue tvk;$/;"	m	union:TKey
twoto	liblua/lobject.h	518;"	d
twups	liblua/lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
twups	liblua/lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_State
txtToken	liblua/llex.c	/^static const char *txtToken (LexState *ls, int token) {$/;"	f	file:
type	nsock/src/nsock_internal.h	/^  enum nse_type type;$/;"	m	struct:nevent	typeref:enum:nevent::nse_type
type	nsock/src/nsock_proxy.h	/^  enum nsock_proxy_type type;$/;"	m	struct:proxy_spec	typeref:enum:proxy_spec::nsock_proxy_type
type	nsock/src/proxy_socks4.c	/^    uint8_t  type;$/;"	m	struct:socks4_data	file:
typeerror	liblua/lauxlib.c	/^static int typeerror (lua_State *L, int arg, const char *tname) {$/;"	f	file:
u	liblua/lfunc.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon10
u	liblua/llimits.h	/^  double u;$/;"	m	union:__anon13
u	liblua/lobject.h	/^  } u;$/;"	m	struct:TString	typeref:union:TString::__anon22
u	liblua/lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon16
u	liblua/lstate.h	/^  struct Udata u;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Udata
u	liblua/lstate.h	/^  } u;$/;"	m	struct:CallInfo	typeref:union:CallInfo::__anon3
u	liblua/lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	struct:cD	typeref:union:cD::__anon8	file:
u16	nbase/nbase.h	/^typedef uint16_t u16;$/;"	t
u32	nbase/nbase.h	/^typedef uint32_t u32;$/;"	t
u64	nbase/nbase.h	/^typedef uint64_t u64;$/;"	t
u8	nbase/nbase.h	/^typedef uint8_t u8;$/;"	t
u_posrelat	liblua/lutf8lib.c	/^static lua_Integer u_posrelat (lua_Integer pos, size_t len) {$/;"	f	file:
u_short_t	nbase/nbase_winunix.h	/^typedef unsigned short u_short_t;$/;"	t
uchar	liblua/lstrlib.c	39;"	d	file:
ud	liblua/lstate.h	/^  void *ud;         \/* auxiliary data to 'frealloc' *\/$/;"	m	struct:global_State
udata2finalize	liblua/lgc.c	/^static GCObject *udata2finalize (global_State *g) {$/;"	f	file:
udatatypename	liblua/ltm.c	/^static const char udatatypename[] = "userdata";$/;"	v	file:
uint16_t	nbase/nbase_winconfig.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32_t	nbase/nbase_winconfig.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	nbase/nbase_winconfig.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	nbase/nbase_winconfig.h	/^typedef unsigned __int8 uint8_t;$/;"	t
unblock_socket	nbase/nbase_misc.c	/^int unblock_socket(int sd) {$/;"	f
unbound_search	liblua/ltable.c	/^static lua_Unsigned unbound_search (Table *t, lua_Unsigned j) {$/;"	f	file:
undefgoto	liblua/lparser.c	/^static l_noret undefgoto (LexState *ls, Labeldesc *gt) {$/;"	f	file:
unmakemask	liblua/ldblib.c	/^static char *unmakemask (int mask, char *smask) {$/;"	f	file:
unpack	liblua/ltablib.c	/^static int unpack (lua_State *L) {$/;"	f	file:
unpackint	liblua/lstrlib.c	/^static lua_Integer unpackint (lua_State *L, const char *str,$/;"	f	file:
unroll	liblua/ldo.c	/^static void unroll (lua_State *L, void *ud) {$/;"	f	file:
update_adler32	nbase/nbase_misc.c	/^static unsigned long update_adler32(unsigned long adler,$/;"	f	file:
update_crc	nbase/nbase_misc.c	/^static unsigned long update_crc(unsigned long crc,$/;"	f	file:
update_events	nsock/src/nsock_core.c	/^static void update_events(struct niod * iod, struct npool *ms, struct nevent *nse, int ev_inc, int ev_dec) {$/;"	f	file:
update_first_events	nsock/src/nsock_event.c	/^void update_first_events(struct nevent *nse) {$/;"	f
upisopen	liblua/lfunc.h	47;"	d
upval	liblua/lparser.c	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt	file:
upvalname	liblua/ldebug.c	/^static const char *upvalname (Proto *p, int uv) {$/;"	f	file:
upvals	liblua/lobject.h	/^  UpVal *upvals[1];  \/* list of upvalues *\/$/;"	m	struct:LClosure
upvalue	liblua/lobject.h	/^  TValue upvalue[1];  \/* list of upvalues *\/$/;"	m	struct:CClosure
upvalues	liblua/lobject.h	/^  Upvaldesc *upvalues;  \/* upvalue information *\/$/;"	m	struct:Proto
uri	nsock/src/nsock_proxy.h	/^struct uri {$/;"	s
uri_free	nsock/src/nsock_proxy.c	/^static void uri_free(struct uri *uri) {$/;"	f	file:
uri_parse_authority	nsock/src/nsock_proxy.c	/^static int uri_parse_authority(const char *authority, struct uri *uri) {$/;"	f	file:
usage	liblua/luac.c	/^static void usage(const char* message)$/;"	f	file:
usage	nsock/examples/nsock_telnet.c	/^void usage() {$/;"	f
user	nsock/src/nsock_proxy.h	/^  char *user;$/;"	m	struct:uri
user_	liblua/lobject.h	/^  union Value user_;  \/* user value *\/$/;"	m	struct:Udata	typeref:union:Udata::Value
userdata	nsock/src/nsock_internal.h	/^  void *userdata;$/;"	m	struct:nevent
userdata	nsock/src/nsock_internal.h	/^  void *userdata;$/;"	m	struct:niod
userdata	nsock/src/nsock_internal.h	/^  void *userdata;$/;"	m	struct:npool
usleep	nbase/nbase_time.c	/^void usleep(unsigned long usec) {$/;"	f
utf8_decode	liblua/lutf8lib.c	/^static const char *utf8_decode (const char *o, int *val) {$/;"	f	file:
utf8_to_wchar	nbase/test/test-escape_windows_command_arg.c	/^static LPWSTR utf8_to_wchar(const char *s)$/;"	f	file:
utf8esc	liblua/llex.c	/^static void utf8esc (LexState *ls) {$/;"	f	file:
utfchar	liblua/lutf8lib.c	/^static int utfchar (lua_State *L) {$/;"	f	file:
utflen	liblua/lutf8lib.c	/^static int utflen (lua_State *L) {$/;"	f	file:
uv	liblua/lobject.h	/^  Udata uv;$/;"	m	union:UUdata
uvalue	liblua/lobject.h	170;"	d
v	liblua/lfunc.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal
v	liblua/lparser.c	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl	file:
v	liblua/lparser.c	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign	file:
val	nbase/getopt.h	/^  int val;$/;"	m	struct:option
val	nsock/tests/ghheaps.c	/^  int val;$/;"	m	struct:testitem	file:
val	nsock/tests/ghlists.c	/^  unsigned int val;$/;"	m	struct:testlist	file:
val_	liblua/lobject.h	123;"	d
validop	liblua/lcode.c	/^static int validop (int op, TValue *v1, TValue *v2) {$/;"	f	file:
valiswhite	liblua/lgc.c	74;"	d	file:
value	liblua/lfunc.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon10
value	nsock/src/nsock_proxy.c	/^  struct proxy_node *value;$/;"	m	struct:proxy_parser	typeref:struct:proxy_parser::proxy_node	file:
varinfo	liblua/ldebug.c	/^static const char *varinfo (lua_State *L, const TValue *o) {$/;"	f	file:
varname	liblua/lobject.h	/^  TString *varname;$/;"	m	struct:LocVar
vasnprintf	nbase/snprintf.c	/^vasnprintf (char **ret, size_t max_sz, const char *format, va_list args)$/;"	f
vasprintf	nbase/snprintf.c	/^vasprintf (char **ret, const char *format, va_list args)$/;"	f
version	liblua/lstate.h	/^  const lua_Number *version;  \/* pointer to version number *\/$/;"	m	struct:global_State
version	nsock/src/proxy_socks4.c	/^    uint8_t  version;$/;"	m	struct:socks4_data	file:
vkisinreg	liblua/lparser.h	52;"	d
vkisvar	liblua/lparser.h	51;"	d
vmbreak	liblua/lvm.c	767;"	d	file:
vmcase	liblua/lvm.c	766;"	d	file:
vmdispatch	liblua/lvm.c	765;"	d	file:
vmfetch	liblua/lvm.c	756;"	d	file:
vslen	liblua/lobject.h	339;"	d
vsnprintf	nbase/snprintf.c	/^vsnprintf (char *str, size_t sz, const char *format, va_list args)$/;"	f
vt	liblua/lparser.h	/^      lu_byte vt;  \/* whether 't' is register (VLOCAL) or upvalue (VUPVAL) *\/$/;"	m	struct:expdesc::__anon16::__anon17
watched_events	nsock/src/nsock_internal.h	/^  int watched_events;$/;"	m	struct:niod
wchar_to_utf8	nbase/test/test-escape_windows_command_arg.c	/^static char *wchar_to_utf8(const LPWSTR s)$/;"	f	file:
wchar_to_utf8_array	nbase/test/test-escape_windows_command_arg.c	/^static char **wchar_to_utf8_array(const LPWSTR a[], unsigned int len)$/;"	f	file:
weak	liblua/lstate.h	/^  GCObject *weak;  \/* list of tables with weak values *\/$/;"	m	struct:global_State
wgkey	liblua/ltable.h	25;"	d
what	liblua/lua.h	/^  const char *what;	\/* (S) 'Lua', 'C', 'main', 'tail' *\/$/;"	m	struct:lua_Debug
what 	nselib/strict.lua	/^local function what ()$/;"	f
whilestat	liblua/lparser.c	/^static void whilestat (LexState *ls, int line) {$/;"	f	file:
white2gray	liblua/lgc.c	70;"	d	file:
win_init	nsock/tests/tests_main.c	/^static int win_init(void) {$/;"	f	file:
win_stdin_ready	nbase/nbase_winunix.c	/^int win_stdin_ready(void) {$/;"	f
win_stdin_start_thread	nbase/nbase_winunix.c	/^int win_stdin_start_thread(void) {$/;"	f
win_stdin_thread_func	nbase/nbase_winunix.c	/^static DWORD WINAPI win_stdin_thread_func(void *data) {$/;"	f	file:
write	nbase/nbase.h	356;"	d
write_count	nsock/src/nsock_internal.h	/^  unsigned long write_count;$/;"	m	struct:niod
write_events	nsock/src/nsock_internal.h	/^  gh_list_t write_events;$/;"	m	struct:npool
writeinfo	nsock/src/nsock_internal.h	/^  struct writeinfo writeinfo;$/;"	m	struct:nevent	typeref:struct:nevent::writeinfo
writeinfo	nsock/src/nsock_internal.h	/^struct writeinfo {$/;"	s
writer	liblua/ldump.c	/^  lua_Writer writer;$/;"	m	struct:__anon21	file:
writer	liblua/lstrlib.c	/^static int writer (lua_State *L, const void *b, size_t size, void *B) {$/;"	f	file:
writer	liblua/luac.c	/^static int writer(lua_State* L, const void* p, size_t size, void* u)$/;"	f	file:
writesd_count	nsock/src/nsock_internal.h	/^  int writesd_count;$/;"	m	struct:niod
written_so_far	nsock/src/nsock_internal.h	/^  int written_so_far;$/;"	m	struct:writeinfo
wsabuf	nsock/src/engine_iocp.c	/^  WSABUF wsabuf;$/;"	m	struct:extended_overlapped	file:
xyzprintf	nbase/snprintf.c	/^xyzprintf (struct state *state, const char *char_format, va_list ap)$/;"	f	file:
yield	nse_nsock.cc	/^static int yield (lua_State *L, nse_nsock_udata *nu, const char *action,$/;"	f	file:
yield	nse_nsock_tmp.cc	/^static int yield(lua_State *L, nse_nsock_udata *nu, const char *action, const char *dir)$/;"	f	file:
yindex	liblua/lparser.c	/^static void yindex (LexState *ls, expdesc *v) {$/;"	f	file:
z	liblua/ldo.c	/^  ZIO *z;$/;"	m	struct:SParser	file:
z	liblua/llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState
zero_flag	nbase/snprintf.c	/^    zero_flag      = 16$/;"	e	enum:format_flags	file:
zgetc	liblua/lzio.h	20;"	d
~Ops	util.cc	/^Ops::~Ops()$/;"	f	class:Ops
~Target	Target.h	/^	~Target(){};$/;"	f	class:Target
